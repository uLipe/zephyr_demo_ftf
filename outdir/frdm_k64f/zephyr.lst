
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <__start>:
	RNGA_Seed(RNG, seed);
	RNGA_SetMode(RNG, kRNGA_ModeSleep);
}

uint32_t sys_rand32_get(void)
{
       0:	2002fff8 	.word	0x2002fff8
       4:	00003bd5 	.word	0x00003bd5
	uint32_t random;
	uint32_t output = 0;
	int i;

	RNGA_SetMode(RNG, kRNGA_ModeNormal);
       8:	00003c31 	.word	0x00003c31
       c:	00003a7d 	.word	0x00003a7d
}

uint32_t sys_rand32_get(void)
{
	uint32_t random;
	uint32_t output = 0;
      10:	00003a7d 	.word	0x00003a7d
	 * word read.
	 */
	for (i = 0; i < 32; i++) {
		status_t status;

		status = RNGA_GetRandomData(RNG, &random, sizeof(random));
      14:	00003a7d 	.word	0x00003a7d
      18:	00003a7d 	.word	0x00003a7d
      1c:	00003a7d 	.word	0x00003a7d
		if (status) {
			SYS_LOG_ERR("RNGA_GetRandomData failed with %d",
				    status);
		}
		output <<= 1;
		output |= random & 1;
      20:	00003a7d 	.word	0x00003a7d
      24:	00003a7d 	.word	0x00003a7d
	/* The Reference manual states that back to back reads from
	 * the RNGA deliver one or two bits of entropy per 32-bit
	 * word, therefore we deliberately only use 1 bit per 32 bit
	 * word read.
	 */
	for (i = 0; i < 32; i++) {
      28:	00003a7d 	.word	0x00003a7d
      2c:	00003601 	.word	0x00003601
				    status);
		}
		output <<= 1;
		output |= random & 1;
	}
	RNGA_SetMode(RNG, kRNGA_ModeSleep);
      30:	00003a7d 	.word	0x00003a7d
      34:	00003a7d 	.word	0x00003a7d

	return output;
}
      38:	000035b1 	.word	0x000035b1
      3c:	00001461 	.word	0x00001461

00000040 <_irq_vector_table>:
      40:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
	printk("xpsr:   %" PRIx32 "\n", esf->xpsr);
#ifdef CONFIG_FLOAT
	for (int i = 0; i < 16; i += 4) {
		printk("s[%d]:  %" PRIx32 "  s[%d]:  %" PRIx32 "  s[%d]:  %"
		       PRIx32 "  s[%d]:  %" PRIx32 "\n",
		       i, (uint32_t)esf->s[i],
      50:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
		       i + 1, (uint32_t)esf->s[i + 1],
      60:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
		       i + 2, (uint32_t)esf->s[i + 2],
      70:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
	printk("r14/lr: %" PRIx32 "\n", esf->lr);
	printk("r15/pc: %" PRIx32 "  ", esf->pc);
	printk("xpsr:   %" PRIx32 "\n", esf->xpsr);
#ifdef CONFIG_FLOAT
	for (int i = 0; i < 16; i += 4) {
		printk("s[%d]:  %" PRIx32 "  s[%d]:  %" PRIx32 "  s[%d]:  %"
      80:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
      90:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
      a0:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
	printk("r12/ip: %" PRIx32 "  ", esf->ip);
	printk("r14/lr: %" PRIx32 "\n", esf->lr);
	printk("r15/pc: %" PRIx32 "  ", esf->pc);
	printk("xpsr:   %" PRIx32 "\n", esf->xpsr);
#ifdef CONFIG_FLOAT
	for (int i = 0; i < 16; i += 4) {
      b0:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
		       i + 2, (uint32_t)esf->s[i + 2],
		       i + 3, (uint32_t)esf->s[i + 3]);
	}
	printk("fpscr:  %" PRIx32 "\n", esf->fpscr);
#endif
}
      c0:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
      d0:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
      e0:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
      f0:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     100:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     110:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     120:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     130:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     140:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     150:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     160:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     170:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     180:	00003aa5 00003aa5 00003aa5 00003aa5     .:...:...:...:..
     190:	00003aa5 00003aa5 00000000 00000000     .:...:..........
	...

00000400 <__security_frdm_k64f>:
     400:	ffffffff ffffffff ffffffff fffffffe     ................

00000410 <_sw_isr_table>:
     410:	abad1dea 000039f5                       .....9..

00000418 <_isr_irq1>:
     418:	abad1dea 000039f5                       .....9..

00000420 <_isr_irq2>:
     420:	abad1dea 000039f5                       .....9..

00000428 <_isr_irq3>:
     428:	abad1dea 000039f5                       .....9..

00000430 <_isr_irq4>:
     430:	abad1dea 000039f5                       .....9..

00000438 <_isr_irq5>:
     438:	abad1dea 000039f5                       .....9..

00000440 <_isr_irq6>:
     440:	abad1dea 000039f5                       .....9..

00000448 <_isr_irq7>:
     448:	abad1dea 000039f5                       .....9..

00000450 <_isr_irq8>:
     450:	abad1dea 000039f5                       .....9..

00000458 <_isr_irq9>:
     458:	abad1dea 000039f5                       .....9..

00000460 <_isr_irq10>:
     460:	abad1dea 000039f5                       .....9..

00000468 <_isr_irq11>:
     468:	abad1dea 000039f5                       .....9..

00000470 <_isr_irq12>:
     470:	abad1dea 000039f5                       .....9..

00000478 <_isr_irq13>:
     478:	abad1dea 000039f5                       .....9..

00000480 <_isr_irq14>:
     480:	abad1dea 000039f5                       .....9..

00000488 <_isr_irq15>:
     488:	abad1dea 000039f5                       .....9..

00000490 <_isr_irq16>:
     490:	abad1dea 000039f5                       .....9..

00000498 <_isr_irq17>:
     498:	abad1dea 000039f5                       .....9..

000004a0 <_isr_irq18>:
     4a0:	abad1dea 000039f5                       .....9..

000004a8 <_isr_irq19>:
     4a8:	abad1dea 000039f5                       .....9..

000004b0 <_isr_irq20>:
     4b0:	abad1dea 000039f5                       .....9..

000004b8 <_isr_irq21>:
     4b8:	abad1dea 000039f5                       .....9..

000004c0 <_isr_irq22>:
     4c0:	abad1dea 000039f5                       .....9..

000004c8 <_isr_irq23>:
     4c8:	abad1dea 000039f5                       .....9..

000004d0 <_isr_irq24.8175>:
     4d0:	200000d0 000017d9                       ... ....

000004d8 <_isr_irq25>:
     4d8:	abad1dea 000039f5                       .....9..

000004e0 <_isr_irq26>:
     4e0:	abad1dea 000039f5                       .....9..

000004e8 <_isr_irq27>:
     4e8:	abad1dea 000039f5                       .....9..

000004f0 <_isr_irq28>:
     4f0:	abad1dea 000039f5                       .....9..

000004f8 <_isr_irq29>:
     4f8:	abad1dea 000039f5                       .....9..

00000500 <_isr_irq30>:
     500:	abad1dea 000039f5                       .....9..

00000508 <_isr_irq31>:
     508:	abad1dea 000039f5                       .....9..

00000510 <_isr_irq32>:
     510:	abad1dea 000039f5                       .....9..

00000518 <_isr_irq33>:
     518:	abad1dea 000039f5                       .....9..

00000520 <_isr_irq34>:
     520:	abad1dea 000039f5                       .....9..

00000528 <_isr_irq35>:
     528:	abad1dea 000039f5                       .....9..

00000530 <_isr_irq36>:
     530:	abad1dea 000039f5                       .....9..

00000538 <_isr_irq37>:
     538:	abad1dea 000039f5                       .....9..

00000540 <_isr_irq38>:
     540:	abad1dea 000039f5                       .....9..

00000548 <_isr_irq39>:
     548:	abad1dea 000039f5                       .....9..

00000550 <_isr_irq40>:
     550:	abad1dea 000039f5                       .....9..

00000558 <_isr_irq41>:
     558:	abad1dea 000039f5                       .....9..

00000560 <_isr_irq42>:
     560:	abad1dea 000039f5                       .....9..

00000568 <_isr_irq43>:
     568:	abad1dea 000039f5                       .....9..

00000570 <_isr_irq44>:
     570:	abad1dea 000039f5                       .....9..

00000578 <_isr_irq45>:
     578:	abad1dea 000039f5                       .....9..

00000580 <_isr_irq46>:
     580:	abad1dea 000039f5                       .....9..

00000588 <_isr_irq47>:
     588:	abad1dea 000039f5                       .....9..

00000590 <_isr_irq48>:
     590:	abad1dea 000039f5                       .....9..

00000598 <_isr_irq49>:
     598:	abad1dea 000039f5                       .....9..

000005a0 <_isr_irq50>:
     5a0:	abad1dea 000039f5                       .....9..

000005a8 <_isr_irq51>:
     5a8:	abad1dea 000039f5                       .....9..

000005b0 <_isr_irq52>:
     5b0:	abad1dea 000039f5                       .....9..

000005b8 <_isr_irq53>:
     5b8:	abad1dea 000039f5                       .....9..

000005c0 <_isr_irq54>:
     5c0:	abad1dea 000039f5                       .....9..

000005c8 <_isr_irq55>:
     5c8:	abad1dea 000039f5                       .....9..

000005d0 <_isr_irq56>:
     5d0:	abad1dea 000039f5                       .....9..

000005d8 <_isr_irq57>:
     5d8:	abad1dea 000039f5                       .....9..

000005e0 <_isr_irq58>:
     5e0:	abad1dea 000039f5                       .....9..

000005e8 <_isr_irq59.5673>:
     5e8:	200000c4 000016e1                       ... ....

000005f0 <_isr_irq60.5686>:
     5f0:	200000b8 000016e1                       ... ....

000005f8 <_isr_irq61.5699>:
     5f8:	200000ac 000016e1                       ... ....

00000600 <_isr_irq62.5712>:
     600:	200000a0 000016e1                       ... ....

00000608 <_isr_irq63.5725>:
     608:	20000094 000016e1                       ... ....

00000610 <_isr_irq64>:
     610:	abad1dea 000039f5                       .....9..

00000618 <_isr_irq65>:
     618:	abad1dea 000039f5                       .....9..

00000620 <_isr_irq66>:
     620:	abad1dea 000039f5                       .....9..

00000628 <_isr_irq67>:
     628:	abad1dea 000039f5                       .....9..

00000630 <_isr_irq68>:
     630:	abad1dea 000039f5                       .....9..

00000638 <_isr_irq69>:
     638:	abad1dea 000039f5                       .....9..

00000640 <_isr_irq70>:
     640:	abad1dea 000039f5                       .....9..

00000648 <_isr_irq71>:
     648:	abad1dea 000039f5                       .....9..

00000650 <_isr_irq72>:
     650:	abad1dea 000039f5                       .....9..

00000658 <_isr_irq73>:
     658:	abad1dea 000039f5                       .....9..

00000660 <_isr_irq74>:
     660:	abad1dea 000039f5                       .....9..

00000668 <_isr_irq75>:
     668:	abad1dea 000039f5                       .....9..

00000670 <_isr_irq76>:
     670:	abad1dea 000039f5                       .....9..

00000678 <_isr_irq77>:
     678:	abad1dea 000039f5                       .....9..

00000680 <_isr_irq78>:
     680:	abad1dea 000039f5                       .....9..

00000688 <_isr_irq79>:
     688:	abad1dea 000039f5                       .....9..

00000690 <_isr_irq80>:
     690:	abad1dea 000039f5                       .....9..

00000698 <_isr_irq81>:
     698:	abad1dea 000039f5                       .....9..

000006a0 <_isr_irq82>:
     6a0:	abad1dea 000039f5                       .....9..

000006a8 <_isr_irq83>:
     6a8:	abad1dea 000039f5                       .....9..

000006b0 <_isr_irq84>:
     6b0:	abad1dea 000039f5                       .....9..

000006b8 <_isr_irq85>:
     6b8:	abad1dea 000039f5                       .....9..

000006c0 <_isr_irq86>:
     6c0:	abad1dea 000039f5                       .....9..

000006c8 <__aeabi_drsub>:
     6c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     6cc:	e002      	b.n	6d4 <__adddf3>
     6ce:	bf00      	nop

000006d0 <__aeabi_dsub>:
     6d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000006d4 <__adddf3>:
     6d4:	b530      	push	{r4, r5, lr}
     6d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
     6da:	ea4f 0543 	mov.w	r5, r3, lsl #1
     6de:	ea94 0f05 	teq	r4, r5
     6e2:	bf08      	it	eq
     6e4:	ea90 0f02 	teqeq	r0, r2
     6e8:	bf1f      	itttt	ne
     6ea:	ea54 0c00 	orrsne.w	ip, r4, r0
     6ee:	ea55 0c02 	orrsne.w	ip, r5, r2
     6f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     6f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     6fa:	f000 80e2 	beq.w	8c2 <CONFIG_ISR_STACK_SIZE+0xc2>
     6fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
     702:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     706:	bfb8      	it	lt
     708:	426d      	neglt	r5, r5
     70a:	dd0c      	ble.n	726 <__adddf3+0x52>
     70c:	442c      	add	r4, r5
     70e:	ea80 0202 	eor.w	r2, r0, r2
     712:	ea81 0303 	eor.w	r3, r1, r3
     716:	ea82 0000 	eor.w	r0, r2, r0
     71a:	ea83 0101 	eor.w	r1, r3, r1
     71e:	ea80 0202 	eor.w	r2, r0, r2
     722:	ea81 0303 	eor.w	r3, r1, r3
     726:	2d36      	cmp	r5, #54	; 0x36
     728:	bf88      	it	hi
     72a:	bd30      	pophi	{r4, r5, pc}
     72c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     730:	ea4f 3101 	mov.w	r1, r1, lsl #12
     734:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     738:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     73c:	d002      	beq.n	744 <__adddf3+0x70>
     73e:	4240      	negs	r0, r0
     740:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     744:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     748:	ea4f 3303 	mov.w	r3, r3, lsl #12
     74c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     750:	d002      	beq.n	758 <__adddf3+0x84>
     752:	4252      	negs	r2, r2
     754:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     758:	ea94 0f05 	teq	r4, r5
     75c:	f000 80a7 	beq.w	8ae <CONFIG_ISR_STACK_SIZE+0xae>
     760:	f1a4 0401 	sub.w	r4, r4, #1
     764:	f1d5 0e20 	rsbs	lr, r5, #32
     768:	db0d      	blt.n	786 <__adddf3+0xb2>
     76a:	fa02 fc0e 	lsl.w	ip, r2, lr
     76e:	fa22 f205 	lsr.w	r2, r2, r5
     772:	1880      	adds	r0, r0, r2
     774:	f141 0100 	adc.w	r1, r1, #0
     778:	fa03 f20e 	lsl.w	r2, r3, lr
     77c:	1880      	adds	r0, r0, r2
     77e:	fa43 f305 	asr.w	r3, r3, r5
     782:	4159      	adcs	r1, r3
     784:	e00e      	b.n	7a4 <__adddf3+0xd0>
     786:	f1a5 0520 	sub.w	r5, r5, #32
     78a:	f10e 0e20 	add.w	lr, lr, #32
     78e:	2a01      	cmp	r2, #1
     790:	fa03 fc0e 	lsl.w	ip, r3, lr
     794:	bf28      	it	cs
     796:	f04c 0c02 	orrcs.w	ip, ip, #2
     79a:	fa43 f305 	asr.w	r3, r3, r5
     79e:	18c0      	adds	r0, r0, r3
     7a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     7a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     7a8:	d507      	bpl.n	7ba <__adddf3+0xe6>
     7aa:	f04f 0e00 	mov.w	lr, #0
     7ae:	f1dc 0c00 	rsbs	ip, ip, #0
     7b2:	eb7e 0000 	sbcs.w	r0, lr, r0
     7b6:	eb6e 0101 	sbc.w	r1, lr, r1
     7ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     7be:	d31b      	bcc.n	7f8 <__adddf3+0x124>
     7c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     7c4:	d30c      	bcc.n	7e0 <__adddf3+0x10c>
     7c6:	0849      	lsrs	r1, r1, #1
     7c8:	ea5f 0030 	movs.w	r0, r0, rrx
     7cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
     7d0:	f104 0401 	add.w	r4, r4, #1
     7d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
     7d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     7dc:	f080 809a 	bcs.w	914 <CONFIG_ISR_STACK_SIZE+0x114>
     7e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     7e4:	bf08      	it	eq
     7e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     7ea:	f150 0000 	adcs.w	r0, r0, #0
     7ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     7f2:	ea41 0105 	orr.w	r1, r1, r5
     7f6:	bd30      	pop	{r4, r5, pc}
     7f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     7fc:	4140      	adcs	r0, r0
     7fe:	eb41 0101 	adc.w	r1, r1, r1
     802:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     806:	f1a4 0401 	sub.w	r4, r4, #1
     80a:	d1e9      	bne.n	7e0 <__adddf3+0x10c>
     80c:	f091 0f00 	teq	r1, #0
     810:	bf04      	itt	eq
     812:	4601      	moveq	r1, r0
     814:	2000      	moveq	r0, #0
     816:	fab1 f381 	clz	r3, r1
     81a:	bf08      	it	eq
     81c:	3320      	addeq	r3, #32
     81e:	f1a3 030b 	sub.w	r3, r3, #11
     822:	f1b3 0220 	subs.w	r2, r3, #32
     826:	da0c      	bge.n	842 <CONFIG_ISR_STACK_SIZE+0x42>
     828:	320c      	adds	r2, #12
     82a:	dd08      	ble.n	83e <CONFIG_ISR_STACK_SIZE+0x3e>
     82c:	f102 0c14 	add.w	ip, r2, #20
     830:	f1c2 020c 	rsb	r2, r2, #12
     834:	fa01 f00c 	lsl.w	r0, r1, ip
     838:	fa21 f102 	lsr.w	r1, r1, r2
     83c:	e00c      	b.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     83e:	f102 0214 	add.w	r2, r2, #20
     842:	bfd8      	it	le
     844:	f1c2 0c20 	rsble	ip, r2, #32
     848:	fa01 f102 	lsl.w	r1, r1, r2
     84c:	fa20 fc0c 	lsr.w	ip, r0, ip
     850:	bfdc      	itt	le
     852:	ea41 010c 	orrle.w	r1, r1, ip
     856:	4090      	lslle	r0, r2
     858:	1ae4      	subs	r4, r4, r3
     85a:	bfa2      	ittt	ge
     85c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     860:	4329      	orrge	r1, r5
     862:	bd30      	popge	{r4, r5, pc}
     864:	ea6f 0404 	mvn.w	r4, r4
     868:	3c1f      	subs	r4, #31
     86a:	da1c      	bge.n	8a6 <CONFIG_ISR_STACK_SIZE+0xa6>
     86c:	340c      	adds	r4, #12
     86e:	dc0e      	bgt.n	88e <CONFIG_ISR_STACK_SIZE+0x8e>
     870:	f104 0414 	add.w	r4, r4, #20
     874:	f1c4 0220 	rsb	r2, r4, #32
     878:	fa20 f004 	lsr.w	r0, r0, r4
     87c:	fa01 f302 	lsl.w	r3, r1, r2
     880:	ea40 0003 	orr.w	r0, r0, r3
     884:	fa21 f304 	lsr.w	r3, r1, r4
     888:	ea45 0103 	orr.w	r1, r5, r3
     88c:	bd30      	pop	{r4, r5, pc}
     88e:	f1c4 040c 	rsb	r4, r4, #12
     892:	f1c4 0220 	rsb	r2, r4, #32
     896:	fa20 f002 	lsr.w	r0, r0, r2
     89a:	fa01 f304 	lsl.w	r3, r1, r4
     89e:	ea40 0003 	orr.w	r0, r0, r3
     8a2:	4629      	mov	r1, r5
     8a4:	bd30      	pop	{r4, r5, pc}
     8a6:	fa21 f004 	lsr.w	r0, r1, r4
     8aa:	4629      	mov	r1, r5
     8ac:	bd30      	pop	{r4, r5, pc}
     8ae:	f094 0f00 	teq	r4, #0
     8b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     8b6:	bf06      	itte	eq
     8b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     8bc:	3401      	addeq	r4, #1
     8be:	3d01      	subne	r5, #1
     8c0:	e74e      	b.n	760 <__adddf3+0x8c>
     8c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     8c6:	bf18      	it	ne
     8c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     8cc:	d029      	beq.n	922 <CONFIG_ISR_STACK_SIZE+0x122>
     8ce:	ea94 0f05 	teq	r4, r5
     8d2:	bf08      	it	eq
     8d4:	ea90 0f02 	teqeq	r0, r2
     8d8:	d005      	beq.n	8e6 <CONFIG_ISR_STACK_SIZE+0xe6>
     8da:	ea54 0c00 	orrs.w	ip, r4, r0
     8de:	bf04      	itt	eq
     8e0:	4619      	moveq	r1, r3
     8e2:	4610      	moveq	r0, r2
     8e4:	bd30      	pop	{r4, r5, pc}
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf1e      	ittt	ne
     8ec:	2100      	movne	r1, #0
     8ee:	2000      	movne	r0, #0
     8f0:	bd30      	popne	{r4, r5, pc}
     8f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     8f6:	d105      	bne.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
     8f8:	0040      	lsls	r0, r0, #1
     8fa:	4149      	adcs	r1, r1
     8fc:	bf28      	it	cs
     8fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     902:	bd30      	pop	{r4, r5, pc}
     904:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     908:	bf3c      	itt	cc
     90a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     90e:	bd30      	popcc	{r4, r5, pc}
     910:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     914:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     918:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     91c:	f04f 0000 	mov.w	r0, #0
     920:	bd30      	pop	{r4, r5, pc}
     922:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     926:	bf1a      	itte	ne
     928:	4619      	movne	r1, r3
     92a:	4610      	movne	r0, r2
     92c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     930:	bf1c      	itt	ne
     932:	460b      	movne	r3, r1
     934:	4602      	movne	r2, r0
     936:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     93a:	bf06      	itte	eq
     93c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     940:	ea91 0f03 	teqeq	r1, r3
     944:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     948:	bd30      	pop	{r4, r5, pc}
     94a:	bf00      	nop

0000094c <__aeabi_ui2d>:
     94c:	f090 0f00 	teq	r0, #0
     950:	bf04      	itt	eq
     952:	2100      	moveq	r1, #0
     954:	4770      	bxeq	lr
     956:	b530      	push	{r4, r5, lr}
     958:	f44f 6480 	mov.w	r4, #1024	; 0x400
     95c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     960:	f04f 0500 	mov.w	r5, #0
     964:	f04f 0100 	mov.w	r1, #0
     968:	e750      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     96a:	bf00      	nop

0000096c <__aeabi_i2d>:
     96c:	f090 0f00 	teq	r0, #0
     970:	bf04      	itt	eq
     972:	2100      	moveq	r1, #0
     974:	4770      	bxeq	lr
     976:	b530      	push	{r4, r5, lr}
     978:	f44f 6480 	mov.w	r4, #1024	; 0x400
     97c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     980:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     984:	bf48      	it	mi
     986:	4240      	negmi	r0, r0
     988:	f04f 0100 	mov.w	r1, #0
     98c:	e73e      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     98e:	bf00      	nop

00000990 <__aeabi_f2d>:
     990:	0042      	lsls	r2, r0, #1
     992:	ea4f 01e2 	mov.w	r1, r2, asr #3
     996:	ea4f 0131 	mov.w	r1, r1, rrx
     99a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     99e:	bf1f      	itttt	ne
     9a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     9a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     9a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     9ac:	4770      	bxne	lr
     9ae:	f092 0f00 	teq	r2, #0
     9b2:	bf14      	ite	ne
     9b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     9b8:	4770      	bxeq	lr
     9ba:	b530      	push	{r4, r5, lr}
     9bc:	f44f 7460 	mov.w	r4, #896	; 0x380
     9c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     9c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     9c8:	e720      	b.n	80c <CONFIG_ISR_STACK_SIZE+0xc>
     9ca:	bf00      	nop

000009cc <__aeabi_ul2d>:
     9cc:	ea50 0201 	orrs.w	r2, r0, r1
     9d0:	bf08      	it	eq
     9d2:	4770      	bxeq	lr
     9d4:	b530      	push	{r4, r5, lr}
     9d6:	f04f 0500 	mov.w	r5, #0
     9da:	e00a      	b.n	9f2 <__aeabi_l2d+0x16>

000009dc <__aeabi_l2d>:
     9dc:	ea50 0201 	orrs.w	r2, r0, r1
     9e0:	bf08      	it	eq
     9e2:	4770      	bxeq	lr
     9e4:	b530      	push	{r4, r5, lr}
     9e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     9ea:	d502      	bpl.n	9f2 <__aeabi_l2d+0x16>
     9ec:	4240      	negs	r0, r0
     9ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     9f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
     9f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
     9fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     9fe:	f43f aedc 	beq.w	7ba <__adddf3+0xe6>
     a02:	f04f 0203 	mov.w	r2, #3
     a06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     a0a:	bf18      	it	ne
     a0c:	3203      	addne	r2, #3
     a0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     a12:	bf18      	it	ne
     a14:	3203      	addne	r2, #3
     a16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     a1a:	f1c2 0320 	rsb	r3, r2, #32
     a1e:	fa00 fc03 	lsl.w	ip, r0, r3
     a22:	fa20 f002 	lsr.w	r0, r0, r2
     a26:	fa01 fe03 	lsl.w	lr, r1, r3
     a2a:	ea40 000e 	orr.w	r0, r0, lr
     a2e:	fa21 f102 	lsr.w	r1, r1, r2
     a32:	4414      	add	r4, r2
     a34:	e6c1      	b.n	7ba <__adddf3+0xe6>
     a36:	bf00      	nop

00000a38 <__aeabi_ldivmod>:
     a38:	b97b      	cbnz	r3, a5a <__aeabi_ldivmod+0x22>
     a3a:	b972      	cbnz	r2, a5a <__aeabi_ldivmod+0x22>
     a3c:	2900      	cmp	r1, #0
     a3e:	bfbe      	ittt	lt
     a40:	2000      	movlt	r0, #0
     a42:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     a46:	e006      	blt.n	a56 <__aeabi_ldivmod+0x1e>
     a48:	bf08      	it	eq
     a4a:	2800      	cmpeq	r0, #0
     a4c:	bf1c      	itt	ne
     a4e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     a52:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     a56:	f000 b9c9 	b.w	dec <__aeabi_idiv0>
     a5a:	f1ad 0c08 	sub.w	ip, sp, #8
     a5e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     a62:	2900      	cmp	r1, #0
     a64:	db09      	blt.n	a7a <__aeabi_ldivmod+0x42>
     a66:	2b00      	cmp	r3, #0
     a68:	db1a      	blt.n	aa0 <__aeabi_ldivmod+0x68>
     a6a:	f000 f84d 	bl	b08 <__udivmoddi4>
     a6e:	f8dd e004 	ldr.w	lr, [sp, #4]
     a72:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a76:	b004      	add	sp, #16
     a78:	4770      	bx	lr
     a7a:	4240      	negs	r0, r0
     a7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a80:	2b00      	cmp	r3, #0
     a82:	db1b      	blt.n	abc <__aeabi_ldivmod+0x84>
     a84:	f000 f840 	bl	b08 <__udivmoddi4>
     a88:	f8dd e004 	ldr.w	lr, [sp, #4]
     a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     a90:	b004      	add	sp, #16
     a92:	4240      	negs	r0, r0
     a94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     a98:	4252      	negs	r2, r2
     a9a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     a9e:	4770      	bx	lr
     aa0:	4252      	negs	r2, r2
     aa2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     aa6:	f000 f82f 	bl	b08 <__udivmoddi4>
     aaa:	f8dd e004 	ldr.w	lr, [sp, #4]
     aae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ab2:	b004      	add	sp, #16
     ab4:	4240      	negs	r0, r0
     ab6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     aba:	4770      	bx	lr
     abc:	4252      	negs	r2, r2
     abe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ac2:	f000 f821 	bl	b08 <__udivmoddi4>
     ac6:	f8dd e004 	ldr.w	lr, [sp, #4]
     aca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     ace:	b004      	add	sp, #16
     ad0:	4252      	negs	r2, r2
     ad2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ad6:	4770      	bx	lr

00000ad8 <__aeabi_uldivmod>:
     ad8:	b953      	cbnz	r3, af0 <__aeabi_uldivmod+0x18>
     ada:	b94a      	cbnz	r2, af0 <__aeabi_uldivmod+0x18>
     adc:	2900      	cmp	r1, #0
     ade:	bf08      	it	eq
     ae0:	2800      	cmpeq	r0, #0
     ae2:	bf1c      	itt	ne
     ae4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     ae8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     aec:	f000 b97e 	b.w	dec <__aeabi_idiv0>
     af0:	f1ad 0c08 	sub.w	ip, sp, #8
     af4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     af8:	f000 f806 	bl	b08 <__udivmoddi4>
     afc:	f8dd e004 	ldr.w	lr, [sp, #4]
     b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     b04:	b004      	add	sp, #16
     b06:	4770      	bx	lr

00000b08 <__udivmoddi4>:
     b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     b0c:	468c      	mov	ip, r1
     b0e:	460e      	mov	r6, r1
     b10:	4604      	mov	r4, r0
     b12:	9d08      	ldr	r5, [sp, #32]
     b14:	2b00      	cmp	r3, #0
     b16:	d150      	bne.n	bba <__udivmoddi4+0xb2>
     b18:	428a      	cmp	r2, r1
     b1a:	4617      	mov	r7, r2
     b1c:	d96c      	bls.n	bf8 <__udivmoddi4+0xf0>
     b1e:	fab2 fe82 	clz	lr, r2
     b22:	f1be 0f00 	cmp.w	lr, #0
     b26:	d00b      	beq.n	b40 <__udivmoddi4+0x38>
     b28:	f1ce 0420 	rsb	r4, lr, #32
     b2c:	fa20 f404 	lsr.w	r4, r0, r4
     b30:	fa01 f60e 	lsl.w	r6, r1, lr
     b34:	ea44 0c06 	orr.w	ip, r4, r6
     b38:	fa02 f70e 	lsl.w	r7, r2, lr
     b3c:	fa00 f40e 	lsl.w	r4, r0, lr
     b40:	ea4f 4917 	mov.w	r9, r7, lsr #16
     b44:	0c22      	lsrs	r2, r4, #16
     b46:	fbbc f0f9 	udiv	r0, ip, r9
     b4a:	fa1f f887 	uxth.w	r8, r7
     b4e:	fb09 c610 	mls	r6, r9, r0, ip
     b52:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
     b56:	fb00 f308 	mul.w	r3, r0, r8
     b5a:	42b3      	cmp	r3, r6
     b5c:	d909      	bls.n	b72 <__udivmoddi4+0x6a>
     b5e:	19f6      	adds	r6, r6, r7
     b60:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     b64:	f080 8122 	bcs.w	dac <__udivmoddi4+0x2a4>
     b68:	42b3      	cmp	r3, r6
     b6a:	f240 811f 	bls.w	dac <__udivmoddi4+0x2a4>
     b6e:	3802      	subs	r0, #2
     b70:	443e      	add	r6, r7
     b72:	1af6      	subs	r6, r6, r3
     b74:	b2a2      	uxth	r2, r4
     b76:	fbb6 f3f9 	udiv	r3, r6, r9
     b7a:	fb09 6613 	mls	r6, r9, r3, r6
     b7e:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
     b82:	fb03 f808 	mul.w	r8, r3, r8
     b86:	45a0      	cmp	r8, r4
     b88:	d909      	bls.n	b9e <__udivmoddi4+0x96>
     b8a:	19e4      	adds	r4, r4, r7
     b8c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     b90:	f080 810a 	bcs.w	da8 <__udivmoddi4+0x2a0>
     b94:	45a0      	cmp	r8, r4
     b96:	f240 8107 	bls.w	da8 <__udivmoddi4+0x2a0>
     b9a:	3b02      	subs	r3, #2
     b9c:	443c      	add	r4, r7
     b9e:	ebc8 0404 	rsb	r4, r8, r4
     ba2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     ba6:	2100      	movs	r1, #0
     ba8:	2d00      	cmp	r5, #0
     baa:	d062      	beq.n	c72 <__udivmoddi4+0x16a>
     bac:	fa24 f40e 	lsr.w	r4, r4, lr
     bb0:	2300      	movs	r3, #0
     bb2:	602c      	str	r4, [r5, #0]
     bb4:	606b      	str	r3, [r5, #4]
     bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bba:	428b      	cmp	r3, r1
     bbc:	d907      	bls.n	bce <__udivmoddi4+0xc6>
     bbe:	2d00      	cmp	r5, #0
     bc0:	d055      	beq.n	c6e <__udivmoddi4+0x166>
     bc2:	2100      	movs	r1, #0
     bc4:	e885 0041 	stmia.w	r5, {r0, r6}
     bc8:	4608      	mov	r0, r1
     bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bce:	fab3 f183 	clz	r1, r3
     bd2:	2900      	cmp	r1, #0
     bd4:	f040 8090 	bne.w	cf8 <__udivmoddi4+0x1f0>
     bd8:	42b3      	cmp	r3, r6
     bda:	d302      	bcc.n	be2 <__udivmoddi4+0xda>
     bdc:	4282      	cmp	r2, r0
     bde:	f200 80f8 	bhi.w	dd2 <__udivmoddi4+0x2ca>
     be2:	1a84      	subs	r4, r0, r2
     be4:	eb66 0603 	sbc.w	r6, r6, r3
     be8:	2001      	movs	r0, #1
     bea:	46b4      	mov	ip, r6
     bec:	2d00      	cmp	r5, #0
     bee:	d040      	beq.n	c72 <__udivmoddi4+0x16a>
     bf0:	e885 1010 	stmia.w	r5, {r4, ip}
     bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bf8:	b912      	cbnz	r2, c00 <__udivmoddi4+0xf8>
     bfa:	2701      	movs	r7, #1
     bfc:	fbb7 f7f2 	udiv	r7, r7, r2
     c00:	fab7 fe87 	clz	lr, r7
     c04:	f1be 0f00 	cmp.w	lr, #0
     c08:	d135      	bne.n	c76 <__udivmoddi4+0x16e>
     c0a:	1bf3      	subs	r3, r6, r7
     c0c:	ea4f 4817 	mov.w	r8, r7, lsr #16
     c10:	fa1f fc87 	uxth.w	ip, r7
     c14:	2101      	movs	r1, #1
     c16:	fbb3 f0f8 	udiv	r0, r3, r8
     c1a:	0c22      	lsrs	r2, r4, #16
     c1c:	fb08 3610 	mls	r6, r8, r0, r3
     c20:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
     c24:	fb0c f300 	mul.w	r3, ip, r0
     c28:	42b3      	cmp	r3, r6
     c2a:	d907      	bls.n	c3c <__udivmoddi4+0x134>
     c2c:	19f6      	adds	r6, r6, r7
     c2e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
     c32:	d202      	bcs.n	c3a <__udivmoddi4+0x132>
     c34:	42b3      	cmp	r3, r6
     c36:	f200 80ce 	bhi.w	dd6 <__udivmoddi4+0x2ce>
     c3a:	4610      	mov	r0, r2
     c3c:	1af6      	subs	r6, r6, r3
     c3e:	b2a2      	uxth	r2, r4
     c40:	fbb6 f3f8 	udiv	r3, r6, r8
     c44:	fb08 6613 	mls	r6, r8, r3, r6
     c48:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
     c4c:	fb0c fc03 	mul.w	ip, ip, r3
     c50:	45a4      	cmp	ip, r4
     c52:	d907      	bls.n	c64 <__udivmoddi4+0x15c>
     c54:	19e4      	adds	r4, r4, r7
     c56:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
     c5a:	d202      	bcs.n	c62 <__udivmoddi4+0x15a>
     c5c:	45a4      	cmp	ip, r4
     c5e:	f200 80b5 	bhi.w	dcc <__udivmoddi4+0x2c4>
     c62:	4613      	mov	r3, r2
     c64:	ebcc 0404 	rsb	r4, ip, r4
     c68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     c6c:	e79c      	b.n	ba8 <__udivmoddi4+0xa0>
     c6e:	4629      	mov	r1, r5
     c70:	4628      	mov	r0, r5
     c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     c76:	f1ce 0120 	rsb	r1, lr, #32
     c7a:	fa06 f30e 	lsl.w	r3, r6, lr
     c7e:	fa07 f70e 	lsl.w	r7, r7, lr
     c82:	fa20 f901 	lsr.w	r9, r0, r1
     c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
     c8a:	40ce      	lsrs	r6, r1
     c8c:	ea49 0903 	orr.w	r9, r9, r3
     c90:	fbb6 faf8 	udiv	sl, r6, r8
     c94:	ea4f 4419 	mov.w	r4, r9, lsr #16
     c98:	fb08 661a 	mls	r6, r8, sl, r6
     c9c:	fa1f fc87 	uxth.w	ip, r7
     ca0:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
     ca4:	fb0a f20c 	mul.w	r2, sl, ip
     ca8:	429a      	cmp	r2, r3
     caa:	fa00 f40e 	lsl.w	r4, r0, lr
     cae:	d90a      	bls.n	cc6 <__udivmoddi4+0x1be>
     cb0:	19db      	adds	r3, r3, r7
     cb2:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
     cb6:	f080 8087 	bcs.w	dc8 <__udivmoddi4+0x2c0>
     cba:	429a      	cmp	r2, r3
     cbc:	f240 8084 	bls.w	dc8 <__udivmoddi4+0x2c0>
     cc0:	f1aa 0a02 	sub.w	sl, sl, #2
     cc4:	443b      	add	r3, r7
     cc6:	1a9b      	subs	r3, r3, r2
     cc8:	fa1f f989 	uxth.w	r9, r9
     ccc:	fbb3 f1f8 	udiv	r1, r3, r8
     cd0:	fb08 3311 	mls	r3, r8, r1, r3
     cd4:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
     cd8:	fb01 f60c 	mul.w	r6, r1, ip
     cdc:	429e      	cmp	r6, r3
     cde:	d907      	bls.n	cf0 <__udivmoddi4+0x1e8>
     ce0:	19db      	adds	r3, r3, r7
     ce2:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
     ce6:	d26b      	bcs.n	dc0 <__udivmoddi4+0x2b8>
     ce8:	429e      	cmp	r6, r3
     cea:	d969      	bls.n	dc0 <__udivmoddi4+0x2b8>
     cec:	3902      	subs	r1, #2
     cee:	443b      	add	r3, r7
     cf0:	1b9b      	subs	r3, r3, r6
     cf2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
     cf6:	e78e      	b.n	c16 <__udivmoddi4+0x10e>
     cf8:	f1c1 0e20 	rsb	lr, r1, #32
     cfc:	fa22 f40e 	lsr.w	r4, r2, lr
     d00:	408b      	lsls	r3, r1
     d02:	4323      	orrs	r3, r4
     d04:	fa20 f70e 	lsr.w	r7, r0, lr
     d08:	fa06 f401 	lsl.w	r4, r6, r1
     d0c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     d10:	fa26 f60e 	lsr.w	r6, r6, lr
     d14:	433c      	orrs	r4, r7
     d16:	fbb6 f9fc 	udiv	r9, r6, ip
     d1a:	0c27      	lsrs	r7, r4, #16
     d1c:	fb0c 6619 	mls	r6, ip, r9, r6
     d20:	fa1f f883 	uxth.w	r8, r3
     d24:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
     d28:	fb09 f708 	mul.w	r7, r9, r8
     d2c:	42b7      	cmp	r7, r6
     d2e:	fa02 f201 	lsl.w	r2, r2, r1
     d32:	fa00 fa01 	lsl.w	sl, r0, r1
     d36:	d908      	bls.n	d4a <__udivmoddi4+0x242>
     d38:	18f6      	adds	r6, r6, r3
     d3a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     d3e:	d241      	bcs.n	dc4 <__udivmoddi4+0x2bc>
     d40:	42b7      	cmp	r7, r6
     d42:	d93f      	bls.n	dc4 <__udivmoddi4+0x2bc>
     d44:	f1a9 0902 	sub.w	r9, r9, #2
     d48:	441e      	add	r6, r3
     d4a:	1bf6      	subs	r6, r6, r7
     d4c:	b2a0      	uxth	r0, r4
     d4e:	fbb6 f4fc 	udiv	r4, r6, ip
     d52:	fb0c 6614 	mls	r6, ip, r4, r6
     d56:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
     d5a:	fb04 f808 	mul.w	r8, r4, r8
     d5e:	45b8      	cmp	r8, r7
     d60:	d907      	bls.n	d72 <__udivmoddi4+0x26a>
     d62:	18ff      	adds	r7, r7, r3
     d64:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
     d68:	d228      	bcs.n	dbc <__udivmoddi4+0x2b4>
     d6a:	45b8      	cmp	r8, r7
     d6c:	d926      	bls.n	dbc <__udivmoddi4+0x2b4>
     d6e:	3c02      	subs	r4, #2
     d70:	441f      	add	r7, r3
     d72:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
     d76:	ebc8 0707 	rsb	r7, r8, r7
     d7a:	fba0 8902 	umull	r8, r9, r0, r2
     d7e:	454f      	cmp	r7, r9
     d80:	4644      	mov	r4, r8
     d82:	464e      	mov	r6, r9
     d84:	d314      	bcc.n	db0 <__udivmoddi4+0x2a8>
     d86:	d029      	beq.n	ddc <__udivmoddi4+0x2d4>
     d88:	b365      	cbz	r5, de4 <__udivmoddi4+0x2dc>
     d8a:	ebba 0304 	subs.w	r3, sl, r4
     d8e:	eb67 0706 	sbc.w	r7, r7, r6
     d92:	fa07 fe0e 	lsl.w	lr, r7, lr
     d96:	40cb      	lsrs	r3, r1
     d98:	40cf      	lsrs	r7, r1
     d9a:	ea4e 0303 	orr.w	r3, lr, r3
     d9e:	e885 0088 	stmia.w	r5, {r3, r7}
     da2:	2100      	movs	r1, #0
     da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     da8:	4613      	mov	r3, r2
     daa:	e6f8      	b.n	b9e <__udivmoddi4+0x96>
     dac:	4610      	mov	r0, r2
     dae:	e6e0      	b.n	b72 <__udivmoddi4+0x6a>
     db0:	ebb8 0402 	subs.w	r4, r8, r2
     db4:	eb69 0603 	sbc.w	r6, r9, r3
     db8:	3801      	subs	r0, #1
     dba:	e7e5      	b.n	d88 <__udivmoddi4+0x280>
     dbc:	4604      	mov	r4, r0
     dbe:	e7d8      	b.n	d72 <__udivmoddi4+0x26a>
     dc0:	4611      	mov	r1, r2
     dc2:	e795      	b.n	cf0 <__udivmoddi4+0x1e8>
     dc4:	4681      	mov	r9, r0
     dc6:	e7c0      	b.n	d4a <__udivmoddi4+0x242>
     dc8:	468a      	mov	sl, r1
     dca:	e77c      	b.n	cc6 <__udivmoddi4+0x1be>
     dcc:	3b02      	subs	r3, #2
     dce:	443c      	add	r4, r7
     dd0:	e748      	b.n	c64 <__udivmoddi4+0x15c>
     dd2:	4608      	mov	r0, r1
     dd4:	e70a      	b.n	bec <__udivmoddi4+0xe4>
     dd6:	3802      	subs	r0, #2
     dd8:	443e      	add	r6, r7
     dda:	e72f      	b.n	c3c <__udivmoddi4+0x134>
     ddc:	45c2      	cmp	sl, r8
     dde:	d3e7      	bcc.n	db0 <__udivmoddi4+0x2a8>
     de0:	463e      	mov	r6, r7
     de2:	e7d1      	b.n	d88 <__udivmoddi4+0x280>
     de4:	4629      	mov	r1, r5
     de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     dea:	bf00      	nop

00000dec <__aeabi_idiv0>:
     dec:	4770      	bx	lr
     dee:	bf00      	nop

00000df0 <main>:

#include <zephyr.h>
#include <misc/printk.h>

void main(void)
{
     df0:	b598      	push	{r3, r4, r7, lr}
     df2:	af00      	add	r7, sp, #0
	printk("***********************************************************************\n\r");
     df4:	4c06      	ldr	r4, [pc, #24]	; (e10 <main+0x20>)
     df6:	4620      	mov	r0, r4
     df8:	f001 fcc0 	bl	277c <printk>
	printk("******          FTF Connects 2016 Zephyr Demo App  			***********\n\r");
     dfc:	4805      	ldr	r0, [pc, #20]	; (e14 <main+0x24>)
     dfe:	f001 fcbd 	bl	277c <printk>
	printk("******             Starting the application! 			     **********\n\r");
     e02:	4805      	ldr	r0, [pc, #20]	; (e18 <main+0x28>)
     e04:	f001 fcba 	bl	277c <printk>
	printk("***********************************************************************\n\r");
     e08:	4620      	mov	r0, r4
     e0a:	f001 fcb7 	bl	277c <printk>
     e0e:	bd98      	pop	{r3, r4, r7, pc}
     e10:	00004c14 	.word	0x00004c14
     e14:	00004c60 	.word	0x00004c60
     e18:	00004ca4 	.word	0x00004ca4

00000e1c <acc_thread>:

/**
 * @brief accelerometer thread application
 */
void acc_thread(void)
{
     e1c:	b590      	push	{r4, r7, lr}
     e1e:	b08f      	sub	sp, #60	; 0x3c
     e20:	af00      	add	r7, sp, #0
	int rc = 0;
	uint8_t acc_whoami;

	/* open i2c used to accelerometer */
	acc_wire_dev = device_get_binding("I2C_0");
     e22:	488b      	ldr	r0, [pc, #556]	; (1050 <acc_thread+0x234>)
     e24:	f002 ff22 	bl	3c6c <device_get_binding>
     e28:	4b8a      	ldr	r3, [pc, #552]	; (1054 <acc_thread+0x238>)
     e2a:	6018      	str	r0, [r3, #0]
	if(acc_wire_dev == NULL) {
     e2c:	b918      	cbnz	r0, e36 <acc_thread+0x1a>
		printk("acc_thread: failed to open the acc_device \n\r");
     e2e:	488a      	ldr	r0, [pc, #552]	; (1058 <acc_thread+0x23c>)
     e30:	f001 fca4 	bl	277c <printk>
		return;
     e34:	e186      	b.n	1144 <acc_thread+0x328>
	}else{
		printk("acc_thread: opened the acc_device \n\r");
     e36:	4889      	ldr	r0, [pc, #548]	; (105c <acc_thread+0x240>)
     e38:	f001 fca0 	bl	277c <printk>
	}

	int dev_cfg = I2C_SPEED_FAST << 1 | I2C_MODE_MASTER;

	/* configure the i2c */
	rc = i2c_configure(acc_wire_dev, dev_cfg);
     e3c:	4b85      	ldr	r3, [pc, #532]	; (1054 <acc_thread+0x238>)
     e3e:	6818      	ldr	r0, [r3, #0]
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int i2c_configure(struct device *dev, uint32_t dev_config)
{
	const struct i2c_driver_api *api = dev->driver_api;
     e40:	6843      	ldr	r3, [r0, #4]

	return api->configure(dev, dev_config);
     e42:	681b      	ldr	r3, [r3, #0]
     e44:	2114      	movs	r1, #20
     e46:	4798      	blx	r3

	if(rc != 0) {
     e48:	b118      	cbz	r0, e52 <acc_thread+0x36>
		printk("acc_thread: failed to configure the accel i2c as master \n\r");
     e4a:	4885      	ldr	r0, [pc, #532]	; (1060 <acc_thread+0x244>)
     e4c:	f001 fc96 	bl	277c <printk>
		return;
     e50:	e178      	b.n	1144 <acc_thread+0x328>
	} else {
		printk("acc_thread: configured the accel interface, speed: %s \n\r",
     e52:	4984      	ldr	r1, [pc, #528]	; (1064 <acc_thread+0x248>)
     e54:	4884      	ldr	r0, [pc, #528]	; (1068 <acc_thread+0x24c>)
     e56:	f001 fc91 	bl	277c <printk>
					((dev_cfg >> 1 & I2C_SPEED_FAST) != 0 ? "400kbps": "100kbps" ));
	}


	/* check if the accel is up */
	rc = i2c_burst_read(acc_wire_dev,FXOS8700CQ_SLAVE_ADDR1,FXOS8700CQ_WHOAMI,
     e5a:	4b7e      	ldr	r3, [pc, #504]	; (1054 <acc_thread+0x238>)
     e5c:	6818      	ldr	r0, [r3, #0]
     e5e:	f107 0338 	add.w	r3, r7, #56	; 0x38
     e62:	220d      	movs	r2, #13
     e64:	f803 2d32 	strb.w	r2, [r3, #-50]!
 */
static inline int i2c_burst_read(struct device *dev, uint16_t dev_addr,
				 uint8_t start_addr, uint8_t *buf,
				 uint8_t num_bytes)
{
	const struct i2c_driver_api *api = dev->driver_api;
     e68:	6842      	ldr	r2, [r0, #4]
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
     e6a:	61fb      	str	r3, [r7, #28]
	msg[0].len = 1;
     e6c:	2301      	movs	r3, #1
     e6e:	623b      	str	r3, [r7, #32]
	msg[0].flags = I2C_MSG_WRITE;
     e70:	2100      	movs	r1, #0
     e72:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24

	msg[1].buf = buf;
     e76:	f107 0137 	add.w	r1, r7, #55	; 0x37
     e7a:	62b9      	str	r1, [r7, #40]	; 0x28
	msg[1].len = num_bytes;
     e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
     e7e:	2307      	movs	r3, #7
     e80:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	return api->transfer(dev, msg, 2, dev_addr);
     e84:	6854      	ldr	r4, [r2, #4]
     e86:	231d      	movs	r3, #29
     e88:	2202      	movs	r2, #2
     e8a:	f107 011c 	add.w	r1, r7, #28
     e8e:	47a0      	blx	r4
							&acc_whoami, sizeof(acc_whoami));

	if(rc != 0) {
     e90:	b118      	cbz	r0, e9a <acc_thread+0x7e>
		printk("acc_thread: acc failed to read FXOS8700CQ_WHOAMI\n\r");
     e92:	4876      	ldr	r0, [pc, #472]	; (106c <acc_thread+0x250>)
     e94:	f001 fc72 	bl	277c <printk>
		return;
     e98:	e154      	b.n	1144 <acc_thread+0x328>
	} else {
		printk("acc_thread: acc read %d bytes from FXOS8700CQ_WHOAMI \n\r", sizeof(acc_whoami));
     e9a:	2101      	movs	r1, #1
     e9c:	4874      	ldr	r0, [pc, #464]	; (1070 <acc_thread+0x254>)
     e9e:	f001 fc6d 	bl	277c <printk>
	}

	/* is who am I expected value? */
	if(acc_whoami != FXOS8700CQ_WHOAMI_VAL) {
     ea2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
     ea6:	2bc7      	cmp	r3, #199	; 0xc7
     ea8:	d002      	beq.n	eb0 <acc_thread+0x94>
		printk("acc_thread: warning, accel whoami is invalid! \n\r");
     eaa:	4872      	ldr	r0, [pc, #456]	; (1074 <acc_thread+0x258>)
     eac:	f001 fc66 	bl	277c <printk>
	}

	printk("acc_thread: configuring! \n\r");
     eb0:	4871      	ldr	r0, [pc, #452]	; (1078 <acc_thread+0x25c>)
     eb2:	f001 fc63 	bl	277c <printk>
	/* do a basic configuration on accel */
	{
		uint8_t data_buf[8] = {0};

		/* suspend the acc */
		rc = i2c_reg_write_byte(acc_wire_dev, FXOS8700CQ_SLAVE_ADDR1, FXOS8700CQ_CTRL_REG1, 0);
     eb6:	4b67      	ldr	r3, [pc, #412]	; (1054 <acc_thread+0x238>)
     eb8:	6818      	ldr	r0, [r3, #0]
 * @retval Negative errno code if failure.
 */
static inline int i2c_reg_write_byte(struct device *dev, uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
     eba:	232a      	movs	r3, #42	; 0x2a
     ebc:	753b      	strb	r3, [r7, #20]
     ebe:	2300      	movs	r3, #0
     ec0:	757b      	strb	r3, [r7, #21]
 * @retval Negative errno code if failure.
 */
static inline int i2c_write(struct device *dev, uint8_t *buf,
			    uint32_t len, uint16_t addr)
{
	const struct i2c_driver_api *api = dev->driver_api;
     ec2:	6842      	ldr	r2, [r0, #4]
	struct i2c_msg msg;

	msg.buf = buf;
     ec4:	f107 0314 	add.w	r3, r7, #20
     ec8:	61fb      	str	r3, [r7, #28]
	msg.len = len;
     eca:	2302      	movs	r3, #2
     ecc:	623b      	str	r3, [r7, #32]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     ece:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return api->transfer(dev, &msg, 1, addr);
     ed2:	6854      	ldr	r4, [r2, #4]
     ed4:	231d      	movs	r3, #29
     ed6:	2201      	movs	r2, #1
     ed8:	f107 011c 	add.w	r1, r7, #28
     edc:	47a0      	blx	r4

		if(rc != 0) {
     ede:	b118      	cbz	r0, ee8 <acc_thread+0xcc>
			printk("acc_thread: acc failed to write FXOS8700CQ_CTRL_REG1\n\r");
     ee0:	4866      	ldr	r0, [pc, #408]	; (107c <acc_thread+0x260>)
     ee2:	f001 fc4b 	bl	277c <printk>
			return;
     ee6:	e12d      	b.n	1144 <acc_thread+0x328>
		} else {
			printk("acc_thread: acc wrote %d bytes into FXOS8700CQ_CTRL_REG1 \n\r", sizeof(data_buf[0]));
     ee8:	2101      	movs	r1, #1
     eea:	4865      	ldr	r0, [pc, #404]	; (1080 <acc_thread+0x264>)
     eec:	f001 fc46 	bl	277c <printk>
		data_buf[1] = 0;
		data_buf[2] = 0x1F;
		data_buf[3] = 0x20;
		data_buf[4] = 0x01;

		rc = i2c_reg_write_byte(acc_wire_dev, FXOS8700CQ_SLAVE_ADDR1, FXOS8700CQ_CTRL_REG1, data_buf[1]);
     ef0:	4b58      	ldr	r3, [pc, #352]	; (1054 <acc_thread+0x238>)
     ef2:	6818      	ldr	r0, [r3, #0]
 * @retval Negative errno code if failure.
 */
static inline int i2c_reg_write_byte(struct device *dev, uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
     ef4:	232a      	movs	r3, #42	; 0x2a
     ef6:	753b      	strb	r3, [r7, #20]
     ef8:	2300      	movs	r3, #0
     efa:	757b      	strb	r3, [r7, #21]
 * @retval Negative errno code if failure.
 */
static inline int i2c_write(struct device *dev, uint8_t *buf,
			    uint32_t len, uint16_t addr)
{
	const struct i2c_driver_api *api = dev->driver_api;
     efc:	6842      	ldr	r2, [r0, #4]
	struct i2c_msg msg;

	msg.buf = buf;
     efe:	f107 0314 	add.w	r3, r7, #20
     f02:	61fb      	str	r3, [r7, #28]
	msg.len = len;
     f04:	2302      	movs	r3, #2
     f06:	623b      	str	r3, [r7, #32]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     f08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return api->transfer(dev, &msg, 1, addr);
     f0c:	6854      	ldr	r4, [r2, #4]
     f0e:	231d      	movs	r3, #29
     f10:	2201      	movs	r2, #1
     f12:	f107 011c 	add.w	r1, r7, #28
     f16:	47a0      	blx	r4
		if(rc != 0) {
     f18:	b118      	cbz	r0, f22 <acc_thread+0x106>
			printk("acc_thread: failed to write to acc register! \n\r");
     f1a:	485a      	ldr	r0, [pc, #360]	; (1084 <acc_thread+0x268>)
     f1c:	f001 fc2e 	bl	277c <printk>
			return;
     f20:	e110      	b.n	1144 <acc_thread+0x328>
		} else {
			printk("acc_thread: successful  write to acc register! \n\r");
     f22:	4859      	ldr	r0, [pc, #356]	; (1088 <acc_thread+0x26c>)
     f24:	f001 fc2a 	bl	277c <printk>
		}
		rc = i2c_reg_write_byte(acc_wire_dev, FXOS8700CQ_SLAVE_ADDR1, FXOS8700CQ_M_CTRL_REG1, data_buf[2]);
     f28:	4b4a      	ldr	r3, [pc, #296]	; (1054 <acc_thread+0x238>)
     f2a:	6818      	ldr	r0, [r3, #0]
 * @retval Negative errno code if failure.
 */
static inline int i2c_reg_write_byte(struct device *dev, uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
     f2c:	235b      	movs	r3, #91	; 0x5b
     f2e:	753b      	strb	r3, [r7, #20]
     f30:	231f      	movs	r3, #31
     f32:	757b      	strb	r3, [r7, #21]
 * @retval Negative errno code if failure.
 */
static inline int i2c_write(struct device *dev, uint8_t *buf,
			    uint32_t len, uint16_t addr)
{
	const struct i2c_driver_api *api = dev->driver_api;
     f34:	6842      	ldr	r2, [r0, #4]
	struct i2c_msg msg;

	msg.buf = buf;
     f36:	f107 0314 	add.w	r3, r7, #20
     f3a:	61fb      	str	r3, [r7, #28]
	msg.len = len;
     f3c:	2302      	movs	r3, #2
     f3e:	623b      	str	r3, [r7, #32]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     f40:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return api->transfer(dev, &msg, 1, addr);
     f44:	6854      	ldr	r4, [r2, #4]
     f46:	231d      	movs	r3, #29
     f48:	2201      	movs	r2, #1
     f4a:	f107 011c 	add.w	r1, r7, #28
     f4e:	47a0      	blx	r4
		if(rc != 0) {
     f50:	b118      	cbz	r0, f5a <acc_thread+0x13e>
			printk("acc_thread: failed to write to acc register! \n\r");
     f52:	484c      	ldr	r0, [pc, #304]	; (1084 <acc_thread+0x268>)
     f54:	f001 fc12 	bl	277c <printk>
			return;
     f58:	e0f4      	b.n	1144 <acc_thread+0x328>

		} else {
			printk("acc_thread: successful  write to acc register! \n\r");
     f5a:	484b      	ldr	r0, [pc, #300]	; (1088 <acc_thread+0x26c>)
     f5c:	f001 fc0e 	bl	277c <printk>
		}

		rc = i2c_reg_write_byte(acc_wire_dev, FXOS8700CQ_SLAVE_ADDR1, FXOS8700CQ_M_CTRL_REG2, data_buf[3]);
     f60:	4b3c      	ldr	r3, [pc, #240]	; (1054 <acc_thread+0x238>)
     f62:	6818      	ldr	r0, [r3, #0]
 * @retval Negative errno code if failure.
 */
static inline int i2c_reg_write_byte(struct device *dev, uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
     f64:	235c      	movs	r3, #92	; 0x5c
     f66:	753b      	strb	r3, [r7, #20]
     f68:	2320      	movs	r3, #32
     f6a:	757b      	strb	r3, [r7, #21]
 * @retval Negative errno code if failure.
 */
static inline int i2c_write(struct device *dev, uint8_t *buf,
			    uint32_t len, uint16_t addr)
{
	const struct i2c_driver_api *api = dev->driver_api;
     f6c:	6842      	ldr	r2, [r0, #4]
	struct i2c_msg msg;

	msg.buf = buf;
     f6e:	f107 0314 	add.w	r3, r7, #20
     f72:	61fb      	str	r3, [r7, #28]
	msg.len = len;
     f74:	2302      	movs	r3, #2
     f76:	623b      	str	r3, [r7, #32]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     f78:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return api->transfer(dev, &msg, 1, addr);
     f7c:	6854      	ldr	r4, [r2, #4]
     f7e:	231d      	movs	r3, #29
     f80:	2201      	movs	r2, #1
     f82:	f107 011c 	add.w	r1, r7, #28
     f86:	47a0      	blx	r4
		if(rc != 0) {
     f88:	b118      	cbz	r0, f92 <acc_thread+0x176>
			printk("acc_thread: failed to write to acc register! \n\r");
     f8a:	483e      	ldr	r0, [pc, #248]	; (1084 <acc_thread+0x268>)
     f8c:	f001 fbf6 	bl	277c <printk>
			return;
     f90:	e0d8      	b.n	1144 <acc_thread+0x328>

		} else {
			printk("acc_thread: successful  write to acc register! \n\r");
     f92:	483d      	ldr	r0, [pc, #244]	; (1088 <acc_thread+0x26c>)
     f94:	f001 fbf2 	bl	277c <printk>
		}

		rc = i2c_reg_write_byte(acc_wire_dev, FXOS8700CQ_SLAVE_ADDR1, FXOS8700CQ_XYZ_DATA_CFG, data_buf[4]);
     f98:	4b2e      	ldr	r3, [pc, #184]	; (1054 <acc_thread+0x238>)
     f9a:	6818      	ldr	r0, [r3, #0]
 * @retval Negative errno code if failure.
 */
static inline int i2c_reg_write_byte(struct device *dev, uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
     f9c:	230e      	movs	r3, #14
     f9e:	753b      	strb	r3, [r7, #20]
     fa0:	2201      	movs	r2, #1
     fa2:	757a      	strb	r2, [r7, #21]
 * @retval Negative errno code if failure.
 */
static inline int i2c_write(struct device *dev, uint8_t *buf,
			    uint32_t len, uint16_t addr)
{
	const struct i2c_driver_api *api = dev->driver_api;
     fa4:	6841      	ldr	r1, [r0, #4]
	struct i2c_msg msg;

	msg.buf = buf;
     fa6:	f107 0314 	add.w	r3, r7, #20
     faa:	61fb      	str	r3, [r7, #28]
	msg.len = len;
     fac:	2302      	movs	r3, #2
     fae:	623b      	str	r3, [r7, #32]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     fb0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return api->transfer(dev, &msg, 1, addr);
     fb4:	684c      	ldr	r4, [r1, #4]
     fb6:	231d      	movs	r3, #29
     fb8:	f107 011c 	add.w	r1, r7, #28
     fbc:	47a0      	blx	r4
		if(rc != 0) {
     fbe:	b118      	cbz	r0, fc8 <acc_thread+0x1ac>
			printk("acc_thread: failed to write to acc register! \n\r");
     fc0:	4830      	ldr	r0, [pc, #192]	; (1084 <acc_thread+0x268>)
     fc2:	f001 fbdb 	bl	277c <printk>
			return;
     fc6:	e0bd      	b.n	1144 <acc_thread+0x328>

		} else {
			printk("acc_thread: successful  write to acc register! \n\r");
     fc8:	482f      	ldr	r0, [pc, #188]	; (1088 <acc_thread+0x26c>)
     fca:	f001 fbd7 	bl	277c <printk>
		}


		data_buf[0] = 0x0D;
		rc = i2c_reg_write_byte(acc_wire_dev,FXOS8700CQ_SLAVE_ADDR1,FXOS8700CQ_CTRL_REG1,data_buf[0]);
     fce:	4b21      	ldr	r3, [pc, #132]	; (1054 <acc_thread+0x238>)
     fd0:	6818      	ldr	r0, [r3, #0]
 * @retval Negative errno code if failure.
 */
static inline int i2c_reg_write_byte(struct device *dev, uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
     fd2:	232a      	movs	r3, #42	; 0x2a
     fd4:	753b      	strb	r3, [r7, #20]
     fd6:	230d      	movs	r3, #13
     fd8:	757b      	strb	r3, [r7, #21]
 * @retval Negative errno code if failure.
 */
static inline int i2c_write(struct device *dev, uint8_t *buf,
			    uint32_t len, uint16_t addr)
{
	const struct i2c_driver_api *api = dev->driver_api;
     fda:	6842      	ldr	r2, [r0, #4]
	struct i2c_msg msg;

	msg.buf = buf;
     fdc:	f107 0314 	add.w	r3, r7, #20
     fe0:	61fb      	str	r3, [r7, #28]
	msg.len = len;
     fe2:	2302      	movs	r3, #2
     fe4:	623b      	str	r3, [r7, #32]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
     fe6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	return api->transfer(dev, &msg, 1, addr);
     fea:	6854      	ldr	r4, [r2, #4]
     fec:	231d      	movs	r3, #29
     fee:	2201      	movs	r2, #1
     ff0:	f107 011c 	add.w	r1, r7, #28
     ff4:	47a0      	blx	r4
		if(rc != 0) {
     ff6:	b118      	cbz	r0, 1000 <acc_thread+0x1e4>
			printk("acc_thread: failed to write to acc register! \n\r");
     ff8:	4822      	ldr	r0, [pc, #136]	; (1084 <acc_thread+0x268>)
     ffa:	f001 fbbf 	bl	277c <printk>
			return;
     ffe:	e0a1      	b.n	1144 <acc_thread+0x328>

		} else {
			printk("acc_thread: successful  write to acc register! \n\r");
    1000:	4821      	ldr	r0, [pc, #132]	; (1088 <acc_thread+0x26c>)
    1002:	f001 fbbb 	bl	277c <printk>
		}
	}

	printk("acc_thread: acc is configured and ready to operate \n\r");
    1006:	4821      	ldr	r0, [pc, #132]	; (108c <acc_thread+0x270>)
    1008:	f001 fbb8 	bl	277c <printk>

	for(;;) {

		volatile float gx, gy, gz;

		uint8_t acc_raw_data[7] = {0};
    100c:	f107 0114 	add.w	r1, r7, #20
    1010:	2300      	movs	r3, #0
    1012:	617b      	str	r3, [r7, #20]
    1014:	f8c7 3017 	str.w	r3, [r7, #23]
		rc = i2c_burst_read(acc_wire_dev,FXOS8700CQ_SLAVE_ADDR1, FXOS8700CQ_STATUS,
    1018:	4a0e      	ldr	r2, [pc, #56]	; (1054 <acc_thread+0x238>)
    101a:	6810      	ldr	r0, [r2, #0]
    101c:	f107 0238 	add.w	r2, r7, #56	; 0x38
    1020:	f802 3d31 	strb.w	r3, [r2, #-49]!
 */
static inline int i2c_burst_read(struct device *dev, uint16_t dev_addr,
				 uint8_t start_addr, uint8_t *buf,
				 uint8_t num_bytes)
{
	const struct i2c_driver_api *api = dev->driver_api;
    1024:	6844      	ldr	r4, [r0, #4]
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
    1026:	61fa      	str	r2, [r7, #28]
	msg[0].len = 1;
    1028:	2201      	movs	r2, #1
    102a:	623a      	str	r2, [r7, #32]
	msg[0].flags = I2C_MSG_WRITE;
    102c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	msg[1].buf = buf;
    1030:	62b9      	str	r1, [r7, #40]	; 0x28
	msg[1].len = num_bytes;
    1032:	2307      	movs	r3, #7
    1034:	62fb      	str	r3, [r7, #44]	; 0x2c
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    1036:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	return api->transfer(dev, msg, 2, dev_addr);
    103a:	6864      	ldr	r4, [r4, #4]
    103c:	231d      	movs	r3, #29
    103e:	2202      	movs	r2, #2
    1040:	f107 011c 	add.w	r1, r7, #28
    1044:	47a0      	blx	r4
				&acc_raw_data[0], sizeof(acc_raw_data));

		if(rc != 0) {
    1046:	b328      	cbz	r0, 1094 <acc_thread+0x278>
			printk("acc_thread: failed to read the accelerometer acc registrers! \n\r");
    1048:	4811      	ldr	r0, [pc, #68]	; (1090 <acc_thread+0x274>)
    104a:	f001 fb97 	bl	277c <printk>
    104e:	e024      	b.n	109a <acc_thread+0x27e>
    1050:	00004ce8 	.word	0x00004ce8
    1054:	20000164 	.word	0x20000164
    1058:	00004cf0 	.word	0x00004cf0
    105c:	00004d20 	.word	0x00004d20
    1060:	00004d48 	.word	0x00004d48
    1064:	00004d84 	.word	0x00004d84
    1068:	00004d8c 	.word	0x00004d8c
    106c:	00004dc8 	.word	0x00004dc8
    1070:	00004dfc 	.word	0x00004dfc
    1074:	00004e34 	.word	0x00004e34
    1078:	00004e68 	.word	0x00004e68
    107c:	00004e84 	.word	0x00004e84
    1080:	00004ebc 	.word	0x00004ebc
    1084:	00004ef8 	.word	0x00004ef8
    1088:	00004f28 	.word	0x00004f28
    108c:	00004f5c 	.word	0x00004f5c
    1090:	00004f94 	.word	0x00004f94
		} else {
			printk("acc_thread: read the acc from register in accelerometer! \n\r \n\r \n\r");
    1094:	482d      	ldr	r0, [pc, #180]	; (114c <acc_thread+0x330>)
    1096:	f001 fb71 	bl	277c <printk>
		}


		/* printts the accel status */
		printk("acc_thread: accelerometer status is: 0x%x \n\r", acc_raw_data[0]);
    109a:	7d39      	ldrb	r1, [r7, #20]
    109c:	482c      	ldr	r0, [pc, #176]	; (1150 <acc_thread+0x334>)
    109e:	f001 fb6d 	bl	277c <printk>

		/* obtain the raw accelerations */
		x = (int16_t)(((acc_raw_data[1] << 8) | acc_raw_data[2]))>> 2;
    10a2:	7d79      	ldrb	r1, [r7, #21]
    10a4:	7dbb      	ldrb	r3, [r7, #22]
    10a6:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
    10aa:	f341 018d 	sbfx	r1, r1, #2, #14
    10ae:	4b29      	ldr	r3, [pc, #164]	; (1154 <acc_thread+0x338>)
    10b0:	8019      	strh	r1, [r3, #0]
		y = (int16_t)(((acc_raw_data[3] << 8) | acc_raw_data[4]))>> 2;
    10b2:	7dfa      	ldrb	r2, [r7, #23]
    10b4:	7e3b      	ldrb	r3, [r7, #24]
    10b6:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
    10ba:	f342 028d 	sbfx	r2, r2, #2, #14
    10be:	4b26      	ldr	r3, [pc, #152]	; (1158 <acc_thread+0x33c>)
    10c0:	801a      	strh	r2, [r3, #0]
		z = (int16_t)(((acc_raw_data[5] << 8) | acc_raw_data[6]))>> 2;
    10c2:	7e78      	ldrb	r0, [r7, #25]
    10c4:	7ebb      	ldrb	r3, [r7, #26]
    10c6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
    10ca:	f343 038d 	sbfx	r3, r3, #2, #14
    10ce:	4823      	ldr	r0, [pc, #140]	; (115c <acc_thread+0x340>)
    10d0:	8003      	strh	r3, [r0, #0]


		/* calculate the acceleration based in g value */
		gx = (float)x * ACC_CONVERSION_FACTOR_4G;
    10d2:	ee07 1a90 	vmov	s15, r1
    10d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    10da:	eddf 6a21 	vldr	s13, [pc, #132]	; 1160 <acc_thread+0x344>
    10de:	ee27 7a26 	vmul.f32	s14, s14, s13
    10e2:	ed87 7a02 	vstr	s14, [r7, #8]
		gy = (float)y * ACC_CONVERSION_FACTOR_4G;
    10e6:	ee07 2a90 	vmov	s15, r2
    10ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    10ee:	ee27 7a26 	vmul.f32	s14, s14, s13
    10f2:	ed87 7a03 	vstr	s14, [r7, #12]
		gz = (float)z * ACC_CONVERSION_FACTOR_4G;
    10f6:	ee07 3a90 	vmov	s15, r3
    10fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    10fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1102:	edc7 7a04 	vstr	s15, [r7, #16]


		/* show the current readings */
		printf("acc_thread: x axis raw reading: %f \n\r", gx);
    1106:	68b8      	ldr	r0, [r7, #8]
    1108:	f7ff fc42 	bl	990 <__aeabi_f2d>
    110c:	4602      	mov	r2, r0
    110e:	460b      	mov	r3, r1
    1110:	4814      	ldr	r0, [pc, #80]	; (1164 <acc_thread+0x348>)
    1112:	f000 fc71 	bl	19f8 <printf>
		printf("acc_thread: y axis raw reading: %f \n\r", gy);
    1116:	68f8      	ldr	r0, [r7, #12]
    1118:	f7ff fc3a 	bl	990 <__aeabi_f2d>
    111c:	4602      	mov	r2, r0
    111e:	460b      	mov	r3, r1
    1120:	4811      	ldr	r0, [pc, #68]	; (1168 <acc_thread+0x34c>)
    1122:	f000 fc69 	bl	19f8 <printf>
		printf("acc_thread: z axis raw reading: %f \n\r", gz);
    1126:	6938      	ldr	r0, [r7, #16]
    1128:	f7ff fc32 	bl	990 <__aeabi_f2d>
    112c:	4602      	mov	r2, r0
    112e:	460b      	mov	r3, r1
    1130:	480e      	ldr	r0, [pc, #56]	; (116c <acc_thread+0x350>)
    1132:	f000 fc61 	bl	19f8 <printf>

		k_sem_give(&sync);
    1136:	480e      	ldr	r0, [pc, #56]	; (1170 <acc_thread+0x354>)
    1138:	f003 fa38 	bl	45ac <k_sem_give>

		/* wait for next executions */
		task_sleep(ACC_TASK_EXEC_PERIOD);
    113c:	20c8      	movs	r0, #200	; 0xc8
    113e:	f002 fe9d 	bl	3e7c <_legacy_sleep>
	}
    1142:	e763      	b.n	100c <acc_thread+0x1f0>
}
    1144:	373c      	adds	r7, #60	; 0x3c
    1146:	46bd      	mov	sp, r7
    1148:	bd90      	pop	{r4, r7, pc}
    114a:	bf00      	nop
    114c:	00004fd4 	.word	0x00004fd4
    1150:	00005018 	.word	0x00005018
    1154:	20000160 	.word	0x20000160
    1158:	20000162 	.word	0x20000162
    115c:	20000168 	.word	0x20000168
    1160:	39ffda40 	.word	0x39ffda40
    1164:	00005048 	.word	0x00005048
    1168:	00005070 	.word	0x00005070
    116c:	00005098 	.word	0x00005098
    1170:	2000014c 	.word	0x2000014c

00001174 <led_thread>:

/**
 * @brief light led when accelerometer gets aligned
 */
void led_thread (void)
{
    1174:	b5f0      	push	{r4, r5, r6, r7, lr}
    1176:	b085      	sub	sp, #20
    1178:	af00      	add	r7, sp, #0
	extern int16_t x;
	extern int16_t y;
	extern int16_t z;


	gpiob_dev = device_get_binding("GPIO_1");
    117a:	486e      	ldr	r0, [pc, #440]	; (1334 <led_thread+0x1c0>)
    117c:	f002 fd76 	bl	3c6c <device_get_binding>
    1180:	4b6d      	ldr	r3, [pc, #436]	; (1338 <led_thread+0x1c4>)
    1182:	6018      	str	r0, [r3, #0]
	if(gpiob_dev != NULL) {
    1184:	b148      	cbz	r0, 119a <led_thread+0x26>
		printk("Opened gpio driver succesfull! \n\r");
    1186:	486d      	ldr	r0, [pc, #436]	; (133c <led_thread+0x1c8>)
    1188:	f001 faf8 	bl	277c <printk>
	} else {
		printk("Failed to  open gpio driver! \n\r");
		return;
	}

	gpioe_dev = device_get_binding("GPIO_4");
    118c:	486c      	ldr	r0, [pc, #432]	; (1340 <led_thread+0x1cc>)
    118e:	f002 fd6d 	bl	3c6c <device_get_binding>
    1192:	4b6c      	ldr	r3, [pc, #432]	; (1344 <led_thread+0x1d0>)
    1194:	6018      	str	r0, [r3, #0]
	if(gpioe_dev != NULL) {
    1196:	b920      	cbnz	r0, 11a2 <led_thread+0x2e>
    1198:	e033      	b.n	1202 <led_thread+0x8e>

	gpiob_dev = device_get_binding("GPIO_1");
	if(gpiob_dev != NULL) {
		printk("Opened gpio driver succesfull! \n\r");
	} else {
		printk("Failed to  open gpio driver! \n\r");
    119a:	486b      	ldr	r0, [pc, #428]	; (1348 <led_thread+0x1d4>)
    119c:	f001 faee 	bl	277c <printk>
		return;
    11a0:	e0c5      	b.n	132e <led_thread+0x1ba>
	}

	gpioe_dev = device_get_binding("GPIO_4");
	if(gpioe_dev != NULL) {
		printk("Opened gpio driver succesfull! \n\r");
    11a2:	4866      	ldr	r0, [pc, #408]	; (133c <led_thread+0x1c8>)
    11a4:	f001 faea 	bl	277c <printk>
		printk("Failed to  open gpio driver! \n\r");
		return;
	}


	gpio_pin_configure(gpiob_dev, 22, GPIO_DIR_OUT);
    11a8:	4c63      	ldr	r4, [pc, #396]	; (1338 <led_thread+0x1c4>)
    11aa:	6820      	ldr	r0, [r4, #0]
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 */
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    11ac:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    11ae:	681d      	ldr	r5, [r3, #0]
    11b0:	2301      	movs	r3, #1
    11b2:	2216      	movs	r2, #22
    11b4:	2100      	movs	r1, #0
    11b6:	47a8      	blx	r5
	gpio_pin_configure(gpiob_dev, 21, GPIO_DIR_OUT);
    11b8:	6820      	ldr	r0, [r4, #0]
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 */
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    11ba:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    11bc:	681d      	ldr	r5, [r3, #0]
    11be:	2301      	movs	r3, #1
    11c0:	2215      	movs	r2, #21
    11c2:	2100      	movs	r1, #0
    11c4:	47a8      	blx	r5
	gpio_pin_configure(gpioe_dev, 26, GPIO_DIR_OUT);
    11c6:	4d5f      	ldr	r5, [pc, #380]	; (1344 <led_thread+0x1d0>)
    11c8:	6828      	ldr	r0, [r5, #0]
 * @param flags Flags for pin configuration. IN/OUT, interrupt ...
 */
static inline int gpio_pin_configure(struct device *port, uint8_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    11ca:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    11cc:	681e      	ldr	r6, [r3, #0]
    11ce:	2301      	movs	r3, #1
    11d0:	221a      	movs	r2, #26
    11d2:	2100      	movs	r1, #0
    11d4:	47b0      	blx	r6

	gpio_pin_write(gpiob_dev, 22, 1);
    11d6:	6820      	ldr	r0, [r4, #0]
 * @param value Value set on the pin.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
    11d8:	6843      	ldr	r3, [r0, #4]

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
    11da:	685e      	ldr	r6, [r3, #4]
    11dc:	2301      	movs	r3, #1
    11de:	2216      	movs	r2, #22
    11e0:	2100      	movs	r1, #0
    11e2:	47b0      	blx	r6
	gpio_pin_write(gpiob_dev, 21, 1);
    11e4:	6820      	ldr	r0, [r4, #0]
 * @param value Value set on the pin.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
    11e6:	6843      	ldr	r3, [r0, #4]

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
    11e8:	685c      	ldr	r4, [r3, #4]
    11ea:	2301      	movs	r3, #1
    11ec:	2215      	movs	r2, #21
    11ee:	2100      	movs	r1, #0
    11f0:	47a0      	blx	r4
	gpio_pin_write(gpioe_dev, 26, 1);
    11f2:	6828      	ldr	r0, [r5, #0]
 * @param value Value set on the pin.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
    11f4:	6843      	ldr	r3, [r0, #4]

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
    11f6:	685c      	ldr	r4, [r3, #4]
    11f8:	2301      	movs	r3, #1
    11fa:	221a      	movs	r2, #26
    11fc:	2100      	movs	r1, #0
    11fe:	47a0      	blx	r4
    1200:	e003      	b.n	120a <led_thread+0x96>

	gpioe_dev = device_get_binding("GPIO_4");
	if(gpioe_dev != NULL) {
		printk("Opened gpio driver succesfull! \n\r");
	} else {
		printk("Failed to  open gpio driver! \n\r");
    1202:	4851      	ldr	r0, [pc, #324]	; (1348 <led_thread+0x1d4>)
    1204:	f001 faba 	bl	277c <printk>
		return;
    1208:	e091      	b.n	132e <led_thread+0x1ba>

	for(;;){
		volatile float gx, gy, gz;

		/* waits for a semaphore from accel */
		k_sem_take(&sync, TICKS_UNLIMITED);
    120a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    120e:	484f      	ldr	r0, [pc, #316]	; (134c <led_thread+0x1d8>)
    1210:	f003 f9de 	bl	45d0 <k_sem_take>

		/* calculate the acceleration based in g value */
		gx = (float)x * ACC_CONVERSION_FACTOR_4G;
    1214:	4b4e      	ldr	r3, [pc, #312]	; (1350 <led_thread+0x1dc>)
    1216:	f9b3 3000 	ldrsh.w	r3, [r3]
    121a:	ee07 3a10 	vmov	s14, r3
    121e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    1222:	eddf 6a4c 	vldr	s13, [pc, #304]	; 1354 <led_thread+0x1e0>
    1226:	ee27 7a26 	vmul.f32	s14, s14, s13
    122a:	ed87 7a01 	vstr	s14, [r7, #4]
		gy = (float)y * ACC_CONVERSION_FACTOR_4G;
    122e:	4b4a      	ldr	r3, [pc, #296]	; (1358 <led_thread+0x1e4>)
    1230:	f9b3 3000 	ldrsh.w	r3, [r3]
    1234:	ee07 3a10 	vmov	s14, r3
    1238:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    123c:	ee27 7a26 	vmul.f32	s14, s14, s13
    1240:	ed87 7a02 	vstr	s14, [r7, #8]
		gz = (float)z * ACC_CONVERSION_FACTOR_4G;
    1244:	4b45      	ldr	r3, [pc, #276]	; (135c <led_thread+0x1e8>)
    1246:	f9b3 3000 	ldrsh.w	r3, [r3]
    124a:	ee07 3a90 	vmov	s15, r3
    124e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1252:	ee67 7aa6 	vmul.f32	s15, s15, s13
    1256:	edc7 7a03 	vstr	s15, [r7, #12]

		if((gx > 0.9f) || (gx < -0.9f)) {
    125a:	ed97 7a01 	vldr	s14, [r7, #4]
    125e:	eddf 7a40 	vldr	s15, [pc, #256]	; 1360 <led_thread+0x1ec>
    1262:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    126a:	dc08      	bgt.n	127e <led_thread+0x10a>
    126c:	ed97 7a01 	vldr	s14, [r7, #4]
    1270:	eddf 7a3c 	vldr	s15, [pc, #240]	; 1364 <led_thread+0x1f0>
    1274:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    127c:	d508      	bpl.n	1290 <led_thread+0x11c>
			gpio_pin_write(gpiob_dev, 22, 0);
    127e:	4b2e      	ldr	r3, [pc, #184]	; (1338 <led_thread+0x1c4>)
    1280:	6818      	ldr	r0, [r3, #0]
 * @param value Value set on the pin.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
    1282:	6843      	ldr	r3, [r0, #4]

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
    1284:	685c      	ldr	r4, [r3, #4]
    1286:	2300      	movs	r3, #0
    1288:	2216      	movs	r2, #22
    128a:	4619      	mov	r1, r3
    128c:	47a0      	blx	r4
    128e:	e007      	b.n	12a0 <led_thread+0x12c>
		} else {
			gpio_pin_write(gpiob_dev, 22, 1);
    1290:	4b29      	ldr	r3, [pc, #164]	; (1338 <led_thread+0x1c4>)
    1292:	6818      	ldr	r0, [r3, #0]
 * @param value Value set on the pin.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
    1294:	6843      	ldr	r3, [r0, #4]

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
    1296:	685c      	ldr	r4, [r3, #4]
    1298:	2301      	movs	r3, #1
    129a:	2216      	movs	r2, #22
    129c:	2100      	movs	r1, #0
    129e:	47a0      	blx	r4
		}

		if((gy > 0.9f) || (gy < -0.9f)) {
    12a0:	ed97 7a02 	vldr	s14, [r7, #8]
    12a4:	eddf 7a2e 	vldr	s15, [pc, #184]	; 1360 <led_thread+0x1ec>
    12a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    12ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12b0:	dc08      	bgt.n	12c4 <led_thread+0x150>
    12b2:	ed97 7a02 	vldr	s14, [r7, #8]
    12b6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 1364 <led_thread+0x1f0>
    12ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
    12be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12c2:	d508      	bpl.n	12d6 <led_thread+0x162>
			gpio_pin_write(gpioe_dev, 26, 0);
    12c4:	4b1f      	ldr	r3, [pc, #124]	; (1344 <led_thread+0x1d0>)
    12c6:	6818      	ldr	r0, [r3, #0]
 * @param value Value set on the pin.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
    12c8:	6843      	ldr	r3, [r0, #4]

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
    12ca:	685c      	ldr	r4, [r3, #4]
    12cc:	2300      	movs	r3, #0
    12ce:	221a      	movs	r2, #26
    12d0:	4619      	mov	r1, r3
    12d2:	47a0      	blx	r4
    12d4:	e007      	b.n	12e6 <led_thread+0x172>
		} else {
			gpio_pin_write(gpioe_dev, 26, 1);
    12d6:	4b1b      	ldr	r3, [pc, #108]	; (1344 <led_thread+0x1d0>)
    12d8:	6818      	ldr	r0, [r3, #0]
 * @param value Value set on the pin.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
    12da:	6843      	ldr	r3, [r0, #4]

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
    12dc:	685c      	ldr	r4, [r3, #4]
    12de:	2301      	movs	r3, #1
    12e0:	221a      	movs	r2, #26
    12e2:	2100      	movs	r1, #0
    12e4:	47a0      	blx	r4
		}

		if((gz > 0.9f) || (gz < -0.9f)) {
    12e6:	ed97 7a03 	vldr	s14, [r7, #12]
    12ea:	eddf 7a1d 	vldr	s15, [pc, #116]	; 1360 <led_thread+0x1ec>
    12ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
    12f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    12f6:	dc08      	bgt.n	130a <led_thread+0x196>
    12f8:	ed97 7a03 	vldr	s14, [r7, #12]
    12fc:	eddf 7a19 	vldr	s15, [pc, #100]	; 1364 <led_thread+0x1f0>
    1300:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1304:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1308:	d508      	bpl.n	131c <led_thread+0x1a8>
			gpio_pin_write(gpiob_dev, 21, 0);
    130a:	4b0b      	ldr	r3, [pc, #44]	; (1338 <led_thread+0x1c4>)
    130c:	6818      	ldr	r0, [r3, #0]
 * @param value Value set on the pin.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
    130e:	6843      	ldr	r3, [r0, #4]

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
    1310:	685c      	ldr	r4, [r3, #4]
    1312:	2300      	movs	r3, #0
    1314:	2215      	movs	r2, #21
    1316:	4619      	mov	r1, r3
    1318:	47a0      	blx	r4
    131a:	e776      	b.n	120a <led_thread+0x96>
		} else {
			gpio_pin_write(gpiob_dev, 21, 1);
    131c:	4b06      	ldr	r3, [pc, #24]	; (1338 <led_thread+0x1c4>)
    131e:	6818      	ldr	r0, [r3, #0]
 * @param value Value set on the pin.
 */
static inline int gpio_pin_write(struct device *port, uint32_t pin,
				 uint32_t value)
{
	const struct gpio_driver_api *api = port->driver_api;
    1320:	6843      	ldr	r3, [r0, #4]

	return api->write(port, GPIO_ACCESS_BY_PIN, pin, value);
    1322:	685c      	ldr	r4, [r3, #4]
    1324:	2301      	movs	r3, #1
    1326:	2215      	movs	r2, #21
    1328:	2100      	movs	r1, #0
    132a:	47a0      	blx	r4
    132c:	e76d      	b.n	120a <led_thread+0x96>
		}

	}
}
    132e:	3714      	adds	r7, #20
    1330:	46bd      	mov	sp, r7
    1332:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1334:	000050c0 	.word	0x000050c0
    1338:	2000031c 	.word	0x2000031c
    133c:	000050c8 	.word	0x000050c8
    1340:	000050ec 	.word	0x000050ec
    1344:	20000318 	.word	0x20000318
    1348:	000050f4 	.word	0x000050f4
    134c:	2000014c 	.word	0x2000014c
    1350:	20000160 	.word	0x20000160
    1354:	39ffda40 	.word	0x39ffda40
    1358:	20000162 	.word	0x20000162
    135c:	20000168 	.word	0x20000168
    1360:	3f666666 	.word	0x3f666666
    1364:	bf666666 	.word	0xbf666666

00001368 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1368:	b598      	push	{r3, r4, r7, lr}
    136a:	af00      	add	r7, sp, #0
    136c:	4604      	mov	r4, r0

	if (handled_by_debug_server) {
		return c;
	}

	if ('\n' == c) {
    136e:	280a      	cmp	r0, #10
    1370:	d105      	bne.n	137e <console_out+0x16>
		uart_poll_out(uart_console_dev, '\r');
    1372:	4b07      	ldr	r3, [pc, #28]	; (1390 <console_out+0x28>)
    1374:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1376:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    1378:	685b      	ldr	r3, [r3, #4]
    137a:	210d      	movs	r1, #13
    137c:	4798      	blx	r3
	}
	uart_poll_out(uart_console_dev, c);
    137e:	4b04      	ldr	r3, [pc, #16]	; (1390 <console_out+0x28>)
    1380:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1382:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    1384:	685b      	ldr	r3, [r3, #4]
    1386:	b2e1      	uxtb	r1, r4
    1388:	4798      	blx	r3

	return c;
}
    138a:	4620      	mov	r0, r4
    138c:	bd98      	pop	{r3, r4, r7, pc}
    138e:	bf00      	nop
    1390:	2000016c 	.word	0x2000016c

00001394 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1394:	b598      	push	{r3, r4, r7, lr}
    1396:	af00      	add	r7, sp, #0
	__stdout_hook_install(console_out);
    1398:	4c03      	ldr	r4, [pc, #12]	; (13a8 <uart_console_hook_install+0x14>)
    139a:	4620      	mov	r0, r4
    139c:	f001 f8fe 	bl	259c <__stdout_hook_install>
	__printk_hook_install(console_out);
    13a0:	4620      	mov	r0, r4
    13a2:	f001 f9e1 	bl	2768 <__printk_hook_install>
    13a6:	bd98      	pop	{r3, r4, r7, pc}
    13a8:	00001369 	.word	0x00001369

000013ac <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    13ac:	b580      	push	{r7, lr}
    13ae:	af00      	add	r7, sp, #0
	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    13b0:	4804      	ldr	r0, [pc, #16]	; (13c4 <uart_console_init+0x18>)
    13b2:	f002 fc5b 	bl	3c6c <device_get_binding>
    13b6:	4b04      	ldr	r3, [pc, #16]	; (13c8 <uart_console_init+0x1c>)
    13b8:	6018      	str	r0, [r3, #0]

	uart_console_hook_install();
    13ba:	f7ff ffeb 	bl	1394 <uart_console_hook_install>

	return 0;
}
    13be:	2000      	movs	r0, #0
    13c0:	bd80      	pop	{r7, pc}
    13c2:	bf00      	nop
    13c4:	00005114 	.word	0x00005114
    13c8:	2000016c 	.word	0x2000016c

000013cc <uart_k20_init>:
 * @param dev UART device struct
 *
 * @return 0
 */
static int uart_k20_init(struct device *dev)
{
    13cc:	b4b0      	push	{r4, r5, r7}
    13ce:	af00      	add	r7, sp, #0
	int old_level; /* old interrupt lock level */
	union C1 c1;				   /* UART C1 register value */
	union C2 c2;				   /* UART C2 register value */

	volatile struct K20_UART *uart = UART_STRUCT(dev);
    13d0:	6803      	ldr	r3, [r0, #0]
    13d2:	689a      	ldr	r2, [r3, #8]
    13d4:	6813      	ldr	r3, [r2, #0]
	const struct uart_device_config * const dev_cfg = DEV_CFG(dev);
	struct uart_k20_dev_data_t * const dev_data = DEV_DATA(dev);
    13d6:	6880      	ldr	r0, [r0, #8]
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    13d8:	2120      	movs	r1, #32
    13da:	f3ef 8411 	mrs	r4, BASEPRI
    13de:	f381 8811 	msr	BASEPRI, r1

	/* disable interrupts */
	old_level = irq_lock();

	_uart_k20_baud_rate_set(uart, dev_cfg->sys_clk_freq,
    13e2:	6852      	ldr	r2, [r2, #4]
    13e4:	6801      	ldr	r1, [r0, #0]
static ALWAYS_INLINE void _uart_k20_baud_rate_set(volatile struct K20_UART *u,
						  uint32_t clk_freq,
						  uint32_t baud_rate)
{
	/* avoid divide by zero */
	if ((baud_rate == 0) || (clk_freq == 0)) {
    13e6:	b181      	cbz	r1, 140a <uart_k20_init+0x3e>
    13e8:	b17a      	cbz	r2, 140a <uart_k20_init+0x3e>
	 * - SBR is the combined UART Baud Rate Register settings and
	 * - BRFA is the UART Baud Rate Fine Adjustment setting
	 * This is equivalent to:
	 * 32xSBR + BRFA = 2 * clkFreq/baudRate
	 */
	uint32_t clk_br = 2 * clk_freq / baud_rate;
    13ea:	0052      	lsls	r2, r2, #1
    13ec:	fbb2 f2f1 	udiv	r2, r2, r1
	uint16_t sbr = clk_br >> 5;
    13f0:	0951      	lsrs	r1, r2, #5
	uint8_t brfa = clk_br - (sbr << 5);
    13f2:	b2cd      	uxtb	r5, r1

	__ASSERT((sbr && 0x1FFF),
		 "clk_freq is too high or baud_rate is too low");

	/* Note there are other fields (interrupts flag) in BDH register */
	u->bdh.field.sbr = (uint8_t)(sbr >> 8);
    13f4:	f3c1 2004 	ubfx	r0, r1, #8, #5
    13f8:	7819      	ldrb	r1, [r3, #0]
    13fa:	f360 0104 	bfi	r1, r0, #0, #5
    13fe:	7019      	strb	r1, [r3, #0]
	u->bdl = (uint8_t)(sbr & 0xFF);
    1400:	705d      	strb	r5, [r3, #1]
	u->c4.field.brfa = brfa;
    1402:	7a99      	ldrb	r1, [r3, #10]
    1404:	f362 0104 	bfi	r1, r2, #0, #5
    1408:	7299      	strb	r1, [r3, #10]
				dev_data->baud_rate);

	/* 1 start bit, 8 data bits, no parity, 1 stop bit */
	c1.value = 0;
    140a:	2000      	movs	r0, #0

	uart->c1 = c1;
    140c:	7098      	strb	r0, [r3, #2]

	/* enable Rx and Tx with interrupts disabled */
	c2.value = 0;
	c2.field.rx_enable = 1;
	c2.field.tx_enable = 1;
    140e:	220c      	movs	r2, #12

	uart->c2 = c2;
    1410:	70da      	strb	r2, [r3, #3]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    1412:	f384 8811 	msr	BASEPRI, r4
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	dev_cfg->irq_config_func(dev);
#endif

	return 0;
}
    1416:	46bd      	mov	sp, r7
    1418:	bcb0      	pop	{r4, r5, r7}
    141a:	4770      	bx	lr

0000141c <uart_k20_poll_in>:
 * @param c Pointer to character
 *
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */
static int uart_k20_poll_in(struct device *dev, unsigned char *c)
{
    141c:	b480      	push	{r7}
    141e:	af00      	add	r7, sp, #0
	volatile struct K20_UART *uart = UART_STRUCT(dev);
    1420:	6803      	ldr	r3, [r0, #0]
    1422:	689b      	ldr	r3, [r3, #8]
    1424:	681b      	ldr	r3, [r3, #0]

	if (uart->s1.field.rx_data_full == 0)
    1426:	791a      	ldrb	r2, [r3, #4]
    1428:	f012 0f20 	tst.w	r2, #32
    142c:	d003      	beq.n	1436 <uart_k20_poll_in+0x1a>
		return (-1);

	/* got a character */
	*c = uart->d;
    142e:	79db      	ldrb	r3, [r3, #7]
    1430:	700b      	strb	r3, [r1, #0]

	return 0;
    1432:	2000      	movs	r0, #0
    1434:	e001      	b.n	143a <uart_k20_poll_in+0x1e>
static int uart_k20_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct K20_UART *uart = UART_STRUCT(dev);

	if (uart->s1.field.rx_data_full == 0)
		return (-1);
    1436:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	/* got a character */
	*c = uart->d;

	return 0;
}
    143a:	46bd      	mov	sp, r7
    143c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1440:	4770      	bx	lr
    1442:	bf00      	nop

00001444 <uart_k20_poll_out>:
 *
 * @return sent character
 */
static unsigned char uart_k20_poll_out(struct device *dev,
				       unsigned char c)
{
    1444:	b480      	push	{r7}
    1446:	af00      	add	r7, sp, #0
	volatile struct K20_UART *uart = UART_STRUCT(dev);
    1448:	6803      	ldr	r3, [r0, #0]
    144a:	689b      	ldr	r3, [r3, #8]
    144c:	681a      	ldr	r2, [r3, #0]

	/* wait for transmitter to ready to accept a character */
	while (uart->s1.field.tx_data_empty == 0)
    144e:	7913      	ldrb	r3, [r2, #4]
    1450:	09db      	lsrs	r3, r3, #7
    1452:	d0fc      	beq.n	144e <uart_k20_poll_out+0xa>
		;

	uart->d = c;
    1454:	71d1      	strb	r1, [r2, #7]

	return c;
}
    1456:	4608      	mov	r0, r1
    1458:	46bd      	mov	sp, r7
    145a:	f85d 7b04 	ldr.w	r7, [sp], #4
    145e:	4770      	bx	lr

00001460 <_timer_int_handler>:
 * system operation) or _real_timer_int_handler (when GDB_INFO is enabled).
 *
 * @return N/A
 */
void _TIMER_INT_HANDLER(void *unused)
{
    1460:	b580      	push	{r7, lr}
    1462:	af00      	add	r7, sp, #0
	__asm__(" cpsie i"); /* re-enable interrupts (PRIMASK = 0) */

#else /* !CONFIG_SYS_POWER_MANAGEMENT */

	/* accumulate total counter value */
	clock_accumulated_count += sys_clock_hw_cycles_per_tick;
    1464:	4a06      	ldr	r2, [pc, #24]	; (1480 <_timer_int_handler+0x20>)
    1466:	6811      	ldr	r1, [r2, #0]
    1468:	4b06      	ldr	r3, [pc, #24]	; (1484 <_timer_int_handler+0x24>)
    146a:	681b      	ldr	r3, [r3, #0]
    146c:	440b      	add	r3, r1
    146e:	6013      	str	r3, [r2, #0]

	/*
	 * one more tick has occurred -- don't need to do anything special since
	 * timer is already configured to interrupt on the following tick
	 */
	_sys_clock_tick_announce();
    1470:	4b05      	ldr	r3, [pc, #20]	; (1488 <_timer_int_handler+0x28>)
    1472:	6818      	ldr	r0, [r3, #0]
    1474:	f003 f90e 	bl	4694 <_nano_sys_clock_tick_announce>

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

	extern void _ExcExit(void);
	_ExcExit();
    1478:	f002 f870 	bl	355c <_ExcExit>
    147c:	bd80      	pop	{r7, pc}
    147e:	bf00      	nop
    1480:	20000170 	.word	0x20000170
    1484:	20000030 	.word	0x20000030
    1488:	2000002c 	.word	0x2000002c

0000148c <_sys_clock_driver_init>:
 * rate specified via the 'sys_clock_us_per_tick' global variable.
 *
 * @return 0
 */
int _sys_clock_driver_init(struct device *device)
{
    148c:	b480      	push	{r7}
    148e:	af00      	add	r7, sp, #0
	/* enable counter, interrupt and set clock src to system clock */
	union __stcsr stcsr = {.bit = {1, 1, 1, 0, 0, 0} };
    1490:	2207      	movs	r2, #7
    1492:	f36f 02cf 	bfc	r2, #3, #13
    1496:	f36f 4210 	bfc	r2, #16, #1
    149a:	f36f 425f 	bfc	r2, #17, #15
	 */

	/* systick supports 24-bit H/W counter */
	__ASSERT(sys_clock_hw_cycles_per_tick <= (1 << 24),
		 "sys_clock_hw_cycles_per_tick too large");
	sysTickReloadSet(sys_clock_hw_cycles_per_tick - 1);
    149e:	4b07      	ldr	r3, [pc, #28]	; (14bc <_sys_clock_driver_init+0x30>)
    14a0:	6819      	ldr	r1, [r3, #0]
    14a2:	3901      	subs	r1, #1
	 * Write the reload value and clear the current value in preparation
	 * for enabling the timer.
	 * The countflag in the control/status register is also cleared by
	 * this operation.
	 */
	__scs.systick.strvr = count;
    14a4:	4b06      	ldr	r3, [pc, #24]	; (14c0 <_sys_clock_driver_init+0x34>)
    14a6:	6159      	str	r1, [r3, #20]
	__scs.systick.stcvr = 0; /* also clears the countflag */
    14a8:	2000      	movs	r0, #0
    14aa:	6198      	str	r0, [r3, #24]

static inline void _ScbExcPrioSet(uint8_t exc, uint8_t pri)
{
	/* For priority exception handler 4-15 */
	__ASSERT((exc > 3) && (exc < 16), "");
	__scs.scb.shpr[exc - 4] = pri;
    14ac:	2120      	movs	r1, #32
    14ae:	f883 1d23 	strb.w	r1, [r3, #3363]	; 0xd23

#endif /* CONFIG_TICKLESS_IDLE */

	_ScbExcPrioSet(_EXC_SYSTICK, _EXC_IRQ_DEFAULT_PRIO);

	__scs.systick.stcsr.val = stcsr.val;
    14b2:	611a      	str	r2, [r3, #16]

	return 0;
}
    14b4:	46bd      	mov	sp, r7
    14b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    14ba:	4770      	bx	lr
    14bc:	20000030 	.word	0x20000030
    14c0:	e000e000 	.word	0xe000e000

000014c4 <gpio_k64_config>:
#include "gpio_k64.h"
#include "gpio_utils.h"

static int gpio_k64_config(struct device *dev,
			   int access_op, uint32_t pin, int flags)
{
    14c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    14c6:	af00      	add	r7, sp, #0
	const struct gpio_k64_config * const cfg = dev->config->config_info;
    14c8:	6800      	ldr	r0, [r0, #0]
    14ca:	6885      	ldr	r5, [r0, #8]
	uint32_t value;
	uint32_t setting;
	uint8_t i;

	/* check for an invalid pin configuration */
	if (((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) ||
    14cc:	f003 0003 	and.w	r0, r3, #3
    14d0:	2803      	cmp	r0, #3
    14d2:	d074      	beq.n	15be <gpio_k64_config+0xfa>

	/*
	 * Setup direction register:
	 * 0 - pin is input, 1 - pin is output
	 */
	if (access_op == GPIO_ACCESS_BY_PIN) {
    14d4:	b989      	cbnz	r1, 14fa <gpio_k64_config+0x36>
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_IN) {
    14d6:	f013 0f01 	tst.w	r3, #1
    14da:	d107      	bne.n	14ec <gpio_k64_config+0x28>
			sys_clear_bit((cfg->gpio_base_addr +
    14dc:	682e      	ldr	r6, [r5, #0]
	*(volatile uint32_t *)addr = temp | (1 << bit);
}

static inline void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
    14de:	6970      	ldr	r0, [r6, #20]

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
    14e0:	2401      	movs	r4, #1
    14e2:	4094      	lsls	r4, r2
    14e4:	ea20 0004 	bic.w	r0, r0, r4
    14e8:	6170      	str	r0, [r6, #20]
    14ea:	e00f      	b.n	150c <gpio_k64_config+0x48>
				       GPIO_K64_DIR_OFFSET), pin);
		} else {  /* GPIO_DIR_OUT */
			sys_set_bit((cfg->gpio_base_addr +
    14ec:	682e      	ldr	r6, [r5, #0]

/* Memory bit manipulation functions */

static inline void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
    14ee:	6970      	ldr	r0, [r6, #20]

	*(volatile uint32_t *)addr = temp | (1 << bit);
    14f0:	2401      	movs	r4, #1
    14f2:	4094      	lsls	r4, r2
    14f4:	4320      	orrs	r0, r4
    14f6:	6170      	str	r0, [r6, #20]
    14f8:	e008      	b.n	150c <gpio_k64_config+0x48>
				     GPIO_K64_DIR_OFFSET), pin);
		}
	} else {	/* GPIO_ACCESS_BY_PORT */
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_IN) {
    14fa:	f013 0f01 	tst.w	r3, #1
    14fe:	d101      	bne.n	1504 <gpio_k64_config+0x40>
			value = 0x0;
    1500:	2400      	movs	r4, #0
    1502:	e001      	b.n	1508 <gpio_k64_config+0x44>
		} else {  /* GPIO_DIR_OUT */
			value = 0xFFFFFFFF;
    1504:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		}

		sys_write32(value, (cfg->gpio_base_addr + GPIO_K64_DIR_OFFSET));
    1508:	6828      	ldr	r0, [r5, #0]
}


static inline void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    150a:	6144      	str	r4, [r0, #20]
	}

	/*
	 * Set up pullup/pulldown configuration, in Port Control module:
	 */
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    150c:	f403 7040 	and.w	r0, r3, #768	; 0x300
    1510:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    1514:	d006      	beq.n	1524 <gpio_k64_config+0x60>
		setting = (K64_PINMUX_PULL_ENABLE | K64_PINMUX_PULL_UP);
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    1516:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    151a:	d005      	beq.n	1528 <gpio_k64_config+0x64>
		setting = (K64_PINMUX_PULL_ENABLE | K64_PINMUX_PULL_DN);
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_NORMAL) {
    151c:	2800      	cmp	r0, #0
    151e:	d151      	bne.n	15c4 <gpio_k64_config+0x100>
		setting = K64_PINMUX_PULL_DISABLE;
    1520:	2600      	movs	r6, #0
    1522:	e002      	b.n	152a <gpio_k64_config+0x66>

	/*
	 * Set up pullup/pulldown configuration, in Port Control module:
	 */
	if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
		setting = (K64_PINMUX_PULL_ENABLE | K64_PINMUX_PULL_UP);
    1524:	2603      	movs	r6, #3
    1526:	e000      	b.n	152a <gpio_k64_config+0x66>
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
		setting = (K64_PINMUX_PULL_ENABLE | K64_PINMUX_PULL_DN);
    1528:	2602      	movs	r6, #2
	}

	/*
	 * Set up interrupt configuration, in Port Control module:
	 */
	if (flags & GPIO_INT) {
    152a:	f013 0e02 	ands.w	lr, r3, #2
    152e:	d019      	beq.n	1564 <gpio_k64_config+0xa0>
		/* edge or level */
		if (flags & GPIO_INT_EDGE) {
    1530:	f013 0f20 	tst.w	r3, #32
    1534:	d00e      	beq.n	1554 <gpio_k64_config+0x90>
			if (flags & GPIO_INT_ACTIVE_HIGH) {
    1536:	f013 0f04 	tst.w	r3, #4
    153a:	d002      	beq.n	1542 <gpio_k64_config+0x7e>
				setting |= K64_PINMUX_INT_RISING;
    153c:	f446 2610 	orr.w	r6, r6, #589824	; 0x90000
    1540:	e010      	b.n	1564 <gpio_k64_config+0xa0>
			} else if (flags & GPIO_INT_DOUBLE_EDGE) {
    1542:	f013 0f40 	tst.w	r3, #64	; 0x40
    1546:	d002      	beq.n	154e <gpio_k64_config+0x8a>
				setting |= K64_PINMUX_INT_BOTH_EDGE;
    1548:	f446 2630 	orr.w	r6, r6, #720896	; 0xb0000
    154c:	e00a      	b.n	1564 <gpio_k64_config+0xa0>
			} else {
				setting |= K64_PINMUX_INT_FALLING;
    154e:	f446 2620 	orr.w	r6, r6, #655360	; 0xa0000
    1552:	e007      	b.n	1564 <gpio_k64_config+0xa0>
			}
		} else { /* GPIO_INT_LEVEL */
			if (flags & GPIO_INT_ACTIVE_HIGH) {
    1554:	f013 0f04 	tst.w	r3, #4
    1558:	d002      	beq.n	1560 <gpio_k64_config+0x9c>
				setting |= K64_PINMUX_INT_HIGH;
    155a:	f446 2640 	orr.w	r6, r6, #786432	; 0xc0000
    155e:	e001      	b.n	1564 <gpio_k64_config+0xa0>
			} else {
				setting |= K64_PINMUX_INT_LOW;
    1560:	f446 2600 	orr.w	r6, r6, #524288	; 0x80000
			}
		}
	}

	/* write pull-up/-down and, if set, interrupt configuration settings */
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1564:	bb31      	cbnz	r1, 15b4 <gpio_k64_config+0xf0>
		value = sys_read32((cfg->port_base_addr +
    1566:	6869      	ldr	r1, [r5, #4]

/* Memory mapped registers I/O functions */

static inline uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    1568:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
				    K64_PINMUX_CTRL_OFFSET(pin)));

		/* clear, then set configuration values */
		value &= ~(K64_PINMUX_PULL_EN_MASK | K64_PINMUX_PULL_SEL_MASK);
    156c:	f020 0303 	bic.w	r3, r0, #3

		if (flags & GPIO_INT) {
    1570:	f1be 0f00 	cmp.w	lr, #0
    1574:	d003      	beq.n	157e <gpio_k64_config+0xba>
			value &= ~K64_PINMUX_INT_MASK;
    1576:	f420 2370 	bic.w	r3, r0, #983040	; 0xf0000
    157a:	f023 0303 	bic.w	r3, r3, #3
		}

		/* Pins must configured as gpio */
		value |= (setting | K64_PINMUX_FUNC_GPIO);
    157e:	4333      	orrs	r3, r6
    1580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
}


static inline void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    1584:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
			sys_write32(value, (cfg->port_base_addr +
					    K64_PINMUX_CTRL_OFFSET(i)));
		}
	}

	return 0;
    1588:	2000      	movs	r0, #0
    158a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		sys_write32(value, (cfg->port_base_addr +
				    K64_PINMUX_CTRL_OFFSET(pin)));
	} else {  /* GPIO_ACCESS_BY_PORT */
		for (i = 0; i < K64_PINMUX_NUM_PINS; i++) {
			/* clear, then set configuration values */
			value = sys_read32((cfg->port_base_addr +
    158c:	6869      	ldr	r1, [r5, #4]
					    K64_PINMUX_CTRL_OFFSET(i)));
    158e:	0094      	lsls	r4, r2, #2

/* Memory mapped registers I/O functions */

static inline uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    1590:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]

			value &= ~(K64_PINMUX_PULL_EN_MASK |
    1594:	f020 0303 	bic.w	r3, r0, #3
				   K64_PINMUX_PULL_SEL_MASK);

			if (flags & GPIO_INT) {
    1598:	f1be 0f00 	cmp.w	lr, #0
    159c:	d003      	beq.n	15a6 <gpio_k64_config+0xe2>
				value &= ~K64_PINMUX_INT_MASK;
    159e:	f420 2370 	bic.w	r3, r0, #983040	; 0xf0000
    15a2:	f023 0303 	bic.w	r3, r3, #3
			}

			/* Pins must configured as gpio */
			value |= (setting | K64_PINMUX_FUNC_GPIO);
    15a6:	4333      	orrs	r3, r6
    15a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
}


static inline void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    15ac:	5063      	str	r3, [r4, r1]
		value |= (setting | K64_PINMUX_FUNC_GPIO);

		sys_write32(value, (cfg->port_base_addr +
				    K64_PINMUX_CTRL_OFFSET(pin)));
	} else {  /* GPIO_ACCESS_BY_PORT */
		for (i = 0; i < K64_PINMUX_NUM_PINS; i++) {
    15ae:	3201      	adds	r2, #1
    15b0:	b2d2      	uxtb	r2, r2
    15b2:	e000      	b.n	15b6 <gpio_k64_config+0xf2>
    15b4:	2200      	movs	r2, #0
    15b6:	2a1f      	cmp	r2, #31
    15b8:	d9e8      	bls.n	158c <gpio_k64_config+0xc8>
			sys_write32(value, (cfg->port_base_addr +
					    K64_PINMUX_CTRL_OFFSET(i)));
		}
	}

	return 0;
    15ba:	2000      	movs	r0, #0
    15bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t i;

	/* check for an invalid pin configuration */
	if (((flags & GPIO_INT) && (flags & GPIO_DIR_OUT)) ||
	    ((flags & GPIO_DIR_IN) && (flags & GPIO_DIR_OUT))) {
		return -ENOTSUP;
    15be:	f06f 0022 	mvn.w	r0, #34	; 0x22
    15c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
		setting = (K64_PINMUX_PULL_ENABLE | K64_PINMUX_PULL_DN);
	} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_NORMAL) {
		setting = K64_PINMUX_PULL_DISABLE;
	} else {
		return -ENOTSUP;
    15c4:	f06f 0022 	mvn.w	r0, #34	; 0x22
					    K64_PINMUX_CTRL_OFFSET(i)));
		}
	}

	return 0;
}
    15c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15ca:	bf00      	nop

000015cc <gpio_k64_write>:


static int gpio_k64_write(struct device *dev,
			  int access_op, uint32_t pin, uint32_t value)
{
    15cc:	b480      	push	{r7}
    15ce:	af00      	add	r7, sp, #0
	const struct gpio_k64_config * const cfg = dev->config->config_info;
    15d0:	6800      	ldr	r0, [r0, #0]
    15d2:	6880      	ldr	r0, [r0, #8]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    15d4:	b989      	cbnz	r1, 15fa <gpio_k64_write+0x2e>
		if (value) {
    15d6:	b13b      	cbz	r3, 15e8 <gpio_k64_write+0x1c>
			sys_set_bit((cfg->gpio_base_addr +
    15d8:	6800      	ldr	r0, [r0, #0]

/* Memory bit manipulation functions */

static inline void sys_set_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
    15da:	6803      	ldr	r3, [r0, #0]

	*(volatile uint32_t *)addr = temp | (1 << bit);
    15dc:	2101      	movs	r1, #1
    15de:	fa01 f202 	lsl.w	r2, r1, r2
    15e2:	431a      	orrs	r2, r3
    15e4:	6002      	str	r2, [r0, #0]
    15e6:	e00a      	b.n	15fe <gpio_k64_write+0x32>
				     GPIO_K64_DATA_OUT_OFFSET), pin);
		} else {
			sys_clear_bit((cfg->gpio_base_addr +
    15e8:	6800      	ldr	r0, [r0, #0]
}

static inline void sys_clear_bit(mem_addr_t addr, unsigned int bit)
{
	uint32_t temp = *(volatile uint32_t *)addr;
    15ea:	6803      	ldr	r3, [r0, #0]

	*(volatile uint32_t *)addr = temp & ~(1 << bit);
    15ec:	2101      	movs	r1, #1
    15ee:	fa01 f202 	lsl.w	r2, r1, r2
    15f2:	ea23 0202 	bic.w	r2, r3, r2
    15f6:	6002      	str	r2, [r0, #0]
    15f8:	e001      	b.n	15fe <gpio_k64_write+0x32>
				       GPIO_K64_DATA_OUT_OFFSET), pin);
		}
	} else { /* GPIO_ACCESS_BY_PORT */
		sys_write32(value, (cfg->gpio_base_addr +
    15fa:	6802      	ldr	r2, [r0, #0]
}


static inline void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    15fc:	6013      	str	r3, [r2, #0]
				    GPIO_K64_DATA_OUT_OFFSET));
	}

	return 0;
}
    15fe:	2000      	movs	r0, #0
    1600:	46bd      	mov	sp, r7
    1602:	f85d 7b04 	ldr.w	r7, [sp], #4
    1606:	4770      	bx	lr

00001608 <gpio_k64_read>:


static int gpio_k64_read(struct device *dev,
			 int access_op, uint32_t pin, uint32_t *value)
{
    1608:	b480      	push	{r7}
    160a:	af00      	add	r7, sp, #0
	const struct gpio_k64_config * const cfg = dev->config->config_info;
    160c:	6800      	ldr	r0, [r0, #0]
    160e:	6880      	ldr	r0, [r0, #8]

	*value = sys_read32((cfg->gpio_base_addr + GPIO_K64_DATA_IN_OFFSET));
    1610:	6800      	ldr	r0, [r0, #0]

/* Memory mapped registers I/O functions */

static inline uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
    1612:	6900      	ldr	r0, [r0, #16]
    1614:	6018      	str	r0, [r3, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1616:	b929      	cbnz	r1, 1624 <gpio_k64_read+0x1c>
		*value = (*value & BIT(pin)) >> pin;
    1618:	2101      	movs	r1, #1
    161a:	4091      	lsls	r1, r2
    161c:	4008      	ands	r0, r1
    161e:	fa20 f202 	lsr.w	r2, r0, r2
    1622:	601a      	str	r2, [r3, #0]
	}

	/* nothing more to do for GPIO_ACCESS_BY_PORT */

	return 0;
}
    1624:	2000      	movs	r0, #0
    1626:	46bd      	mov	sp, r7
    1628:	f85d 7b04 	ldr.w	r7, [sp], #4
    162c:	4770      	bx	lr
    162e:	bf00      	nop

00001630 <gpio_k64_manage_callback>:


static int gpio_k64_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
	struct gpio_k64_data *data = dev->driver_data;
    1630:	6880      	ldr	r0, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1632:	b13a      	cbz	r2, 1644 <gpio_k64_manage_callback+0x14>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    1634:	6803      	ldr	r3, [r0, #0]
    1636:	600b      	str	r3, [r1, #0]
	list->head = node;
    1638:	6001      	str	r1, [r0, #0]

	if (!list->tail) {
    163a:	6843      	ldr	r3, [r0, #4]
    163c:	b903      	cbnz	r3, 1640 <gpio_k64_manage_callback+0x10>
		list->tail = list->head;
    163e:	6041      	str	r1, [r0, #4]

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    1640:	2000      	movs	r0, #0
    1642:	4770      	bx	lr
}


static int gpio_k64_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    1644:	b4b0      	push	{r4, r5, r7}
    1646:	af00      	add	r7, sp, #0
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    1648:	460d      	mov	r5, r1
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    164a:	6803      	ldr	r3, [r0, #0]
 * @param node A pointer on the node to remove from the list
 */
static inline void sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    164c:	2400      	movs	r4, #0
    164e:	e018      	b.n	1682 <gpio_k64_manage_callback+0x52>
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
		if (test == node) {
    1650:	429d      	cmp	r5, r3
    1652:	d110      	bne.n	1676 <gpio_k64_manage_callback+0x46>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node)
{
	if (!prev_node) {
    1654:	b934      	cbnz	r4, 1664 <gpio_k64_manage_callback+0x34>
		list->head = node->next;
    1656:	680b      	ldr	r3, [r1, #0]
    1658:	6003      	str	r3, [r0, #0]

		/* Was node also the tail? */
		if (list->tail == node) {
    165a:	6842      	ldr	r2, [r0, #4]
    165c:	4291      	cmp	r1, r2
    165e:	d107      	bne.n	1670 <gpio_k64_manage_callback+0x40>
			list->tail = list->head;
    1660:	6043      	str	r3, [r0, #4]
    1662:	e005      	b.n	1670 <gpio_k64_manage_callback+0x40>
		}
	} else {
		prev_node->next = node->next;
    1664:	680b      	ldr	r3, [r1, #0]
    1666:	6023      	str	r3, [r4, #0]

		/* Was node the tail? */
		if (list->tail == node) {
    1668:	6843      	ldr	r3, [r0, #4]
    166a:	4299      	cmp	r1, r3
    166c:	d100      	bne.n	1670 <gpio_k64_manage_callback+0x40>
			list->tail = prev_node;
    166e:	6044      	str	r4, [r0, #4]
		}
	}

	node->next = NULL;
    1670:	2300      	movs	r3, #0
    1672:	600b      	str	r3, [r1, #0]
    1674:	e007      	b.n	1686 <gpio_k64_manage_callback+0x56>
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return !node ? NULL : node->next;
    1676:	b10b      	cbz	r3, 167c <gpio_k64_manage_callback+0x4c>
    1678:	681a      	ldr	r2, [r3, #0]
    167a:	e000      	b.n	167e <gpio_k64_manage_callback+0x4e>
    167c:	461a      	mov	r2, r3
		if (test == node) {
			sys_slist_remove(list, prev, node);
			break;
		}

		prev = test;
    167e:	461c      	mov	r4, r3
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1680:	4613      	mov	r3, r2
    1682:	2b00      	cmp	r3, #0
    1684:	d1e4      	bne.n	1650 <gpio_k64_manage_callback+0x20>
	struct gpio_k64_data *data = dev->driver_data;

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    1686:	2000      	movs	r0, #0
    1688:	46bd      	mov	sp, r7
    168a:	bcb0      	pop	{r4, r5, r7}
    168c:	4770      	bx	lr
    168e:	bf00      	nop

00001690 <gpio_k64_enable_callback>:


static int gpio_k64_enable_callback(struct device *dev,
				    int access_op, uint32_t pin)
{
    1690:	b480      	push	{r7}
    1692:	af00      	add	r7, sp, #0
	struct gpio_k64_data *data = dev->driver_data;
    1694:	6883      	ldr	r3, [r0, #8]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1696:	b931      	cbnz	r1, 16a6 <gpio_k64_enable_callback+0x16>
		data->pin_callback_enables |= BIT(pin);
    1698:	2101      	movs	r1, #1
    169a:	fa01 f202 	lsl.w	r2, r1, r2
    169e:	6899      	ldr	r1, [r3, #8]
    16a0:	430a      	orrs	r2, r1
    16a2:	609a      	str	r2, [r3, #8]
    16a4:	e002      	b.n	16ac <gpio_k64_enable_callback+0x1c>
	} else {
		data->pin_callback_enables = 0xFFFFFFFF;
    16a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    16aa:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
    16ac:	2000      	movs	r0, #0
    16ae:	46bd      	mov	sp, r7
    16b0:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b4:	4770      	bx	lr
    16b6:	bf00      	nop

000016b8 <gpio_k64_disable_callback>:


static int gpio_k64_disable_callback(struct device *dev,
				     int access_op, uint32_t pin)
{
    16b8:	b480      	push	{r7}
    16ba:	af00      	add	r7, sp, #0
	struct gpio_k64_data *data = dev->driver_data;
    16bc:	6883      	ldr	r3, [r0, #8]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    16be:	b939      	cbnz	r1, 16d0 <gpio_k64_disable_callback+0x18>
		data->pin_callback_enables &= ~BIT(pin);
    16c0:	2101      	movs	r1, #1
    16c2:	fa01 f202 	lsl.w	r2, r1, r2
    16c6:	6899      	ldr	r1, [r3, #8]
    16c8:	ea21 0102 	bic.w	r1, r1, r2
    16cc:	6099      	str	r1, [r3, #8]
    16ce:	e001      	b.n	16d4 <gpio_k64_disable_callback+0x1c>
	} else {
		data->pin_callback_enables = 0;
    16d0:	2200      	movs	r2, #0
    16d2:	609a      	str	r2, [r3, #8]
	}

	return 0;
}
    16d4:	2000      	movs	r0, #0
    16d6:	46bd      	mov	sp, r7
    16d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    16dc:	4770      	bx	lr
    16de:	bf00      	nop

000016e0 <gpio_k64_port_isr>:
 * @param dev Pointer to device structure for driver instance
 *
 * @return N/A
 */
static void gpio_k64_port_isr(void *dev)
{
    16e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    16e4:	af00      	add	r7, sp, #0
    16e6:	4606      	mov	r6, r0
	struct device *port = (struct device *)dev;
	struct gpio_k64_data *data = port->driver_data;
    16e8:	6882      	ldr	r2, [r0, #8]
	const struct gpio_k64_config *config = port->config->config_info;
    16ea:	6803      	ldr	r3, [r0, #0]
    16ec:	689b      	ldr	r3, [r3, #8]
	mem_addr_t int_status_reg_addr;
	uint32_t enabled_int, int_status;

	int_status_reg_addr = config->port_base_addr +
    16ee:	f8d3 8004 	ldr.w	r8, [r3, #4]
    16f2:	f8d8 30a0 	ldr.w	r3, [r8, #160]	; 0xa0
		CONFIG_PORT_K64_INT_STATUS_OFFSET;

	int_status = sys_read32(int_status_reg_addr);
	enabled_int = int_status & data->pin_callback_enables;
    16f6:	6895      	ldr	r5, [r2, #8]
    16f8:	401d      	ands	r5, r3
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    16fa:	6814      	ldr	r4, [r2, #0]
    16fc:	e009      	b.n	1712 <gpio_k64_port_isr+0x32>
	sys_snode_t *node;

	SYS_SLIST_FOR_EACH_NODE(list, node) {
		cb = (struct gpio_callback *)node;

		if (cb->pin_mask & pins) {
    16fe:	68a3      	ldr	r3, [r4, #8]
    1700:	421d      	tst	r5, r3
    1702:	d004      	beq.n	170e <gpio_k64_port_isr+0x2e>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1704:	6863      	ldr	r3, [r4, #4]
    1706:	462a      	mov	r2, r5
    1708:	4621      	mov	r1, r4
    170a:	4630      	mov	r0, r6
    170c:	4798      	blx	r3
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next(sys_snode_t *node)
{
	return !node ? NULL : node->next;
    170e:	b104      	cbz	r4, 1712 <gpio_k64_port_isr+0x32>
    1710:	6824      	ldr	r4, [r4, #0]
					uint32_t pins)
{
	struct gpio_callback *cb;
	sys_snode_t *node;

	SYS_SLIST_FOR_EACH_NODE(list, node) {
    1712:	2c00      	cmp	r4, #0
    1714:	d1f3      	bne.n	16fe <gpio_k64_port_isr+0x1e>
}


static inline void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
    1716:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    171a:	f8c8 30a0 	str.w	r3, [r8, #160]	; 0xa0
    171e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1722:	bf00      	nop

00001724 <gpio_k64_A_init>:
		    &gpio_data_A, &gpio_k64_A_cfg,
		    SECONDARY, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_k64_drv_api_funcs);

static int gpio_k64_A_init(struct device *dev)
{
    1724:	b580      	push	{r7, lr}
    1726:	af00      	add	r7, sp, #0
	IRQ_CONNECT(GPIO_K64_A_IRQ, CONFIG_GPIO_K64_PORTA_PRI,
    1728:	2200      	movs	r2, #0
    172a:	2102      	movs	r1, #2
    172c:	203b      	movs	r0, #59	; 0x3b
    172e:	f002 f951 	bl	39d4 <_irq_priority_set>
		    gpio_k64_port_isr, DEVICE_GET(gpio_k64_A), 0);

	irq_enable(GPIO_K64_A_IRQ);
    1732:	203b      	movs	r0, #59	; 0x3b
    1734:	f002 f93c 	bl	39b0 <_arch_irq_enable>

	return 0;
}
    1738:	2000      	movs	r0, #0
    173a:	bd80      	pop	{r7, pc}

0000173c <gpio_k64_B_init>:
		    &gpio_data_B, &gpio_k64_B_cfg,
		    SECONDARY, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_k64_drv_api_funcs);

static int gpio_k64_B_init(struct device *dev)
{
    173c:	b580      	push	{r7, lr}
    173e:	af00      	add	r7, sp, #0
	IRQ_CONNECT(GPIO_K64_B_IRQ, CONFIG_GPIO_K64_PORTB_PRI,
    1740:	2200      	movs	r2, #0
    1742:	2102      	movs	r1, #2
    1744:	203c      	movs	r0, #60	; 0x3c
    1746:	f002 f945 	bl	39d4 <_irq_priority_set>
		    gpio_k64_port_isr, DEVICE_GET(gpio_k64_B), 0);

	irq_enable(GPIO_K64_B_IRQ);
    174a:	203c      	movs	r0, #60	; 0x3c
    174c:	f002 f930 	bl	39b0 <_arch_irq_enable>

	return 0;
}
    1750:	2000      	movs	r0, #0
    1752:	bd80      	pop	{r7, pc}

00001754 <gpio_k64_C_init>:
		    &gpio_data_C, &gpio_k64_C_cfg,
		    SECONDARY, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_k64_drv_api_funcs);

static int gpio_k64_C_init(struct device *dev)
{
    1754:	b580      	push	{r7, lr}
    1756:	af00      	add	r7, sp, #0
	IRQ_CONNECT(GPIO_K64_C_IRQ, CONFIG_GPIO_K64_PORTC_PRI,
    1758:	2200      	movs	r2, #0
    175a:	2102      	movs	r1, #2
    175c:	203d      	movs	r0, #61	; 0x3d
    175e:	f002 f939 	bl	39d4 <_irq_priority_set>
		    gpio_k64_port_isr, DEVICE_GET(gpio_k64_C), 0);

	irq_enable(GPIO_K64_C_IRQ);
    1762:	203d      	movs	r0, #61	; 0x3d
    1764:	f002 f924 	bl	39b0 <_arch_irq_enable>

	return 0;
}
    1768:	2000      	movs	r0, #0
    176a:	bd80      	pop	{r7, pc}

0000176c <gpio_k64_D_init>:
		    &gpio_data_D, &gpio_k64_D_cfg,
		    SECONDARY, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_k64_drv_api_funcs);

static int gpio_k64_D_init(struct device *dev)
{
    176c:	b580      	push	{r7, lr}
    176e:	af00      	add	r7, sp, #0
	IRQ_CONNECT(GPIO_K64_D_IRQ, CONFIG_GPIO_K64_PORTD_PRI,
    1770:	2200      	movs	r2, #0
    1772:	2102      	movs	r1, #2
    1774:	203e      	movs	r0, #62	; 0x3e
    1776:	f002 f92d 	bl	39d4 <_irq_priority_set>
		    gpio_k64_port_isr, DEVICE_GET(gpio_k64_D), 0);

	irq_enable(GPIO_K64_D_IRQ);
    177a:	203e      	movs	r0, #62	; 0x3e
    177c:	f002 f918 	bl	39b0 <_arch_irq_enable>

	return 0;
}
    1780:	2000      	movs	r0, #0
    1782:	bd80      	pop	{r7, pc}

00001784 <gpio_k64_E_init>:
		    &gpio_data_E, &gpio_k64_E_cfg,
		    SECONDARY, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_k64_drv_api_funcs);

static int gpio_k64_E_init(struct device *dev)
{
    1784:	b580      	push	{r7, lr}
    1786:	af00      	add	r7, sp, #0
	IRQ_CONNECT(GPIO_K64_E_IRQ, CONFIG_GPIO_K64_PORTE_PRI,
    1788:	2200      	movs	r2, #0
    178a:	2102      	movs	r1, #2
    178c:	203f      	movs	r0, #63	; 0x3f
    178e:	f002 f921 	bl	39d4 <_irq_priority_set>
		    gpio_k64_port_isr, DEVICE_GET(gpio_k64_E), 0);

	irq_enable(GPIO_K64_E_IRQ);
    1792:	203f      	movs	r0, #63	; 0x3f
    1794:	f002 f90c 	bl	39b0 <_arch_irq_enable>

	return 0;
}
    1798:	2000      	movs	r0, #0
    179a:	bd80      	pop	{r7, pc}

0000179c <i2c_ksdk_convert_flags>:
	data->callback_status = status;
	device_sync_call_complete(&data->sync);
}

static uint32_t i2c_ksdk_convert_flags(int msg_flags)
{
    179c:	b480      	push	{r7}
    179e:	af00      	add	r7, sp, #0
	uint32_t flags = 0;

	if (!(msg_flags & I2C_MSG_STOP)) {
    17a0:	f010 0f02 	tst.w	r0, #2
    17a4:	d001      	beq.n	17aa <i2c_ksdk_convert_flags+0xe>
	device_sync_call_complete(&data->sync);
}

static uint32_t i2c_ksdk_convert_flags(int msg_flags)
{
	uint32_t flags = 0;
    17a6:	2300      	movs	r3, #0
    17a8:	e000      	b.n	17ac <i2c_ksdk_convert_flags+0x10>

	if (!(msg_flags & I2C_MSG_STOP)) {
		flags |= kI2C_TransferNoStopFlag;
    17aa:	2304      	movs	r3, #4
	}

	if (msg_flags & I2C_MSG_RESTART) {
    17ac:	f010 0f04 	tst.w	r0, #4
    17b0:	d001      	beq.n	17b6 <i2c_ksdk_convert_flags+0x1a>
		flags |= kI2C_TransferRepeatedStartFlag;
    17b2:	f043 0302 	orr.w	r3, r3, #2
	}

	return flags;
}
    17b6:	4618      	mov	r0, r3
    17b8:	46bd      	mov	sp, r7
    17ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    17be:	4770      	bx	lr

000017c0 <i2c_ksdk_config_func_0>:
		    &i2c_ksdk_data_0, &i2c_ksdk_config_0,
		    SECONDARY, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &i2c_ksdk_driver_api);

static void i2c_ksdk_config_func_0(struct device *dev)
{
    17c0:	b580      	push	{r7, lr}
    17c2:	af00      	add	r7, sp, #0
	IRQ_CONNECT(IRQ_I2C0, CONFIG_I2C_0_IRQ_PRI,
    17c4:	2200      	movs	r2, #0
    17c6:	4611      	mov	r1, r2
    17c8:	2018      	movs	r0, #24
    17ca:	f002 f903 	bl	39d4 <_irq_priority_set>
		    i2c_ksdk_isr, DEVICE_GET(i2c_ksdk_0), 0);

	irq_enable(I2C0_IRQn);
    17ce:	2018      	movs	r0, #24
    17d0:	f002 f8ee 	bl	39b0 <_arch_irq_enable>
    17d4:	bd80      	pop	{r7, pc}
    17d6:	bf00      	nop

000017d8 <i2c_ksdk_isr>:

	return 0;
}

static void i2c_ksdk_isr(void *arg)
{
    17d8:	b580      	push	{r7, lr}
    17da:	af00      	add	r7, sp, #0
	struct device *dev = (struct device *)arg;
	I2C_Type *base = DEV_BASE(dev);
    17dc:	6803      	ldr	r3, [r0, #0]
    17de:	689b      	ldr	r3, [r3, #8]
	struct i2c_ksdk_data *data = DEV_DATA(dev);

	I2C_MasterTransferHandleIRQ(base, &data->handle);
    17e0:	6881      	ldr	r1, [r0, #8]
    17e2:	6818      	ldr	r0, [r3, #0]
    17e4:	f001 fdc2 	bl	336c <I2C_MasterTransferHandleIRQ>
    17e8:	bd80      	pop	{r7, pc}
    17ea:	bf00      	nop

000017ec <i2c_ksdk_master_transfer_callback>:
	return 0;
}

static void i2c_ksdk_master_transfer_callback(I2C_Type *base,
		i2c_master_handle_t *handle, status_t status, void *userData)
{
    17ec:	b580      	push	{r7, lr}
    17ee:	af00      	add	r7, sp, #0
	struct device *dev = userData;
	struct i2c_ksdk_data *data = DEV_DATA(dev);
    17f0:	6898      	ldr	r0, [r3, #8]

	data->callback_status = status;
    17f2:	6382      	str	r2, [r0, #56]	; 0x38
 *
 * @param sync A pointer to a valid device_sync_call_t
 */
static inline void device_sync_call_complete(device_sync_call_t *sync)
{
	nano_sem_give(&sync->f_sem);
    17f4:	3028      	adds	r0, #40	; 0x28
    17f6:	f002 fed9 	bl	45ac <k_sem_give>
    17fa:	bd80      	pop	{r7, pc}

000017fc <i2c_ksdk_configure>:
	device_sync_call_t sync;
	status_t callback_status;
};

static int i2c_ksdk_configure(struct device *dev, uint32_t dev_config_raw)
{
    17fc:	b5b0      	push	{r4, r5, r7, lr}
    17fe:	af00      	add	r7, sp, #0
	I2C_Type *base = DEV_BASE(dev);
    1800:	6803      	ldr	r3, [r0, #0]
    1802:	689a      	ldr	r2, [r3, #8]
    1804:	6814      	ldr	r4, [r2, #0]
	const struct i2c_ksdk_config *config = DEV_CFG(dev);
	union dev_config dev_config = (union dev_config)dev_config_raw;
	uint32_t clock_freq;
	uint32_t baudrate;

	if (!dev_config.bits.is_master_device) {
    1806:	b2cb      	uxtb	r3, r1
    1808:	f013 0f10 	tst.w	r3, #16
    180c:	d019      	beq.n	1842 <i2c_ksdk_configure+0x46>
		return -EINVAL;
	}

	if (dev_config.bits.is_slave_read) {
    180e:	f013 0f20 	tst.w	r3, #32
    1812:	d119      	bne.n	1848 <i2c_ksdk_configure+0x4c>
		return -EINVAL;
	}

	if (dev_config.bits.use_10_bit_addr) {
    1814:	f013 0f01 	tst.w	r3, #1
    1818:	d119      	bne.n	184e <i2c_ksdk_configure+0x52>
		return -EINVAL;
	}

	switch (dev_config.bits.speed) {
    181a:	f3c1 0142 	ubfx	r1, r1, #1, #3
    181e:	2901      	cmp	r1, #1
    1820:	d002      	beq.n	1828 <i2c_ksdk_configure+0x2c>
    1822:	2902      	cmp	r1, #2
    1824:	d002      	beq.n	182c <i2c_ksdk_configure+0x30>
    1826:	e015      	b.n	1854 <i2c_ksdk_configure+0x58>
	case I2C_SPEED_STANDARD:
		baudrate = KHZ(100);
    1828:	4d0c      	ldr	r5, [pc, #48]	; (185c <i2c_ksdk_configure+0x60>)
    182a:	e000      	b.n	182e <i2c_ksdk_configure+0x32>
		break;
	case I2C_SPEED_FAST:
		baudrate = MHZ(1);
    182c:	4d0c      	ldr	r5, [pc, #48]	; (1860 <i2c_ksdk_configure+0x64>)
		break;
	default:
		return -EINVAL;
	}

	clock_freq = CLOCK_GetFreq(config->clock_source);
    182e:	7910      	ldrb	r0, [r2, #4]
    1830:	f001 f9c8 	bl	2bc4 <CLOCK_GetFreq>
	I2C_MasterSetBaudRate(base, baudrate, clock_freq);
    1834:	4602      	mov	r2, r0
    1836:	4629      	mov	r1, r5
    1838:	4620      	mov	r0, r4
    183a:	f001 fb93 	bl	2f64 <I2C_MasterSetBaudRate>

	return 0;
    183e:	2000      	movs	r0, #0
    1840:	bdb0      	pop	{r4, r5, r7, pc}
	union dev_config dev_config = (union dev_config)dev_config_raw;
	uint32_t clock_freq;
	uint32_t baudrate;

	if (!dev_config.bits.is_master_device) {
		return -EINVAL;
    1842:	f06f 0015 	mvn.w	r0, #21
    1846:	bdb0      	pop	{r4, r5, r7, pc}
	}

	if (dev_config.bits.is_slave_read) {
		return -EINVAL;
    1848:	f06f 0015 	mvn.w	r0, #21
    184c:	bdb0      	pop	{r4, r5, r7, pc}
	}

	if (dev_config.bits.use_10_bit_addr) {
		return -EINVAL;
    184e:	f06f 0015 	mvn.w	r0, #21
    1852:	bdb0      	pop	{r4, r5, r7, pc}
		break;
	case I2C_SPEED_FAST:
		baudrate = MHZ(1);
		break;
	default:
		return -EINVAL;
    1854:	f06f 0015 	mvn.w	r0, #21

	clock_freq = CLOCK_GetFreq(config->clock_source);
	I2C_MasterSetBaudRate(base, baudrate, clock_freq);

	return 0;
}
    1858:	bdb0      	pop	{r4, r5, r7, pc}
    185a:	bf00      	nop
    185c:	000186a0 	.word	0x000186a0
    1860:	000f4240 	.word	0x000f4240

00001864 <i2c_ksdk_init>:

	I2C_MasterTransferHandleIRQ(base, &data->handle);
}

static int i2c_ksdk_init(struct device *dev)
{
    1864:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1868:	b085      	sub	sp, #20
    186a:	af00      	add	r7, sp, #0
    186c:	4604      	mov	r4, r0
	I2C_Type *base = DEV_BASE(dev);
    186e:	6803      	ldr	r3, [r0, #0]
    1870:	689d      	ldr	r5, [r3, #8]
    1872:	682e      	ldr	r6, [r5, #0]
	const struct i2c_ksdk_config *config = DEV_CFG(dev);
	struct i2c_ksdk_data *data = DEV_DATA(dev);
    1874:	f8d0 8008 	ldr.w	r8, [r0, #8]
 *
 * @return N/A
 */
static inline void nano_sem_init(struct nano_sem *sem)
{
	k_sem_init(sem, 0, UINT_MAX);
    1878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    187c:	2100      	movs	r1, #0
    187e:	f108 0028 	add.w	r0, r8, #40	; 0x28
    1882:	f002 fe89 	bl	4598 <k_sem_init>
	i2c_master_config_t master_config;
	int error;

	device_sync_call_init(&data->sync);

	clock_freq = CLOCK_GetFreq(config->clock_source);
    1886:	7928      	ldrb	r0, [r5, #4]
    1888:	f001 f99c 	bl	2bc4 <CLOCK_GetFreq>
    188c:	4681      	mov	r9, r0
	I2C_MasterGetDefaultConfig(&master_config);
    188e:	1d38      	adds	r0, r7, #4
    1890:	f001 fb30 	bl	2ef4 <I2C_MasterGetDefaultConfig>
	I2C_MasterInit(base, &master_config, clock_freq);
    1894:	464a      	mov	r2, r9
    1896:	1d39      	adds	r1, r7, #4
    1898:	4630      	mov	r0, r6
    189a:	f001 fba1 	bl	2fe0 <I2C_MasterInit>
	I2C_MasterTransferCreateHandle(base, &data->handle,
    189e:	4623      	mov	r3, r4
    18a0:	4a09      	ldr	r2, [pc, #36]	; (18c8 <i2c_ksdk_init+0x64>)
    18a2:	4641      	mov	r1, r8
    18a4:	4630      	mov	r0, r6
    18a6:	f001 fd97 	bl	33d8 <I2C_MasterTransferCreateHandle>
			i2c_ksdk_master_transfer_callback, dev);

	error = i2c_ksdk_configure(dev, config->default_cfg.raw);
    18aa:	68e9      	ldr	r1, [r5, #12]
    18ac:	4620      	mov	r0, r4
    18ae:	f7ff ffa5 	bl	17fc <i2c_ksdk_configure>
	if (error) {
    18b2:	b920      	cbnz	r0, 18be <i2c_ksdk_init+0x5a>
		return error;
	}

	config->irq_config_func(dev);
    18b4:	68ab      	ldr	r3, [r5, #8]
    18b6:	4620      	mov	r0, r4
    18b8:	4798      	blx	r3

	return 0;
    18ba:	2000      	movs	r0, #0
    18bc:	e7ff      	b.n	18be <i2c_ksdk_init+0x5a>
}
    18be:	3714      	adds	r7, #20
    18c0:	46bd      	mov	sp, r7
    18c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    18c6:	bf00      	nop
    18c8:	000017ed 	.word	0x000017ed

000018cc <i2c_ksdk_transfer>:
	return flags;
}

static int i2c_ksdk_transfer(struct device *dev, struct i2c_msg *msgs,
		uint8_t num_msgs, uint16_t addr)
{
    18cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    18d0:	b087      	sub	sp, #28
    18d2:	af00      	add	r7, sp, #0
    18d4:	460d      	mov	r5, r1
    18d6:	4691      	mov	r9, r2
    18d8:	469b      	mov	fp, r3
	I2C_Type *base = DEV_BASE(dev);
    18da:	6803      	ldr	r3, [r0, #0]
    18dc:	689b      	ldr	r3, [r3, #8]
    18de:	f8d3 a000 	ldr.w	sl, [r3]
	struct i2c_ksdk_data *data = DEV_DATA(dev);
    18e2:	6886      	ldr	r6, [r0, #8]
	i2c_master_transfer_t transfer;
	status_t status;

	/* Iterate over all the messages */
	for (int i = 0; i < num_msgs; i++) {
    18e4:	f04f 0800 	mov.w	r8, #0
    18e8:	e021      	b.n	192e <i2c_ksdk_transfer+0x62>

		/* Initialize the transfer descriptor */
		transfer.flags = i2c_ksdk_convert_flags(msgs->flags);
    18ea:	7a2c      	ldrb	r4, [r5, #8]
    18ec:	4620      	mov	r0, r4
    18ee:	f7ff ff55 	bl	179c <i2c_ksdk_convert_flags>
    18f2:	6038      	str	r0, [r7, #0]
		transfer.slaveAddress = addr;
    18f4:	f887 b004 	strb.w	fp, [r7, #4]
		transfer.direction = (msgs->flags & I2C_MSG_READ)
			? kI2C_Read : kI2C_Write;
    18f8:	f004 0401 	and.w	r4, r4, #1
	for (int i = 0; i < num_msgs; i++) {

		/* Initialize the transfer descriptor */
		transfer.flags = i2c_ksdk_convert_flags(msgs->flags);
		transfer.slaveAddress = addr;
		transfer.direction = (msgs->flags & I2C_MSG_READ)
    18fc:	717c      	strb	r4, [r7, #5]
			? kI2C_Read : kI2C_Write;
		transfer.subaddress = 0;
    18fe:	2300      	movs	r3, #0
    1900:	60bb      	str	r3, [r7, #8]
		transfer.subaddressSize = 0;
    1902:	733b      	strb	r3, [r7, #12]
		transfer.data = msgs->buf;
    1904:	682b      	ldr	r3, [r5, #0]
    1906:	613b      	str	r3, [r7, #16]
		transfer.dataSize = msgs->len;
    1908:	686b      	ldr	r3, [r5, #4]
    190a:	617b      	str	r3, [r7, #20]

		/* Start the transfer */
		status = I2C_MasterTransferNonBlocking(base,
    190c:	463a      	mov	r2, r7
    190e:	4631      	mov	r1, r6
    1910:	4650      	mov	r0, sl
    1912:	f001 fd8f 	bl	3434 <I2C_MasterTransferNonBlocking>
				&data->handle, &transfer);

		/* Return an error if the transfer didn't start successfully
		 * e.g., if the bus was busy
		 */
		if (status != kStatus_Success) {
    1916:	b970      	cbnz	r0, 1936 <i2c_ksdk_transfer+0x6a>
 *
 * @sa TICKS_NONE, TICKS_UNLIMITED
 */
static inline int nano_sem_take(struct nano_sem *sem, int32_t timeout_in_ticks)
{
	return k_sem_take((struct k_sem *)sem, _ticks_to_ms(timeout_in_ticks))
    1918:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    191c:	f106 0028 	add.w	r0, r6, #40	; 0x28
    1920:	f002 fe56 	bl	45d0 <k_sem_take>
		device_sync_call_wait(&data->sync);

		/* Return an error if the transfer didn't complete
		 * successfully. e.g., nak, timeout, lost arbitration
		 */
		if (data->callback_status != kStatus_Success) {
    1924:	6bb3      	ldr	r3, [r6, #56]	; 0x38
    1926:	b94b      	cbnz	r3, 193c <i2c_ksdk_transfer+0x70>
			return -EIO;
		}

		/* Move to the next message */
		msgs++;
    1928:	350c      	adds	r5, #12
	struct i2c_ksdk_data *data = DEV_DATA(dev);
	i2c_master_transfer_t transfer;
	status_t status;

	/* Iterate over all the messages */
	for (int i = 0; i < num_msgs; i++) {
    192a:	f108 0801 	add.w	r8, r8, #1
    192e:	45c8      	cmp	r8, r9
    1930:	dbdb      	blt.n	18ea <i2c_ksdk_transfer+0x1e>

		/* Move to the next message */
		msgs++;
	}

	return 0;
    1932:	2000      	movs	r0, #0
    1934:	e004      	b.n	1940 <i2c_ksdk_transfer+0x74>

		/* Return an error if the transfer didn't start successfully
		 * e.g., if the bus was busy
		 */
		if (status != kStatus_Success) {
			return -EIO;
    1936:	f06f 0004 	mvn.w	r0, #4
    193a:	e001      	b.n	1940 <i2c_ksdk_transfer+0x74>

		/* Return an error if the transfer didn't complete
		 * successfully. e.g., nak, timeout, lost arbitration
		 */
		if (data->callback_status != kStatus_Success) {
			return -EIO;
    193c:	f06f 0004 	mvn.w	r0, #4
		/* Move to the next message */
		msgs++;
	}

	return 0;
}
    1940:	371c      	adds	r7, #28
    1942:	46bd      	mov	sp, r7
    1944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00001948 <_fsl_k64_get_port_addr>:
#else
#define config_port_e(addr) -EACCES
#endif

static int _fsl_k64_get_port_addr(uint8_t pin_id, mem_addr_t *port_addr_ptr)
{
    1948:	b480      	push	{r7}
    194a:	af00      	add	r7, sp, #0

	/* determine the port base address associated with the
	 * pin identifier
	 */

	if (pin_id < K64_PIN_PTB0) {		/* Port A pin */
    194c:	281f      	cmp	r0, #31
    194e:	d802      	bhi.n	1956 <_fsl_k64_get_port_addr+0xe>
#define PIN_FROM_ID(pin_id)	(pin_id % K64_PINMUX_NUM_PINS)

#ifdef CONFIG_GPIO_K64_A
static inline int config_port_a(mem_addr_t *addr)
{
	*addr = PORT_K64_A_BASE_ADDR;
    1950:	4b0c      	ldr	r3, [pc, #48]	; (1984 <_fsl_k64_get_port_addr+0x3c>)
    1952:	600b      	str	r3, [r1, #0]
	 * pin identifier
	 */

	if (pin_id < K64_PIN_PTB0) {		/* Port A pin */

		return config_port_a(port_addr_ptr);
    1954:	e011      	b.n	197a <_fsl_k64_get_port_addr+0x32>

	} else if (pin_id < K64_PIN_PTC0) {	/* Port B pin */
    1956:	283f      	cmp	r0, #63	; 0x3f
    1958:	d802      	bhi.n	1960 <_fsl_k64_get_port_addr+0x18>
#endif

#ifdef CONFIG_GPIO_K64_B
static inline int config_port_b(mem_addr_t *addr)
{
	*addr = PORT_K64_B_BASE_ADDR;
    195a:	4b0b      	ldr	r3, [pc, #44]	; (1988 <_fsl_k64_get_port_addr+0x40>)
    195c:	600b      	str	r3, [r1, #0]

		return config_port_a(port_addr_ptr);

	} else if (pin_id < K64_PIN_PTC0) {	/* Port B pin */

		return config_port_b(port_addr_ptr);
    195e:	e00c      	b.n	197a <_fsl_k64_get_port_addr+0x32>

	} else if (pin_id < K64_PIN_PTD0) {	/* Port C pin */
    1960:	285f      	cmp	r0, #95	; 0x5f
    1962:	d802      	bhi.n	196a <_fsl_k64_get_port_addr+0x22>
#endif

#ifdef CONFIG_GPIO_K64_C
static inline int config_port_c(mem_addr_t *addr)
{
	*addr = PORT_K64_C_BASE_ADDR;
    1964:	4b09      	ldr	r3, [pc, #36]	; (198c <_fsl_k64_get_port_addr+0x44>)
    1966:	600b      	str	r3, [r1, #0]

		return config_port_b(port_addr_ptr);

	} else if (pin_id < K64_PIN_PTD0) {	/* Port C pin */

		return config_port_c(port_addr_ptr);
    1968:	e007      	b.n	197a <_fsl_k64_get_port_addr+0x32>

	} else if (pin_id < K64_PIN_PTE0) {	/* Port D pin */
    196a:	f010 0f80 	tst.w	r0, #128	; 0x80
    196e:	d102      	bne.n	1976 <_fsl_k64_get_port_addr+0x2e>
#endif

#ifdef CONFIG_GPIO_K64_D
static inline int config_port_d(mem_addr_t *addr)
{
	*addr = PORT_K64_D_BASE_ADDR;
    1970:	4b07      	ldr	r3, [pc, #28]	; (1990 <_fsl_k64_get_port_addr+0x48>)
    1972:	600b      	str	r3, [r1, #0]

		return config_port_c(port_addr_ptr);

	} else if (pin_id < K64_PIN_PTE0) {	/* Port D pin */

		return config_port_d(port_addr_ptr);
    1974:	e001      	b.n	197a <_fsl_k64_get_port_addr+0x32>
#endif

#ifdef CONFIG_GPIO_K64_E
static inline int config_port_e(mem_addr_t *addr)
{
	*addr = PORT_K64_E_BASE_ADDR;
    1976:	4b07      	ldr	r3, [pc, #28]	; (1994 <_fsl_k64_get_port_addr+0x4c>)
    1978:	600b      	str	r3, [r1, #0]

		return config_port_e(port_addr_ptr);

	}

}
    197a:	2000      	movs	r0, #0
    197c:	46bd      	mov	sp, r7
    197e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1982:	4770      	bx	lr
    1984:	40049000 	.word	0x40049000
    1988:	4004a000 	.word	0x4004a000
    198c:	4004b000 	.word	0x4004b000
    1990:	4004c000 	.word	0x4004c000
    1994:	4004d000 	.word	0x4004d000

00001998 <_fsl_k64_set_pin>:
{
	mem_addr_t port_base_addr;
	uint8_t port_pin;
	uint32_t status;

	if (pin_id >= PINMUX_NUM_PINS) {
    1998:	289f      	cmp	r0, #159	; 0x9f
    199a:	d811      	bhi.n	19c0 <_fsl_k64_set_pin+0x28>
	}

}

int _fsl_k64_set_pin(uint32_t pin_id, uint32_t func)
{
    199c:	b5b0      	push	{r4, r5, r7, lr}
    199e:	b082      	sub	sp, #8
    19a0:	af00      	add	r7, sp, #0
    19a2:	460d      	mov	r5, r1
	if (pin_id >= PINMUX_NUM_PINS) {
		return -ENOTSUP;
	}

	/* determine the pin's port register base address */
	status = _fsl_k64_get_port_addr(pin_id, &port_base_addr);
    19a4:	b2c4      	uxtb	r4, r0
    19a6:	1d39      	adds	r1, r7, #4
    19a8:	4620      	mov	r0, r4
    19aa:	f7ff ffcd 	bl	1948 <_fsl_k64_get_port_addr>

	if (status != 0) {
    19ae:	4603      	mov	r3, r0
    19b0:	b950      	cbnz	r0, 19c8 <_fsl_k64_set_pin+0x30>
		return status;
	}

	/* extract the pin number within its port */
	port_pin = PIN_FROM_ID(pin_id);
    19b2:	f004 041f 	and.w	r4, r4, #31

	/* set pin function and control settings */
	sys_write32(func, port_base_addr + K64_PINMUX_CTRL_OFFSET(port_pin));
    19b6:	687b      	ldr	r3, [r7, #4]
    19b8:	f843 5024 	str.w	r5, [r3, r4, lsl #2]

	return 0;
    19bc:	2300      	movs	r3, #0
    19be:	e003      	b.n	19c8 <_fsl_k64_set_pin+0x30>
	mem_addr_t port_base_addr;
	uint8_t port_pin;
	uint32_t status;

	if (pin_id >= PINMUX_NUM_PINS) {
		return -ENOTSUP;
    19c0:	f06f 0322 	mvn.w	r3, #34	; 0x22

	/* set pin function and control settings */
	sys_write32(func, port_base_addr + K64_PINMUX_CTRL_OFFSET(port_pin));

	return 0;
}
    19c4:	4618      	mov	r0, r3
    19c6:	4770      	bx	lr
    19c8:	4618      	mov	r0, r3
    19ca:	3708      	adds	r7, #8
    19cc:	46bd      	mov	sp, r7
    19ce:	bdb0      	pop	{r4, r5, r7, pc}

000019d0 <fsl_frdm_k64f_pin_init>:
	{ K64_PIN_PTC19, K64_PINMUX_FUNC_ETHERNET},
#endif
};

static int fsl_frdm_k64f_pin_init(struct device *arg)
{
    19d0:	b598      	push	{r3, r4, r7, lr}
    19d2:	af00      	add	r7, sp, #0
	ARG_UNUSED(arg);

	/* configure the pins from the default mapping above */
	for (int i = 0; i < ARRAY_SIZE(mux_config); i++) {
    19d4:	2400      	movs	r4, #0
    19d6:	e008      	b.n	19ea <fsl_frdm_k64f_pin_init+0x1a>
		_fsl_k64_set_pin(mux_config[i].pin_num, mux_config[i].mode);
    19d8:	4b06      	ldr	r3, [pc, #24]	; (19f4 <fsl_frdm_k64f_pin_init+0x24>)
    19da:	eb03 02c4 	add.w	r2, r3, r4, lsl #3
    19de:	6851      	ldr	r1, [r2, #4]
    19e0:	f813 0034 	ldrb.w	r0, [r3, r4, lsl #3]
    19e4:	f7ff ffd8 	bl	1998 <_fsl_k64_set_pin>
static int fsl_frdm_k64f_pin_init(struct device *arg)
{
	ARG_UNUSED(arg);

	/* configure the pins from the default mapping above */
	for (int i = 0; i < ARRAY_SIZE(mux_config); i++) {
    19e8:	3401      	adds	r4, #1
    19ea:	2c17      	cmp	r4, #23
    19ec:	d9f4      	bls.n	19d8 <fsl_frdm_k64f_pin_init+0x8>
		_fsl_k64_set_pin(mux_config[i].pin_num, mux_config[i].mode);
	}

	return 0;
}
    19ee:	2000      	movs	r0, #0
    19f0:	bd98      	pop	{r3, r4, r7, pc}
    19f2:	bf00      	nop
    19f4:	000051e8 	.word	0x000051e8

000019f8 <printf>:

	return r;
}

int printf(const char *_Restrict format, ...)
{
    19f8:	b40f      	push	{r0, r1, r2, r3}
    19fa:	b580      	push	{r7, lr}
    19fc:	b082      	sub	sp, #8
    19fe:	af00      	add	r7, sp, #0
    1a00:	f107 0310 	add.w	r3, r7, #16
    1a04:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list vargs;
	int     r;

	va_start(vargs, format);
    1a08:	607b      	str	r3, [r7, #4]
	r = _prf(fputc, DESC(stdout), format, vargs);
    1a0a:	2102      	movs	r1, #2
    1a0c:	4804      	ldr	r0, [pc, #16]	; (1a20 <printf+0x28>)
    1a0e:	f000 fb0f 	bl	2030 <_prf>
	va_end(vargs);

	return r;
}
    1a12:	3708      	adds	r7, #8
    1a14:	46bd      	mov	sp, r7
    1a16:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    1a1a:	b004      	add	sp, #16
    1a1c:	4770      	bx	lr
    1a1e:	bf00      	nop
    1a20:	000025b1 	.word	0x000025b1

00001a24 <_uc>:
#ifndef EOF
#define EOF  -1
#endif

static void _uc(char *buf)
{
    1a24:	b480      	push	{r7}
    1a26:	af00      	add	r7, sp, #0
	for (/**/; *buf; buf++) {
    1a28:	e007      	b.n	1a3a <_uc+0x16>
		if (*buf >= 'a' && *buf <= 'z') {
    1a2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
    1a2e:	b2d2      	uxtb	r2, r2
    1a30:	2a19      	cmp	r2, #25
    1a32:	d801      	bhi.n	1a38 <_uc+0x14>
			*buf += 'A' - 'a';
    1a34:	3b20      	subs	r3, #32
    1a36:	7003      	strb	r3, [r0, #0]
#define EOF  -1
#endif

static void _uc(char *buf)
{
	for (/**/; *buf; buf++) {
    1a38:	3001      	adds	r0, #1
    1a3a:	7803      	ldrb	r3, [r0, #0]
    1a3c:	2b00      	cmp	r3, #0
    1a3e:	d1f4      	bne.n	1a2a <_uc+0x6>
		if (*buf >= 'a' && *buf <= 'z') {
			*buf += 'A' - 'a';
		}
	}
}
    1a40:	46bd      	mov	sp, r7
    1a42:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a46:	4770      	bx	lr

00001a48 <_reverse_and_pad>:

/* Convention note: "end" as passed in is the standard "byte after
 * last character" style, but...
 */
static int _reverse_and_pad(char *start, char *end, int minlen)
{
    1a48:	4603      	mov	r3, r0
	int len;

	while (end - start < minlen) {
    1a4a:	e002      	b.n	1a52 <_reverse_and_pad+0xa>
		*end++ = '0';
    1a4c:	2030      	movs	r0, #48	; 0x30
    1a4e:	7008      	strb	r0, [r1, #0]
    1a50:	3101      	adds	r1, #1
 */
static int _reverse_and_pad(char *start, char *end, int minlen)
{
	int len;

	while (end - start < minlen) {
    1a52:	1ac8      	subs	r0, r1, r3
    1a54:	4290      	cmp	r0, r2
    1a56:	dbf9      	blt.n	1a4c <_reverse_and_pad+0x4>

/* Convention note: "end" as passed in is the standard "byte after
 * last character" style, but...
 */
static int _reverse_and_pad(char *start, char *end, int minlen)
{
    1a58:	b490      	push	{r4, r7}
    1a5a:	af00      	add	r7, sp, #0

	while (end - start < minlen) {
		*end++ = '0';
	}

	*end = 0;
    1a5c:	2200      	movs	r2, #0
    1a5e:	f801 2901 	strb.w	r2, [r1], #-1
	len = end - start;
	for (end--; end > start; end--, start++) {
    1a62:	e005      	b.n	1a70 <_reverse_and_pad+0x28>
		char tmp = *end;
    1a64:	780a      	ldrb	r2, [r1, #0]
		*end = *start;
    1a66:	781c      	ldrb	r4, [r3, #0]
    1a68:	f801 4901 	strb.w	r4, [r1], #-1
		*start = tmp;
    1a6c:	f803 2b01 	strb.w	r2, [r3], #1
		*end++ = '0';
	}

	*end = 0;
	len = end - start;
	for (end--; end > start; end--, start++) {
    1a70:	428b      	cmp	r3, r1
    1a72:	d3f7      	bcc.n	1a64 <_reverse_and_pad+0x1c>
		char tmp = *end;
		*end = *start;
		*start = tmp;
	}
	return len;
}
    1a74:	46bd      	mov	sp, r7
    1a76:	bc90      	pop	{r4, r7}
    1a78:	4770      	bx	lr
    1a7a:	bf00      	nop

00001a7c <_to_x>:
/* Writes the specified number into the buffer in the given base,
 * using the digit characters 0-9a-z (i.e. base>36 will start writing
 * odd bytes), padding with leading zeros up to the minimum length.
 */
static int _to_x(char *buf, uint32_t n, int base, int minlen)
{
    1a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a7e:	af00      	add	r7, sp, #0
    1a80:	4606      	mov	r6, r0
	char *buf0 = buf;

	do {
		int d = n % base;
    1a82:	fbb1 f5f2 	udiv	r5, r1, r2
    1a86:	fb02 1e15 	mls	lr, r2, r5, r1

		n /= base;
    1a8a:	4629      	mov	r1, r5
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
    1a8c:	f106 0c01 	add.w	ip, r6, #1
    1a90:	fa5f f48e 	uxtb.w	r4, lr
    1a94:	f1be 0f09 	cmp.w	lr, #9
    1a98:	dd02      	ble.n	1aa0 <_to_x+0x24>
    1a9a:	f04f 0e27 	mov.w	lr, #39	; 0x27
    1a9e:	e001      	b.n	1aa4 <_to_x+0x28>
    1aa0:	f04f 0e00 	mov.w	lr, #0
    1aa4:	4474      	add	r4, lr
    1aa6:	3430      	adds	r4, #48	; 0x30
    1aa8:	7034      	strb	r4, [r6, #0]
    1aaa:	4666      	mov	r6, ip
	} while (n);
    1aac:	2d00      	cmp	r5, #0
    1aae:	d1e8      	bne.n	1a82 <_to_x+0x6>
	return _reverse_and_pad(buf0, buf, minlen);
    1ab0:	461a      	mov	r2, r3
    1ab2:	4661      	mov	r1, ip
    1ab4:	f7ff ffc8 	bl	1a48 <_reverse_and_pad>
}
    1ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aba:	bf00      	nop

00001abc <_to_hex>:

static int _to_hex(char *buf, uint32_t value,
		   int alt_form, int precision, int prefix)
{
    1abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1abe:	af00      	add	r7, sp, #0
    1ac0:	4605      	mov	r5, r0
	int len;
	char *buf0 = buf;

	if (alt_form) {
    1ac2:	b132      	cbz	r2, 1ad2 <_to_hex+0x16>
		*buf++ = '0';
    1ac4:	4604      	mov	r4, r0
    1ac6:	2230      	movs	r2, #48	; 0x30
    1ac8:	f804 2b02 	strb.w	r2, [r4], #2
		*buf++ = 'x';
    1acc:	2278      	movs	r2, #120	; 0x78
    1ace:	7042      	strb	r2, [r0, #1]
    1ad0:	e000      	b.n	1ad4 <_to_hex+0x18>
    1ad2:	4604      	mov	r4, r0
	}

	len = _to_x(buf, value, 16, precision);
    1ad4:	2210      	movs	r2, #16
    1ad6:	4620      	mov	r0, r4
    1ad8:	f7ff ffd0 	bl	1a7c <_to_x>
    1adc:	4606      	mov	r6, r0
	if (prefix == 'X') {
    1ade:	69bb      	ldr	r3, [r7, #24]
    1ae0:	2b58      	cmp	r3, #88	; 0x58
    1ae2:	d102      	bne.n	1aea <_to_hex+0x2e>
		_uc(buf0);
    1ae4:	4628      	mov	r0, r5
    1ae6:	f7ff ff9d 	bl	1a24 <_uc>
	}

	return len + (buf - buf0);
    1aea:	1b60      	subs	r0, r4, r5
}
    1aec:	4430      	add	r0, r6
    1aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001af0 <_to_octal>:

static int _to_octal(char *buf, uint32_t value, int alt_form, int precision)
{
    1af0:	b5b0      	push	{r4, r5, r7, lr}
    1af2:	af00      	add	r7, sp, #0
	char *buf0 = buf;

	if (alt_form) {
    1af4:	b13a      	cbz	r2, 1b06 <_to_octal+0x16>
		*buf++ = '0';
    1af6:	1c45      	adds	r5, r0, #1
    1af8:	2230      	movs	r2, #48	; 0x30
    1afa:	7002      	strb	r2, [r0, #0]
		if (!value) {
    1afc:	b921      	cbnz	r1, 1b08 <_to_octal+0x18>
			/* So we don't return "00" for a value == 0. */
			*buf++ = 0;
    1afe:	2300      	movs	r3, #0
    1b00:	7043      	strb	r3, [r0, #1]
			return 1;
    1b02:	2001      	movs	r0, #1
    1b04:	bdb0      	pop	{r4, r5, r7, pc}
    1b06:	4605      	mov	r5, r0
		}
	}
	return (buf - buf0) + _to_x(buf, value, 8, precision);
    1b08:	1a2c      	subs	r4, r5, r0
    1b0a:	2208      	movs	r2, #8
    1b0c:	4628      	mov	r0, r5
    1b0e:	f7ff ffb5 	bl	1a7c <_to_x>
    1b12:	4420      	add	r0, r4
}
    1b14:	bdb0      	pop	{r4, r5, r7, pc}
    1b16:	bf00      	nop

00001b18 <_to_udec>:

static int _to_udec(char *buf, uint32_t value, int precision)
{
    1b18:	b580      	push	{r7, lr}
    1b1a:	af00      	add	r7, sp, #0
	return _to_x(buf, value, 10, precision);
    1b1c:	4613      	mov	r3, r2
    1b1e:	220a      	movs	r2, #10
    1b20:	f7ff ffac 	bl	1a7c <_to_x>
}
    1b24:	bd80      	pop	{r7, pc}
    1b26:	bf00      	nop

00001b28 <_to_dec>:

static int _to_dec(char *buf, int32_t value, int fplus, int fspace, int precision)
{
    1b28:	b5b0      	push	{r4, r5, r7, lr}
    1b2a:	af00      	add	r7, sp, #0
    1b2c:	4605      	mov	r5, r0

#if (MAXFLD < 10)
  #error buffer size MAXFLD is too small
#endif

	if (value < 0) {
    1b2e:	2900      	cmp	r1, #0
    1b30:	da07      	bge.n	1b42 <_to_dec+0x1a>
		*buf++ = '-';
    1b32:	1c44      	adds	r4, r0, #1
    1b34:	232d      	movs	r3, #45	; 0x2d
    1b36:	7003      	strb	r3, [r0, #0]
		if (value != 0x80000000)
    1b38:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    1b3c:	d00c      	beq.n	1b58 <_to_dec+0x30>
			value = -value;
    1b3e:	4249      	negs	r1, r1
    1b40:	e00a      	b.n	1b58 <_to_dec+0x30>
	} else if (fplus)
    1b42:	b11a      	cbz	r2, 1b4c <_to_dec+0x24>
		*buf++ = '+';
    1b44:	1c44      	adds	r4, r0, #1
    1b46:	232b      	movs	r3, #43	; 0x2b
    1b48:	7003      	strb	r3, [r0, #0]
    1b4a:	e005      	b.n	1b58 <_to_dec+0x30>
	else if (fspace)
    1b4c:	b11b      	cbz	r3, 1b56 <_to_dec+0x2e>
		*buf++ = ' ';
    1b4e:	1c44      	adds	r4, r0, #1
    1b50:	2320      	movs	r3, #32
    1b52:	7003      	strb	r3, [r0, #0]
    1b54:	e000      	b.n	1b58 <_to_dec+0x30>
    1b56:	4604      	mov	r4, r0

	return (buf + _to_udec(buf, (uint32_t) value, precision)) - start;
    1b58:	693a      	ldr	r2, [r7, #16]
    1b5a:	4620      	mov	r0, r4
    1b5c:	f7ff ffdc 	bl	1b18 <_to_udec>
    1b60:	4420      	add	r0, r4
}
    1b62:	1b40      	subs	r0, r0, r5
    1b64:	bdb0      	pop	{r4, r5, r7, pc}
    1b66:	bf00      	nop

00001b68 <_rlrshift>:

static	void _rlrshift(uint64_t *v)
{
    1b68:	b4b0      	push	{r4, r5, r7}
    1b6a:	af00      	add	r7, sp, #0
	*v = (*v & 1) + (*v >> 1);
    1b6c:	e9d0 2300 	ldrd	r2, r3, [r0]
    1b70:	f002 0401 	and.w	r4, r2, #1
    1b74:	2500      	movs	r5, #0
    1b76:	085b      	lsrs	r3, r3, #1
    1b78:	ea4f 0232 	mov.w	r2, r2, rrx
    1b7c:	1912      	adds	r2, r2, r4
    1b7e:	416b      	adcs	r3, r5
    1b80:	e9c0 2300 	strd	r2, r3, [r0]
}
    1b84:	46bd      	mov	sp, r7
    1b86:	bcb0      	pop	{r4, r5, r7}
    1b88:	4770      	bx	lr
    1b8a:	bf00      	nop

00001b8c <_ldiv5>:
 * six.  This was tested exhaustively through the first ~10B values in
 * the input space, and for ~2e12 (4 hours runtime) random inputs
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
    1b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b90:	af00      	add	r7, sp, #0
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
    1b92:	e9d0 8900 	ldrd	r8, r9, [r0]
	static const char shifts[] = { 32, 3, 0 };

	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;
    1b96:	f118 0802 	adds.w	r8, r8, #2
    1b9a:	f149 0900 	adc.w	r9, r9, #0
 * taken from the full 64 bit space.
 */
static void _ldiv5(uint64_t *v)
{
	uint32_t i, hi;
	uint64_t rem = *v, quot = 0, q;
    1b9e:	f04f 0a00 	mov.w	sl, #0
    1ba2:	f04f 0b00 	mov.w	fp, #0
	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;

	for (i = 0; i < 3; i++) {
    1ba6:	2100      	movs	r1, #0
    1ba8:	e02c      	b.n	1c04 <_ldiv5+0x78>
		hi = rem >> shifts[i];
    1baa:	4b19      	ldr	r3, [pc, #100]	; (1c10 <_ldiv5+0x84>)
    1bac:	5c5a      	ldrb	r2, [r3, r1]
    1bae:	f1c2 0e20 	rsb	lr, r2, #32
    1bb2:	f1a2 0620 	sub.w	r6, r2, #32
    1bb6:	fa28 f302 	lsr.w	r3, r8, r2
    1bba:	fa09 fe0e 	lsl.w	lr, r9, lr
    1bbe:	ea43 030e 	orr.w	r3, r3, lr
    1bc2:	fa29 f606 	lsr.w	r6, r9, r6
    1bc6:	4333      	orrs	r3, r6
		q = (uint64_t)(hi / 5) << shifts[i];
    1bc8:	4e12      	ldr	r6, [pc, #72]	; (1c14 <_ldiv5+0x88>)
    1bca:	fba6 6303 	umull	r6, r3, r6, r3
    1bce:	089b      	lsrs	r3, r3, #2
    1bd0:	f1a2 0e20 	sub.w	lr, r2, #32
    1bd4:	f1c2 0620 	rsb	r6, r2, #32
    1bd8:	fa03 f50e 	lsl.w	r5, r3, lr
    1bdc:	fa23 f606 	lsr.w	r6, r3, r6
    1be0:	4335      	orrs	r5, r6
    1be2:	fa03 f402 	lsl.w	r4, r3, r2
		rem -= q * 5;
    1be6:	00ae      	lsls	r6, r5, #2
    1be8:	00a2      	lsls	r2, r4, #2
    1bea:	ea46 7394 	orr.w	r3, r6, r4, lsr #30
    1bee:	1912      	adds	r2, r2, r4
    1bf0:	416b      	adcs	r3, r5
    1bf2:	ebb8 0802 	subs.w	r8, r8, r2
    1bf6:	eb69 0903 	sbc.w	r9, r9, r3
		quot += q;
    1bfa:	eb1a 0a04 	adds.w	sl, sl, r4
    1bfe:	eb4b 0b05 	adc.w	fp, fp, r5
	/* Usage in this file wants rounded behavior, not truncation.  So add
	 * two to get the threshold right.
	 */
	rem += 2;

	for (i = 0; i < 3; i++) {
    1c02:	3101      	adds	r1, #1
    1c04:	2902      	cmp	r1, #2
    1c06:	d9d0      	bls.n	1baa <_ldiv5+0x1e>
		q = (uint64_t)(hi / 5) << shifts[i];
		rem -= q * 5;
		quot += q;
	}

	*v = quot;
    1c08:	e9c0 ab00 	strd	sl, fp, [r0]
    1c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c10:	000052a8 	.word	0x000052a8
    1c14:	cccccccd 	.word	0xcccccccd

00001c18 <_get_digit>:

static	char _get_digit(uint64_t *fr, int *digit_count)
{
	int		rval;

	if (*digit_count > 0) {
    1c18:	680b      	ldr	r3, [r1, #0]
    1c1a:	2b00      	cmp	r3, #0
    1c1c:	dd15      	ble.n	1c4a <_get_digit+0x32>

	*v = quot;
}

static	char _get_digit(uint64_t *fr, int *digit_count)
{
    1c1e:	b4b0      	push	{r4, r5, r7}
    1c20:	af00      	add	r7, sp, #0
	int		rval;

	if (*digit_count > 0) {
		*digit_count -= 1;
    1c22:	3b01      	subs	r3, #1
    1c24:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10;
    1c26:	e9d0 2300 	ldrd	r2, r3, [r0]
    1c2a:	1894      	adds	r4, r2, r2
    1c2c:	eb43 0503 	adc.w	r5, r3, r3
    1c30:	00ab      	lsls	r3, r5, #2
    1c32:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
    1c36:	00a2      	lsls	r2, r4, #2
    1c38:	1912      	adds	r2, r2, r4
    1c3a:	416b      	adcs	r3, r5
		rval = ((*fr >> 60) & 0xF) + '0';
    1c3c:	0f19      	lsrs	r1, r3, #28
    1c3e:	3130      	adds	r1, #48	; 0x30
		*fr &= 0x0FFFFFFFFFFFFFFFull;
    1c40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    1c44:	e9c0 2300 	strd	r2, r3, [r0]
    1c48:	e002      	b.n	1c50 <_get_digit+0x38>
	} else
		rval = '0';
    1c4a:	2130      	movs	r1, #48	; 0x30
	return (char) (rval);
}
    1c4c:	b2c8      	uxtb	r0, r1
    1c4e:	4770      	bx	lr
    1c50:	b2c8      	uxtb	r0, r1
    1c52:	46bd      	mov	sp, r7
    1c54:	bcb0      	pop	{r4, r5, r7}
    1c56:	4770      	bx	lr

00001c58 <_to_float>:
#define	MAXFP1	0xFFFFFFFF	/* Largest # if first fp format */
#define HIGHBIT64 (1ull<<63)

static int _to_float(char *buf, uint64_t double_temp, int c,
					 int falt, int fplus, int fspace, int precision)
{
    1c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c5c:	b08d      	sub	sp, #52	; 0x34
    1c5e:	af00      	add	r7, sp, #0
    1c60:	4696      	mov	lr, r2
    1c62:	4619      	mov	r1, r3
	uint64_t        fract;
	uint64_t        ltemp;
	int             prune_zero;
	char           *start = buf;

	exp = double_temp >> 52 & 0x7ff;
    1c64:	f3c3 560a 	ubfx	r6, r3, #20, #11
	fract = (double_temp << 11) & ~HIGHBIT64;
    1c68:	02cb      	lsls	r3, r1, #11
    1c6a:	ea43 535e 	orr.w	r3, r3, lr, lsr #21
    1c6e:	ea4f 22ce 	mov.w	r2, lr, lsl #11
    1c72:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1c76:	e9c7 2308 	strd	r2, r3, [r7, #32]
	sign = !!(double_temp & HIGHBIT64);
    1c7a:	f8c7 e010 	str.w	lr, [r7, #16]
    1c7e:	6179      	str	r1, [r7, #20]


	if (exp == 0x7ff) {
    1c80:	f240 71ff 	movw	r1, #2047	; 0x7ff
    1c84:	428e      	cmp	r6, r1
    1c86:	d11d      	bne.n	1cc4 <_to_float+0x6c>
		if (!fract) {
    1c88:	4313      	orrs	r3, r2
    1c8a:	d111      	bne.n	1cb0 <_to_float+0x58>
			*buf++ = sign ? '-' : '+';
    1c8c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    1c90:	2b00      	cmp	r3, #0
    1c92:	f174 0300 	sbcs.w	r3, r4, #0
    1c96:	da01      	bge.n	1c9c <_to_float+0x44>
    1c98:	232d      	movs	r3, #45	; 0x2d
    1c9a:	e000      	b.n	1c9e <_to_float+0x46>
    1c9c:	232b      	movs	r3, #43	; 0x2b
    1c9e:	7003      	strb	r3, [r0, #0]
			*buf++ = 'I';
    1ca0:	2349      	movs	r3, #73	; 0x49
    1ca2:	7043      	strb	r3, [r0, #1]
			*buf++ = 'N';
    1ca4:	234e      	movs	r3, #78	; 0x4e
    1ca6:	7083      	strb	r3, [r0, #2]
			*buf++ = 'F';
    1ca8:	1d05      	adds	r5, r0, #4
    1caa:	2346      	movs	r3, #70	; 0x46
    1cac:	70c3      	strb	r3, [r0, #3]
    1cae:	e005      	b.n	1cbc <_to_float+0x64>
		} else {
			*buf++ = 'N';
    1cb0:	234e      	movs	r3, #78	; 0x4e
    1cb2:	7003      	strb	r3, [r0, #0]
			*buf++ = 'a';
    1cb4:	2261      	movs	r2, #97	; 0x61
    1cb6:	7042      	strb	r2, [r0, #1]
			*buf++ = 'N';
    1cb8:	1cc5      	adds	r5, r0, #3
    1cba:	7083      	strb	r3, [r0, #2]
		}
		*buf = 0;
    1cbc:	2300      	movs	r3, #0
    1cbe:	702b      	strb	r3, [r5, #0]
		return buf - start;
    1cc0:	1a28      	subs	r0, r5, r0
    1cc2:	e197      	b.n	1ff4 <_to_float+0x39c>
	}

	if ((exp | fract) != 0) {
    1cc4:	ea42 0806 	orr.w	r8, r2, r6
    1cc8:	ea43 79e6 	orr.w	r9, r3, r6, asr #31
    1ccc:	ea58 0109 	orrs.w	r1, r8, r9
    1cd0:	d007      	beq.n	1ce2 <_to_float+0x8a>
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    1cd2:	f2a6 36fe 	subw	r6, r6, #1022	; 0x3fe
		fract |= HIGHBIT64;
    1cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1cda:	e9c7 2308 	strd	r2, r3, [r7, #32]
		decexp = true;		/* Wasn't zero */
    1cde:	2301      	movs	r3, #1
    1ce0:	e000      	b.n	1ce4 <_to_float+0x8c>
	} else
		decexp = false;		/* It was zero */
    1ce2:	2300      	movs	r3, #0

	if (decexp && sign) {
    1ce4:	b153      	cbz	r3, 1cfc <_to_float+0xa4>
    1ce6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
    1cea:	2a00      	cmp	r2, #0
    1cec:	f173 0300 	sbcs.w	r3, r3, #0
    1cf0:	da04      	bge.n	1cfc <_to_float+0xa4>
		*buf++ = '-';
    1cf2:	1c43      	adds	r3, r0, #1
    1cf4:	613b      	str	r3, [r7, #16]
    1cf6:	232d      	movs	r3, #45	; 0x2d
    1cf8:	7003      	strb	r3, [r0, #0]
    1cfa:	e00e      	b.n	1d1a <_to_float+0xc2>
	} else if (fplus) {
    1cfc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1cfe:	b123      	cbz	r3, 1d0a <_to_float+0xb2>
		*buf++ = '+';
    1d00:	1c43      	adds	r3, r0, #1
    1d02:	613b      	str	r3, [r7, #16]
    1d04:	232b      	movs	r3, #43	; 0x2b
    1d06:	7003      	strb	r3, [r0, #0]
    1d08:	e007      	b.n	1d1a <_to_float+0xc2>
	} else if (fspace) {
    1d0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    1d0c:	b123      	cbz	r3, 1d18 <_to_float+0xc0>
		*buf++ = ' ';
    1d0e:	1c43      	adds	r3, r0, #1
    1d10:	613b      	str	r3, [r7, #16]
    1d12:	2320      	movs	r3, #32
    1d14:	7003      	strb	r3, [r0, #0]
    1d16:	e000      	b.n	1d1a <_to_float+0xc2>
    1d18:	6138      	str	r0, [r7, #16]
    1d1a:	60f8      	str	r0, [r7, #12]
	}

	decexp = 0;
    1d1c:	2300      	movs	r3, #0
    1d1e:	e9c7 4500 	strd	r4, r5, [r7]
    1d22:	461d      	mov	r5, r3
	while (exp <= -3) {
    1d24:	e029      	b.n	1d7a <_to_float+0x122>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
			_rlrshift(&fract);
    1d26:	f107 0020 	add.w	r0, r7, #32
    1d2a:	f7ff ff1d 	bl	1b68 <_rlrshift>
			exp++;
    1d2e:	3601      	adds	r6, #1
		*buf++ = ' ';
	}

	decexp = 0;
	while (exp <= -3) {
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    1d30:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    1d34:	f04f 0b00 	mov.w	fp, #0
    1d38:	f1bb 0f00 	cmp.w	fp, #0
    1d3c:	bf08      	it	eq
    1d3e:	f1b3 3f33 	cmpeq.w	r3, #858993459	; 0x33333333
    1d42:	d2f0      	bcs.n	1d26 <_to_float+0xce>
			_rlrshift(&fract);
			exp++;
		}
		fract *= 5;
    1d44:	ea4f 0e83 	mov.w	lr, r3, lsl #2
    1d48:	0090      	lsls	r0, r2, #2
    1d4a:	ea4e 7192 	orr.w	r1, lr, r2, lsr #30
    1d4e:	1812      	adds	r2, r2, r0
    1d50:	414b      	adcs	r3, r1
    1d52:	e9c7 2308 	strd	r2, r3, [r7, #32]
		exp++;
    1d56:	3601      	adds	r6, #1
		decexp--;
    1d58:	3d01      	subs	r5, #1

		while ((fract >> 32) <= (MAXFP1 / 2)) {
    1d5a:	e004      	b.n	1d66 <_to_float+0x10e>
			fract <<= 1;
    1d5c:	1892      	adds	r2, r2, r2
    1d5e:	415b      	adcs	r3, r3
    1d60:	e9c7 2308 	strd	r2, r3, [r7, #32]
			exp--;
    1d64:	3e01      	subs	r6, #1
		}
		fract *= 5;
		exp++;
		decexp--;

		while ((fract >> 32) <= (MAXFP1 / 2)) {
    1d66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    1d6a:	f04f 0900 	mov.w	r9, #0
    1d6e:	f1b9 0f00 	cmp.w	r9, #0
    1d72:	bf08      	it	eq
    1d74:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
    1d78:	d3f0      	bcc.n	1d5c <_to_float+0x104>
	} else if (fspace) {
		*buf++ = ' ';
	}

	decexp = 0;
	while (exp <= -3) {
    1d7a:	f116 0f02 	cmn.w	r6, #2
    1d7e:	dbd7      	blt.n	1d30 <_to_float+0xd8>
    1d80:	46a8      	mov	r8, r5
    1d82:	e014      	b.n	1dae <_to_float+0x156>
			exp--;
		}
	}

	while (exp > 0) {
		_ldiv5(&fract);
    1d84:	f107 0020 	add.w	r0, r7, #32
    1d88:	f7ff ff00 	bl	1b8c <_ldiv5>
		exp--;
    1d8c:	3e01      	subs	r6, #1
		decexp++;
    1d8e:	f108 0801 	add.w	r8, r8, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    1d92:	e004      	b.n	1d9e <_to_float+0x146>
			fract <<= 1;
    1d94:	1892      	adds	r2, r2, r2
    1d96:	415b      	adcs	r3, r3
    1d98:	e9c7 2308 	strd	r2, r3, [r7, #32]
			exp--;
    1d9c:	3e01      	subs	r6, #1

	while (exp > 0) {
		_ldiv5(&fract);
		exp--;
		decexp++;
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    1d9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
    1da2:	2500      	movs	r5, #0
    1da4:	2d00      	cmp	r5, #0
    1da6:	bf08      	it	eq
    1da8:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
    1dac:	d3f2      	bcc.n	1d94 <_to_float+0x13c>
			fract <<= 1;
			exp--;
		}
	}

	while (exp > 0) {
    1dae:	2e00      	cmp	r6, #0
    1db0:	dce8      	bgt.n	1d84 <_to_float+0x12c>
    1db2:	46c2      	mov	sl, r8
    1db4:	e004      	b.n	1dc0 <_to_float+0x168>
			exp--;
		}
	}

	while (exp < (0 + 4)) {
		_rlrshift(&fract);
    1db6:	f107 0020 	add.w	r0, r7, #32
    1dba:	f7ff fed5 	bl	1b68 <_rlrshift>
		exp++;
    1dbe:	3601      	adds	r6, #1
			fract <<= 1;
			exp--;
		}
	}

	while (exp < (0 + 4)) {
    1dc0:	2e03      	cmp	r6, #3
    1dc2:	ddf8      	ble.n	1db6 <_to_float+0x15e>
		_rlrshift(&fract);
		exp++;
	}

	if (precision < 0)
    1dc4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dc6:	2b00      	cmp	r3, #0
    1dc8:	da01      	bge.n	1dce <_to_float+0x176>
		precision = 6;		/* Default precision if none given */
    1dca:	2306      	movs	r3, #6
    1dcc:	66bb      	str	r3, [r7, #104]	; 0x68
	prune_zero = false;		/* Assume trailing 0's allowed     */
	if ((c == 'g') || (c == 'G')) {
    1dce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1dd0:	2b67      	cmp	r3, #103	; 0x67
    1dd2:	d001      	beq.n	1dd8 <_to_float+0x180>
    1dd4:	2b47      	cmp	r3, #71	; 0x47
    1dd6:	d116      	bne.n	1e06 <_to_float+0x1ae>
		if (!falt && (precision > 0))
    1dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1dda:	b923      	cbnz	r3, 1de6 <_to_float+0x18e>
    1ddc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1dde:	2b00      	cmp	r3, #0
    1de0:	dc03      	bgt.n	1dea <_to_float+0x192>
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
    1de2:	2400      	movs	r4, #0
    1de4:	e002      	b.n	1dec <_to_float+0x194>
    1de6:	2400      	movs	r4, #0
    1de8:	e000      	b.n	1dec <_to_float+0x194>
	if ((c == 'g') || (c == 'G')) {
		if (!falt && (precision > 0))
			prune_zero = true;
    1dea:	2401      	movs	r4, #1
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
    1dec:	f11a 0f03 	cmn.w	sl, #3
    1df0:	db03      	blt.n	1dfa <_to_float+0x1a2>
    1df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1df4:	3301      	adds	r3, #1
    1df6:	459a      	cmp	sl, r3
    1df8:	dd07      	ble.n	1e0a <_to_float+0x1b2>
			if (c == 'g')
    1dfa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1dfc:	2b67      	cmp	r3, #103	; 0x67
    1dfe:	d107      	bne.n	1e10 <_to_float+0x1b8>
				c = 'e';
    1e00:	2365      	movs	r3, #101	; 0x65
    1e02:	65bb      	str	r3, [r7, #88]	; 0x58
    1e04:	e006      	b.n	1e14 <_to_float+0x1bc>
		exp++;
	}

	if (precision < 0)
		precision = 6;		/* Default precision if none given */
	prune_zero = false;		/* Assume trailing 0's allowed     */
    1e06:	2400      	movs	r4, #0
    1e08:	e004      	b.n	1e14 <_to_float+0x1bc>
			if (c == 'g')
				c = 'e';
			else
				c = 'E';
		} else
			c = 'f';
    1e0a:	2366      	movs	r3, #102	; 0x66
    1e0c:	65bb      	str	r3, [r7, #88]	; 0x58
    1e0e:	e001      	b.n	1e14 <_to_float+0x1bc>
			prune_zero = true;
		if ((decexp < (-4 + 1)) || (decexp > (precision + 1))) {
			if (c == 'g')
				c = 'e';
			else
				c = 'E';
    1e10:	2345      	movs	r3, #69	; 0x45
    1e12:	65bb      	str	r3, [r7, #88]	; 0x58
		} else
			c = 'f';
	}

	if (c == 'f') {
    1e14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1e16:	2b66      	cmp	r3, #102	; 0x66
    1e18:	d104      	bne.n	1e24 <_to_float+0x1cc>
		exp = precision + decexp;
		if (exp < 0)
    1e1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e1c:	4652      	mov	r2, sl
    1e1e:	189b      	adds	r3, r3, r2
    1e20:	d504      	bpl.n	1e2c <_to_float+0x1d4>
    1e22:	e002      	b.n	1e2a <_to_float+0x1d2>
			exp = 0;
	} else
		exp = precision + 1;
    1e24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1e26:	3301      	adds	r3, #1
    1e28:	e000      	b.n	1e2c <_to_float+0x1d4>
	}

	if (c == 'f') {
		exp = precision + decexp;
		if (exp < 0)
			exp = 0;
    1e2a:	2300      	movs	r3, #0
	} else
		exp = precision + 1;
	digit_count = 16;
    1e2c:	2210      	movs	r2, #16
    1e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
	if (exp > 16)
    1e30:	4293      	cmp	r3, r2
    1e32:	dd00      	ble.n	1e36 <_to_float+0x1de>
		exp = 16;
    1e34:	4613      	mov	r3, r2

	ltemp = 0x0800000000000000;
    1e36:	2000      	movs	r0, #0
    1e38:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    1e3c:	e9c7 0106 	strd	r0, r1, [r7, #24]
	while (exp--) {
    1e40:	e008      	b.n	1e54 <_to_float+0x1fc>
		_ldiv5(&ltemp);
    1e42:	f107 0018 	add.w	r0, r7, #24
    1e46:	f7ff fea1 	bl	1b8c <_ldiv5>
		_rlrshift(&ltemp);
    1e4a:	f107 0018 	add.w	r0, r7, #24
    1e4e:	f7ff fe8b 	bl	1b68 <_rlrshift>
	digit_count = 16;
	if (exp > 16)
		exp = 16;

	ltemp = 0x0800000000000000;
	while (exp--) {
    1e52:	462b      	mov	r3, r5
    1e54:	1e5d      	subs	r5, r3, #1
    1e56:	2b00      	cmp	r3, #0
    1e58:	d1f3      	bne.n	1e42 <_to_float+0x1ea>
		_ldiv5(&ltemp);
		_rlrshift(&ltemp);
	}

	fract += ltemp;
    1e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
    1e5e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
    1e62:	1812      	adds	r2, r2, r0
    1e64:	414b      	adcs	r3, r1
    1e66:	e9c7 2308 	strd	r2, r3, [r7, #32]
	if ((fract >> 32) & 0xF0000000) {
    1e6a:	f003 4870 	and.w	r8, r3, #4026531840	; 0xf0000000
    1e6e:	f04f 0900 	mov.w	r9, #0
    1e72:	ea58 0309 	orrs.w	r3, r8, r9
    1e76:	d00a      	beq.n	1e8e <_to_float+0x236>
		_ldiv5(&fract);
    1e78:	f107 0020 	add.w	r0, r7, #32
    1e7c:	f7ff fe86 	bl	1b8c <_ldiv5>
		_rlrshift(&fract);
    1e80:	f107 0020 	add.w	r0, r7, #32
    1e84:	f7ff fe70 	bl	1b68 <_rlrshift>
		decexp++;
    1e88:	4653      	mov	r3, sl
    1e8a:	3301      	adds	r3, #1
    1e8c:	469a      	mov	sl, r3
	}

	if (c == 'f') {
    1e8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1e90:	2b66      	cmp	r3, #102	; 0x66
    1e92:	d144      	bne.n	1f1e <_to_float+0x2c6>
		if (decexp > 0) {
    1e94:	4653      	mov	r3, sl
    1e96:	2b00      	cmp	r3, #0
    1e98:	dc0c      	bgt.n	1eb4 <_to_float+0x25c>
    1e9a:	e012      	b.n	1ec2 <_to_float+0x26a>
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
    1e9c:	f106 0801 	add.w	r8, r6, #1
    1ea0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    1ea4:	f107 0020 	add.w	r0, r7, #32
    1ea8:	f7ff feb6 	bl	1c18 <_get_digit>
    1eac:	7030      	strb	r0, [r6, #0]
				decexp--;
    1eae:	3d01      	subs	r5, #1
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
				*buf++ = _get_digit(&fract, &digit_count);
    1eb0:	4646      	mov	r6, r8
    1eb2:	e001      	b.n	1eb8 <_to_float+0x260>
    1eb4:	693e      	ldr	r6, [r7, #16]
    1eb6:	4655      	mov	r5, sl
		decexp++;
	}

	if (c == 'f') {
		if (decexp > 0) {
			while (decexp > 0) {
    1eb8:	2d00      	cmp	r5, #0
    1eba:	dcef      	bgt.n	1e9c <_to_float+0x244>
    1ebc:	613e      	str	r6, [r7, #16]
    1ebe:	46aa      	mov	sl, r5
    1ec0:	e004      	b.n	1ecc <_to_float+0x274>
				*buf++ = _get_digit(&fract, &digit_count);
				decexp--;
			}
		} else
			*buf++ = '0';
    1ec2:	2330      	movs	r3, #48	; 0x30
    1ec4:	6939      	ldr	r1, [r7, #16]
    1ec6:	700b      	strb	r3, [r1, #0]
    1ec8:	1c4b      	adds	r3, r1, #1
    1eca:	613b      	str	r3, [r7, #16]
		if (falt || (precision > 0))
    1ecc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1ece:	b913      	cbnz	r3, 1ed6 <_to_float+0x27e>
    1ed0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1ed2:	2b00      	cmp	r3, #0
    1ed4:	dd06      	ble.n	1ee4 <_to_float+0x28c>
			*buf++ = '.';
    1ed6:	693a      	ldr	r2, [r7, #16]
    1ed8:	1c55      	adds	r5, r2, #1
    1eda:	232e      	movs	r3, #46	; 0x2e
    1edc:	7013      	strb	r3, [r2, #0]
    1ede:	46d0      	mov	r8, sl
    1ee0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1ee2:	e017      	b.n	1f14 <_to_float+0x2bc>
    1ee4:	693d      	ldr	r5, [r7, #16]
    1ee6:	46d0      	mov	r8, sl
    1ee8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1eea:	e013      	b.n	1f14 <_to_float+0x2bc>
		while (precision-- > 0) {
			if (decexp < 0) {
    1eec:	f1b8 0f00 	cmp.w	r8, #0
    1ef0:	da05      	bge.n	1efe <_to_float+0x2a6>
				*buf++ = '0';
    1ef2:	2330      	movs	r3, #48	; 0x30
    1ef4:	702b      	strb	r3, [r5, #0]
				decexp++;
    1ef6:	f108 0801 	add.w	r8, r8, #1
			*buf++ = '0';
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0) {
			if (decexp < 0) {
				*buf++ = '0';
    1efa:	3501      	adds	r5, #1
    1efc:	e009      	b.n	1f12 <_to_float+0x2ba>
				decexp++;
			} else
				*buf++ = _get_digit(&fract, &digit_count);
    1efe:	f105 0901 	add.w	r9, r5, #1
    1f02:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    1f06:	f107 0020 	add.w	r0, r7, #32
    1f0a:	f7ff fe85 	bl	1c18 <_get_digit>
    1f0e:	7028      	strb	r0, [r5, #0]
    1f10:	464d      	mov	r5, r9
    1f12:	4633      	mov	r3, r6
			}
		} else
			*buf++ = '0';
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0) {
    1f14:	1e5e      	subs	r6, r3, #1
    1f16:	2b00      	cmp	r3, #0
    1f18:	dce8      	bgt.n	1eec <_to_float+0x294>
    1f1a:	46c2      	mov	sl, r8
    1f1c:	e028      	b.n	1f70 <_to_float+0x318>
				decexp++;
			} else
				*buf++ = _get_digit(&fract, &digit_count);
		}
	} else {
		*buf = _get_digit(&fract, &digit_count);
    1f1e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    1f22:	f107 0020 	add.w	r0, r7, #32
    1f26:	f7ff fe77 	bl	1c18 <_get_digit>
    1f2a:	693d      	ldr	r5, [r7, #16]
    1f2c:	f805 0b01 	strb.w	r0, [r5], #1
		if (*buf++ != '0')
    1f30:	2830      	cmp	r0, #48	; 0x30
    1f32:	d002      	beq.n	1f3a <_to_float+0x2e2>
			decexp--;
    1f34:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    1f38:	469a      	mov	sl, r3
		if (falt || (precision > 0))
    1f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    1f3c:	b913      	cbnz	r3, 1f44 <_to_float+0x2ec>
    1f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f40:	2b00      	cmp	r3, #0
    1f42:	dd11      	ble.n	1f68 <_to_float+0x310>
			*buf++ = '.';
    1f44:	693a      	ldr	r2, [r7, #16]
    1f46:	1c95      	adds	r5, r2, #2
    1f48:	232e      	movs	r3, #46	; 0x2e
    1f4a:	7053      	strb	r3, [r2, #1]
    1f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1f4e:	e00c      	b.n	1f6a <_to_float+0x312>
		while (precision-- > 0)
			*buf++ = _get_digit(&fract, &digit_count);
    1f50:	f105 0801 	add.w	r8, r5, #1
    1f54:	f107 012c 	add.w	r1, r7, #44	; 0x2c
    1f58:	f107 0020 	add.w	r0, r7, #32
    1f5c:	f7ff fe5c 	bl	1c18 <_get_digit>
    1f60:	7028      	strb	r0, [r5, #0]
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
			decexp--;
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0)
    1f62:	4633      	mov	r3, r6
			*buf++ = _get_digit(&fract, &digit_count);
    1f64:	4645      	mov	r5, r8
    1f66:	e000      	b.n	1f6a <_to_float+0x312>
    1f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
		*buf = _get_digit(&fract, &digit_count);
		if (*buf++ != '0')
			decexp--;
		if (falt || (precision > 0))
			*buf++ = '.';
		while (precision-- > 0)
    1f6a:	1e5e      	subs	r6, r3, #1
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	dcef      	bgt.n	1f50 <_to_float+0x2f8>
			*buf++ = _get_digit(&fract, &digit_count);
	}

	if (prune_zero) {
    1f70:	b14c      	cbz	r4, 1f86 <_to_float+0x32e>
    1f72:	e000      	b.n	1f76 <_to_float+0x31e>
		while (*--buf == '0')
    1f74:	4615      	mov	r5, r2
    1f76:	1e6a      	subs	r2, r5, #1
    1f78:	f815 3c01 	ldrb.w	r3, [r5, #-1]
    1f7c:	2b30      	cmp	r3, #48	; 0x30
    1f7e:	d0f9      	beq.n	1f74 <_to_float+0x31c>
			;
		if (*buf != '.')
    1f80:	2b2e      	cmp	r3, #46	; 0x2e
    1f82:	d100      	bne.n	1f86 <_to_float+0x32e>
		while (precision-- > 0)
			*buf++ = _get_digit(&fract, &digit_count);
	}

	if (prune_zero) {
		while (*--buf == '0')
    1f84:	4615      	mov	r5, r2
			;
		if (*buf != '.')
			buf++;
	}

	if ((c == 'e') || (c == 'E')) {
    1f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1f88:	2b65      	cmp	r3, #101	; 0x65
    1f8a:	d001      	beq.n	1f90 <_to_float+0x338>
    1f8c:	2b45      	cmp	r3, #69	; 0x45
    1f8e:	d12d      	bne.n	1fec <_to_float+0x394>
		*buf++ = (char) c;
    1f90:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    1f94:	702b      	strb	r3, [r5, #0]
		if (decexp < 0) {
    1f96:	4653      	mov	r3, sl
    1f98:	2b00      	cmp	r3, #0
    1f9a:	da05      	bge.n	1fa8 <_to_float+0x350>
			decexp = -decexp;
    1f9c:	425b      	negs	r3, r3
    1f9e:	469a      	mov	sl, r3
			*buf++ = '-';
    1fa0:	1caa      	adds	r2, r5, #2
    1fa2:	232d      	movs	r3, #45	; 0x2d
    1fa4:	706b      	strb	r3, [r5, #1]
    1fa6:	e002      	b.n	1fae <_to_float+0x356>
		} else
			*buf++ = '+';
    1fa8:	1caa      	adds	r2, r5, #2
    1faa:	232b      	movs	r3, #43	; 0x2b
    1fac:	706b      	strb	r3, [r5, #1]
		*buf++ = (char) ((decexp / 100) + '0');
    1fae:	4b13      	ldr	r3, [pc, #76]	; (1ffc <_to_float+0x3a4>)
    1fb0:	4650      	mov	r0, sl
    1fb2:	fb83 310a 	smull	r3, r1, r3, sl
    1fb6:	17c3      	asrs	r3, r0, #31
    1fb8:	ebc3 1361 	rsb	r3, r3, r1, asr #5
    1fbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1fc0:	7011      	strb	r1, [r2, #0]
		decexp %= 100;
    1fc2:	2164      	movs	r1, #100	; 0x64
    1fc4:	fb01 aa13 	mls	sl, r1, r3, sl
		*buf++ = (char) ((decexp / 10) + '0');
    1fc8:	4b0d      	ldr	r3, [pc, #52]	; (2000 <_to_float+0x3a8>)
    1fca:	fb83 310a 	smull	r3, r1, r3, sl
    1fce:	ea4f 73ea 	mov.w	r3, sl, asr #31
    1fd2:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
    1fd6:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1fda:	7051      	strb	r1, [r2, #1]
		decexp %= 10;
    1fdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    1fe0:	ebaa 0a43 	sub.w	sl, sl, r3, lsl #1
		*buf++ = (char) (decexp + '0');
    1fe4:	1cd5      	adds	r5, r2, #3
    1fe6:	f10a 0330 	add.w	r3, sl, #48	; 0x30
    1fea:	7093      	strb	r3, [r2, #2]
	}
	*buf = 0;
    1fec:	2300      	movs	r3, #0
    1fee:	702b      	strb	r3, [r5, #0]

	return buf - start;
    1ff0:	68fb      	ldr	r3, [r7, #12]
    1ff2:	1ae8      	subs	r0, r5, r3
}
    1ff4:	3734      	adds	r7, #52	; 0x34
    1ff6:	46bd      	mov	sp, r7
    1ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1ffc:	51eb851f 	.word	0x51eb851f
    2000:	66666667 	.word	0x66666667

00002004 <_atoi>:

static int _atoi(char **sptr)
{
    2004:	b490      	push	{r4, r7}
    2006:	af00      	add	r7, sp, #0
	register char *p;
	register int   i;

	i = 0;
	p = *sptr;
    2008:	6801      	ldr	r1, [r0, #0]
	p--;
    200a:	3901      	subs	r1, #1
static int _atoi(char **sptr)
{
	register char *p;
	register int   i;

	i = 0;
    200c:	2300      	movs	r3, #0
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
    200e:	e005      	b.n	201c <_atoi+0x18>
		i = 10 * i + *p++ - '0';
    2010:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    2014:	005a      	lsls	r2, r3, #1
    2016:	3101      	adds	r1, #1
    2018:	18a3      	adds	r3, r4, r2
    201a:	3b30      	subs	r3, #48	; 0x30
	register int   i;

	i = 0;
	p = *sptr;
	p--;
	while (isdigit(((int) *p)))
    201c:	780c      	ldrb	r4, [r1, #0]
	return ((((unsigned)c) >= ' ') && (((unsigned)c) <= '~'));
}

static inline int isdigit(int a)
{
	return (((unsigned)(a)-'0') < 10);
    201e:	f1a4 0230 	sub.w	r2, r4, #48	; 0x30
    2022:	2a09      	cmp	r2, #9
    2024:	d9f4      	bls.n	2010 <_atoi+0xc>
		i = 10 * i + *p++ - '0';
	*sptr = p;
    2026:	6001      	str	r1, [r0, #0]
	return i;
}
    2028:	4618      	mov	r0, r3
    202a:	46bd      	mov	sp, r7
    202c:	bc90      	pop	{r4, r7}
    202e:	4770      	bx	lr

00002030 <_prf>:

int _prf(int (*func)(), void *dest, char *format, va_list vargs)
{
    2030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2034:	b0c3      	sub	sp, #268	; 0x10c
    2036:	af06      	add	r7, sp, #24
    2038:	4682      	mov	sl, r0
    203a:	61b9      	str	r1, [r7, #24]
    203c:	61fa      	str	r2, [r7, #28]
    203e:	60bb      	str	r3, [r7, #8]
	int32_t			*int32ptr_temp;
	int32_t			int32_temp;
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;
    2040:	f04f 0b00 	mov.w	fp, #0

	while ((c = *format++)) {
    2044:	e28f      	b.n	2566 <_prf+0x536>
		if (c != '%') {
    2046:	2825      	cmp	r0, #37	; 0x25
    2048:	d04c      	beq.n	20e4 <_prf+0xb4>
			if ((*func) (c, dest) == EOF) {
    204a:	69b9      	ldr	r1, [r7, #24]
    204c:	47d0      	blx	sl
    204e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2052:	f000 8297 	beq.w	2584 <_prf+0x554>
				return EOF;
			}

			count++;
    2056:	f10b 0b01 	add.w	fp, fp, #1
    205a:	e284      	b.n	2566 <_prf+0x536>
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
				switch (c) {
    205c:	2c30      	cmp	r4, #48	; 0x30
    205e:	d84b      	bhi.n	20f8 <_prf+0xc8>
    2060:	e8df f014 	tbh	[pc, r4, lsl #1]
    2064:	004a028a 	.word	0x004a028a
    2068:	004a004a 	.word	0x004a004a
    206c:	004a004a 	.word	0x004a004a
    2070:	004a004a 	.word	0x004a004a
    2074:	004a004a 	.word	0x004a004a
    2078:	004a004a 	.word	0x004a004a
    207c:	004a004a 	.word	0x004a004a
    2080:	004a004a 	.word	0x004a004a
    2084:	004a004a 	.word	0x004a004a
    2088:	004a004a 	.word	0x004a004a
    208c:	004a004a 	.word	0x004a004a
    2090:	004a004a 	.word	0x004a004a
    2094:	004a004a 	.word	0x004a004a
    2098:	004a004a 	.word	0x004a004a
    209c:	004a004a 	.word	0x004a004a
    20a0:	004a004a 	.word	0x004a004a
    20a4:	004a0034 	.word	0x004a0034
    20a8:	0037004a 	.word	0x0037004a
    20ac:	004a004a 	.word	0x004a004a
    20b0:	004a004a 	.word	0x004a004a
    20b4:	004a004a 	.word	0x004a004a
    20b8:	0031004a 	.word	0x0031004a
    20bc:	003d004a 	.word	0x003d004a
    20c0:	004a004a 	.word	0x004a004a
    20c4:	003a      	.short	0x003a
				case '-':
					fminus = true;
					break;

				case '+':
					fplus = true;
    20c6:	2301      	movs	r3, #1
    20c8:	60fb      	str	r3, [r7, #12]
					break;
    20ca:	e015      	b.n	20f8 <_prf+0xc8>

				case ' ':
					fspace = true;
    20cc:	f04f 0801 	mov.w	r8, #1
					break;
    20d0:	e012      	b.n	20f8 <_prf+0xc8>

				case '#':
					falt = true;
    20d2:	2301      	movs	r3, #1
    20d4:	613b      	str	r3, [r7, #16]
					break;
    20d6:	e00f      	b.n	20f8 <_prf+0xc8>

				case '0':
					pad = '0';
    20d8:	f04f 0930 	mov.w	r9, #48	; 0x30
					break;
    20dc:	e00c      	b.n	20f8 <_prf+0xc8>
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
				switch (c) {
				case '-':
					fminus = true;
    20de:	2301      	movs	r3, #1
    20e0:	617b      	str	r3, [r7, #20]
    20e2:	e009      	b.n	20f8 <_prf+0xc8>
    20e4:	f04f 0920 	mov.w	r9, #32
    20e8:	f04f 0800 	mov.w	r8, #0
    20ec:	f8c7 800c 	str.w	r8, [r7, #12]
    20f0:	f8c7 8014 	str.w	r8, [r7, #20]
    20f4:	f8c7 8010 	str.w	r8, [r7, #16]
		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */

			while (strchr("-+ #0", (c = *format++)) != NULL) {
    20f8:	69fb      	ldr	r3, [r7, #28]
    20fa:	1c5a      	adds	r2, r3, #1
    20fc:	61fa      	str	r2, [r7, #28]
    20fe:	781c      	ldrb	r4, [r3, #0]
    2100:	4625      	mov	r5, r4
    2102:	4621      	mov	r1, r4
    2104:	488f      	ldr	r0, [pc, #572]	; (2344 <_prf+0x314>)
    2106:	f000 fa61 	bl	25cc <strchr>
    210a:	2800      	cmp	r0, #0
    210c:	d1a6      	bne.n	205c <_prf+0x2c>
				case '\0':
					return count;
				}
			}

			if (c == '*') {
    210e:	2c2a      	cmp	r4, #42	; 0x2a
    2110:	d10e      	bne.n	2130 <_prf+0x100>
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
    2112:	68ba      	ldr	r2, [r7, #8]
    2114:	4613      	mov	r3, r2
    2116:	6816      	ldr	r6, [r2, #0]
    2118:	3304      	adds	r3, #4
    211a:	60bb      	str	r3, [r7, #8]
				if (width < 0) {
    211c:	2e00      	cmp	r6, #0
    211e:	da02      	bge.n	2126 <_prf+0xf6>
					fminus = true;
					width = -width;
    2120:	4276      	negs	r6, r6

			if (c == '*') {
				/* Is the width a parameter? */
				width = (int32_t) va_arg(vargs, int32_t);
				if (width < 0) {
					fminus = true;
    2122:	2301      	movs	r3, #1
    2124:	617b      	str	r3, [r7, #20]
					width = -width;
				}
				c = *format++;
    2126:	69fb      	ldr	r3, [r7, #28]
    2128:	1c5a      	adds	r2, r3, #1
    212a:	61fa      	str	r2, [r7, #28]
    212c:	781d      	ldrb	r5, [r3, #0]
    212e:	e00d      	b.n	214c <_prf+0x11c>
    2130:	3c30      	subs	r4, #48	; 0x30
			} else if (!isdigit(c))
    2132:	2c09      	cmp	r4, #9
    2134:	d809      	bhi.n	214a <_prf+0x11a>
				width = 0;
			else {
				width = _atoi(&format);	/* Find width */
    2136:	f107 001c 	add.w	r0, r7, #28
    213a:	f7ff ff63 	bl	2004 <_atoi>
    213e:	4606      	mov	r6, r0
				c = *format++;
    2140:	69fb      	ldr	r3, [r7, #28]
    2142:	1c5a      	adds	r2, r3, #1
    2144:	61fa      	str	r2, [r7, #28]
    2146:	781d      	ldrb	r5, [r3, #0]
    2148:	e000      	b.n	214c <_prf+0x11c>
					fminus = true;
					width = -width;
				}
				c = *format++;
			} else if (!isdigit(c))
				width = 0;
    214a:	2600      	movs	r6, #0
			 * If <width> is INT_MIN, then its absolute value can
			 * not be expressed as a positive number using 32-bit
			 * two's complement.  To cover that case, cast it to
			 * an unsigned before comparing it against MAXFLD.
			 */
			if ((unsigned) width > MAXFLD) {
    214c:	2ec8      	cmp	r6, #200	; 0xc8
    214e:	d900      	bls.n	2152 <_prf+0x122>
				width = MAXFLD;
    2150:	26c8      	movs	r6, #200	; 0xc8
			}

			if (c == '.') {
    2152:	2d2e      	cmp	r5, #46	; 0x2e
    2154:	d11c      	bne.n	2190 <_prf+0x160>
				c = *format++;
    2156:	69fb      	ldr	r3, [r7, #28]
    2158:	1c5a      	adds	r2, r3, #1
    215a:	61fa      	str	r2, [r7, #28]
    215c:	781b      	ldrb	r3, [r3, #0]
				if (c == '*') {
    215e:	2b2a      	cmp	r3, #42	; 0x2a
    2160:	d106      	bne.n	2170 <_prf+0x140>
					precision = (int32_t)
    2162:	68b9      	ldr	r1, [r7, #8]
    2164:	460b      	mov	r3, r1
    2166:	680a      	ldr	r2, [r1, #0]
    2168:	607a      	str	r2, [r7, #4]
    216a:	3304      	adds	r3, #4
    216c:	60bb      	str	r3, [r7, #8]
    216e:	e004      	b.n	217a <_prf+0x14a>
					va_arg(vargs, int32_t);
				} else
					precision = _atoi(&format);
    2170:	f107 001c 	add.w	r0, r7, #28
    2174:	f7ff ff46 	bl	2004 <_atoi>
    2178:	6078      	str	r0, [r7, #4]

				if (precision > MAXFLD)
    217a:	687b      	ldr	r3, [r7, #4]
    217c:	2bc8      	cmp	r3, #200	; 0xc8
    217e:	dd02      	ble.n	2186 <_prf+0x156>
					precision = -1;
    2180:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2184:	607b      	str	r3, [r7, #4]
				c = *format++;
    2186:	69fb      	ldr	r3, [r7, #28]
    2188:	1c5a      	adds	r2, r3, #1
    218a:	61fa      	str	r2, [r7, #28]
    218c:	781d      	ldrb	r5, [r3, #0]
    218e:	e002      	b.n	2196 <_prf+0x166>
			count++;

		} else {
			fminus = fplus = fspace = falt = false;
			pad = ' ';		/* Default pad character    */
			precision = -1;	/* No precision specified   */
    2190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2194:	607b      	str	r3, [r7, #4]
			 *    L: long double
			 *    z: size_t or ssize_t
			 * No further special processing is done for them.
			 */

			if (strchr("hlLz", c) != NULL) {
    2196:	4629      	mov	r1, r5
    2198:	486b      	ldr	r0, [pc, #428]	; (2348 <_prf+0x318>)
    219a:	f000 fa17 	bl	25cc <strchr>
    219e:	b310      	cbz	r0, 21e6 <_prf+0x1b6>
				i = c;
				c = *format++;
    21a0:	69fb      	ldr	r3, [r7, #28]
    21a2:	1c5a      	adds	r2, r3, #1
    21a4:	61fa      	str	r2, [r7, #28]
    21a6:	781c      	ldrb	r4, [r3, #0]
				switch (i) {
    21a8:	2d68      	cmp	r5, #104	; 0x68
    21aa:	d008      	beq.n	21be <_prf+0x18e>
    21ac:	dc02      	bgt.n	21b4 <_prf+0x184>
    21ae:	2d4c      	cmp	r5, #76	; 0x4c
    21b0:	d00f      	beq.n	21d2 <_prf+0x1a2>
    21b2:	e019      	b.n	21e8 <_prf+0x1b8>
    21b4:	2d6c      	cmp	r5, #108	; 0x6c
    21b6:	d007      	beq.n	21c8 <_prf+0x198>
    21b8:	2d7a      	cmp	r5, #122	; 0x7a
    21ba:	d00f      	beq.n	21dc <_prf+0x1ac>
    21bc:	e014      	b.n	21e8 <_prf+0x1b8>
				case 'h':
					if (strchr("diouxX", c) == NULL)
    21be:	4621      	mov	r1, r4
    21c0:	4862      	ldr	r0, [pc, #392]	; (234c <_prf+0x31c>)
    21c2:	f000 fa03 	bl	25cc <strchr>
    21c6:	e00f      	b.n	21e8 <_prf+0x1b8>
						break;
					break;

				case 'l':
					if (strchr("diouxX", c) == NULL)
    21c8:	4621      	mov	r1, r4
    21ca:	4860      	ldr	r0, [pc, #384]	; (234c <_prf+0x31c>)
    21cc:	f000 f9fe 	bl	25cc <strchr>
    21d0:	e00a      	b.n	21e8 <_prf+0x1b8>
						break;
					break;

				case 'L':
					if (strchr("eEfgG", c) == NULL)
    21d2:	4621      	mov	r1, r4
    21d4:	485e      	ldr	r0, [pc, #376]	; (2350 <_prf+0x320>)
    21d6:	f000 f9f9 	bl	25cc <strchr>
    21da:	e005      	b.n	21e8 <_prf+0x1b8>
						break;
					break;

				case 'z':
					if (strchr("diouxX", c) == NULL)
    21dc:	4621      	mov	r1, r4
    21de:	485b      	ldr	r0, [pc, #364]	; (234c <_prf+0x31c>)
    21e0:	f000 f9f4 	bl	25cc <strchr>
    21e4:	e000      	b.n	21e8 <_prf+0x1b8>
    21e6:	462c      	mov	r4, r5
				}
			}

			need_justifying = false;
			prefix = 0;
			switch (c) {
    21e8:	2c78      	cmp	r4, #120	; 0x78
    21ea:	f200 815a 	bhi.w	24a2 <_prf+0x472>
    21ee:	e8df f014 	tbh	[pc, r4, lsl #1]
    21f2:	01c5      	.short	0x01c5
    21f4:	01580158 	.word	0x01580158
    21f8:	01580158 	.word	0x01580158
    21fc:	01580158 	.word	0x01580158
    2200:	01580158 	.word	0x01580158
    2204:	01580158 	.word	0x01580158
    2208:	01580158 	.word	0x01580158
    220c:	01580158 	.word	0x01580158
    2210:	01580158 	.word	0x01580158
    2214:	01580158 	.word	0x01580158
    2218:	01580158 	.word	0x01580158
    221c:	01580158 	.word	0x01580158
    2220:	01580158 	.word	0x01580158
    2224:	01580158 	.word	0x01580158
    2228:	01580158 	.word	0x01580158
    222c:	01580158 	.word	0x01580158
    2230:	01580158 	.word	0x01580158
    2234:	01580158 	.word	0x01580158
    2238:	01580158 	.word	0x01580158
    223c:	0158014d 	.word	0x0158014d
    2240:	01580158 	.word	0x01580158
    2244:	01580158 	.word	0x01580158
    2248:	01580158 	.word	0x01580158
    224c:	01580158 	.word	0x01580158
    2250:	01580158 	.word	0x01580158
    2254:	01580158 	.word	0x01580158
    2258:	01580158 	.word	0x01580158
    225c:	01580158 	.word	0x01580158
    2260:	01580158 	.word	0x01580158
    2264:	01580158 	.word	0x01580158
    2268:	01580158 	.word	0x01580158
    226c:	01580158 	.word	0x01580158
    2270:	01580158 	.word	0x01580158
    2274:	01580158 	.word	0x01580158
    2278:	01580158 	.word	0x01580158
    227c:	015800b1 	.word	0x015800b1
    2280:	015800b1 	.word	0x015800b1
    2284:	01580158 	.word	0x01580158
    2288:	01580158 	.word	0x01580158
    228c:	01580158 	.word	0x01580158
    2290:	01580158 	.word	0x01580158
    2294:	01580158 	.word	0x01580158
    2298:	01580158 	.word	0x01580158
    229c:	01580158 	.word	0x01580158
    22a0:	01350158 	.word	0x01350158
    22a4:	01580158 	.word	0x01580158
    22a8:	01580158 	.word	0x01580158
    22ac:	01580158 	.word	0x01580158
    22b0:	01580158 	.word	0x01580158
    22b4:	01580158 	.word	0x01580158
    22b8:	00850079 	.word	0x00850079
    22bc:	00b100b1 	.word	0x00b100b1
    22c0:	015800b1 	.word	0x015800b1
    22c4:	01580085 	.word	0x01580085
    22c8:	01580158 	.word	0x01580158
    22cc:	00d70158 	.word	0x00d70158
    22d0:	00f200e0 	.word	0x00f200e0
    22d4:	01580158 	.word	0x01580158
    22d8:	01580107 	.word	0x01580107
    22dc:	01580123 	.word	0x01580123
    22e0:	01350158 	.word	0x01350158
			case 'c':
				buf[0] = (char) ((int32_t) va_arg(vargs, int32_t));
    22e4:	68ba      	ldr	r2, [r7, #8]
    22e6:	7813      	ldrb	r3, [r2, #0]
    22e8:	3204      	adds	r2, #4
    22ea:	60ba      	str	r2, [r7, #8]
    22ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
				buf[1] = '\0';
    22f0:	2500      	movs	r5, #0
    22f2:	f887 5025 	strb.w	r5, [r7, #37]	; 0x25
				need_justifying = true;
    22f6:	2301      	movs	r3, #1
				c = 1;
    22f8:	461c      	mov	r4, r3
				break;
    22fa:	e0f7      	b.n	24ec <_prf+0x4bc>

			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
    22fc:	68ba      	ldr	r2, [r7, #8]
    22fe:	4613      	mov	r3, r2
    2300:	6815      	ldr	r5, [r2, #0]
    2302:	3304      	adds	r3, #4
    2304:	60bb      	str	r3, [r7, #8]
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
    2306:	687b      	ldr	r3, [r7, #4]
    2308:	9300      	str	r3, [sp, #0]
    230a:	4643      	mov	r3, r8
    230c:	68fa      	ldr	r2, [r7, #12]
    230e:	4629      	mov	r1, r5
    2310:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2314:	f7ff fc08 	bl	1b28 <_to_dec>
    2318:	4604      	mov	r4, r0
				if (fplus || fspace || (int32_temp < 0))
    231a:	68fb      	ldr	r3, [r7, #12]
    231c:	b933      	cbnz	r3, 232c <_prf+0x2fc>
    231e:	f1b8 0f00 	cmp.w	r8, #0
    2322:	d105      	bne.n	2330 <_prf+0x300>
    2324:	2d00      	cmp	r5, #0
    2326:	db05      	blt.n	2334 <_prf+0x304>

				}
			}

			need_justifying = false;
			prefix = 0;
    2328:	2500      	movs	r5, #0
    232a:	e004      	b.n	2336 <_prf+0x306>
			case 'd':
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
					prefix = 1;
    232c:	2501      	movs	r5, #1
    232e:	e002      	b.n	2336 <_prf+0x306>
    2330:	2501      	movs	r5, #1
    2332:	e000      	b.n	2336 <_prf+0x306>
    2334:	2501      	movs	r5, #1
				need_justifying = true;
				if (precision != -1)
    2336:	687b      	ldr	r3, [r7, #4]
    2338:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    233c:	f040 80b4 	bne.w	24a8 <_prf+0x478>
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
					prefix = 1;
				need_justifying = true;
    2340:	2301      	movs	r3, #1
    2342:	e0d3      	b.n	24ec <_prf+0x4bc>
    2344:	000052ac 	.word	0x000052ac
    2348:	000052b4 	.word	0x000052b4
    234c:	000052bc 	.word	0x000052bc
    2350:	000052c4 	.word	0x000052c4
				union {
					double d;
					uint64_t i;
				} u;

				u.d = (double) va_arg(vargs, double);
    2354:	68bb      	ldr	r3, [r7, #8]
    2356:	3307      	adds	r3, #7
    2358:	f023 0307 	bic.w	r3, r3, #7
    235c:	f103 0208 	add.w	r2, r3, #8
    2360:	60ba      	str	r2, [r7, #8]
    2362:	e9d3 2300 	ldrd	r2, r3, [r3]
				double_temp = u.i;
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
    2366:	6879      	ldr	r1, [r7, #4]
    2368:	9104      	str	r1, [sp, #16]
    236a:	f8cd 800c 	str.w	r8, [sp, #12]
    236e:	68fd      	ldr	r5, [r7, #12]
    2370:	9502      	str	r5, [sp, #8]
    2372:	6939      	ldr	r1, [r7, #16]
    2374:	9101      	str	r1, [sp, #4]
    2376:	9400      	str	r4, [sp, #0]
    2378:	f107 0024 	add.w	r0, r7, #36	; 0x24
    237c:	f7ff fc6c 	bl	1c58 <_to_float>
    2380:	4604      	mov	r4, r0
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
    2382:	2d00      	cmp	r5, #0
    2384:	f040 8094 	bne.w	24b0 <_prf+0x480>
    2388:	f1b8 0f00 	cmp.w	r8, #0
    238c:	f040 8093 	bne.w	24b6 <_prf+0x486>
    2390:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
    2394:	2b2d      	cmp	r3, #45	; 0x2d
    2396:	f000 8091 	beq.w	24bc <_prf+0x48c>

				}
			}

			need_justifying = false;
			prefix = 0;
    239a:	2500      	movs	r5, #0

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
					prefix = 1;
				need_justifying = true;
    239c:	2301      	movs	r3, #1
    239e:	e0a5      	b.n	24ec <_prf+0x4bc>
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
    23a0:	68ba      	ldr	r2, [r7, #8]
    23a2:	6813      	ldr	r3, [r2, #0]
    23a4:	3204      	adds	r2, #4
    23a6:	60ba      	str	r2, [r7, #8]
				*int32ptr_temp = count;
    23a8:	f8c3 b000 	str.w	fp, [r3]

				}
			}

			need_justifying = false;
			prefix = 0;
    23ac:	2500      	movs	r5, #0
					break;

				}
			}

			need_justifying = false;
    23ae:	462b      	mov	r3, r5
				break;

			case 'n':
				int32ptr_temp = (int32_t *)va_arg(vargs, int32_t *);
				*int32ptr_temp = count;
				break;
    23b0:	e09c      	b.n	24ec <_prf+0x4bc>

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    23b2:	68b8      	ldr	r0, [r7, #8]
				c = _to_octal(buf, uint32_temp, falt, precision);
    23b4:	687d      	ldr	r5, [r7, #4]
    23b6:	462b      	mov	r3, r5
    23b8:	693a      	ldr	r2, [r7, #16]
    23ba:	6801      	ldr	r1, [r0, #0]
    23bc:	3004      	adds	r0, #4
    23be:	60b8      	str	r0, [r7, #8]
    23c0:	f107 0024 	add.w	r0, r7, #36	; 0x24
    23c4:	f7ff fb94 	bl	1af0 <_to_octal>
    23c8:	4604      	mov	r4, r0
				need_justifying = true;
				if (precision != -1)
    23ca:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    23ce:	d178      	bne.n	24c2 <_prf+0x492>

				}
			}

			need_justifying = false;
			prefix = 0;
    23d0:	2500      	movs	r5, #0
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
    23d2:	2301      	movs	r3, #1
    23d4:	e08a      	b.n	24ec <_prf+0x4bc>
				if (precision != -1)
					pad = ' ';
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    23d6:	68ba      	ldr	r2, [r7, #8]
    23d8:	4613      	mov	r3, r2
    23da:	6811      	ldr	r1, [r2, #0]
    23dc:	3304      	adds	r3, #4
    23de:	60bb      	str	r3, [r7, #8]
				c = _to_hex(buf, uint32_temp, true, 8, (int) 'x');
    23e0:	2378      	movs	r3, #120	; 0x78
    23e2:	9300      	str	r3, [sp, #0]
    23e4:	2308      	movs	r3, #8
    23e6:	2201      	movs	r2, #1
    23e8:	f107 0024 	add.w	r0, r7, #36	; 0x24
    23ec:	f7ff fb66 	bl	1abc <_to_hex>
    23f0:	4604      	mov	r4, r0
				need_justifying = true;
				if (precision != -1)
    23f2:	687b      	ldr	r3, [r7, #4]
    23f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    23f8:	d168      	bne.n	24cc <_prf+0x49c>

				}
			}

			need_justifying = false;
			prefix = 0;
    23fa:	2500      	movs	r5, #0
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, true, 8, (int) 'x');
				need_justifying = true;
    23fc:	2301      	movs	r3, #1
    23fe:	e075      	b.n	24ec <_prf+0x4bc>
				if (precision != -1)
					pad = ' ';
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
    2400:	68ba      	ldr	r2, [r7, #8]
    2402:	4613      	mov	r3, r2
    2404:	6811      	ldr	r1, [r2, #0]
    2406:	3304      	adds	r3, #4
    2408:	60bb      	str	r3, [r7, #8]
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
    240a:	2400      	movs	r4, #0
    240c:	e002      	b.n	2414 <_prf+0x3e4>
					if (cptr_temp[c] == '\0') {
    240e:	5d0b      	ldrb	r3, [r1, r4]
    2410:	b113      	cbz	r3, 2418 <_prf+0x3e8>
				break;

			case 's':
				cptr_temp = (char *) va_arg(vargs, char *);
				/* Get the string length */
				for (c = 0; c < MAXFLD; c++) {
    2412:	3401      	adds	r4, #1
    2414:	2cc7      	cmp	r4, #199	; 0xc7
    2416:	ddfa      	ble.n	240e <_prf+0x3de>
					if (cptr_temp[c] == '\0') {
						break;
					}
				}
				if ((precision >= 0) && (precision < c))
    2418:	687a      	ldr	r2, [r7, #4]
    241a:	2a00      	cmp	r2, #0
    241c:	db02      	blt.n	2424 <_prf+0x3f4>
    241e:	4294      	cmp	r4, r2
    2420:	dd00      	ble.n	2424 <_prf+0x3f4>
					c = precision;
    2422:	4614      	mov	r4, r2
				if (c > 0) {
    2424:	2c00      	cmp	r4, #0
    2426:	dd56      	ble.n	24d6 <_prf+0x4a6>
					memcpy(buf, cptr_temp, (size_t) c);
    2428:	4622      	mov	r2, r4
    242a:	f107 0024 	add.w	r0, r7, #36	; 0x24
    242e:	f000 f907 	bl	2640 <memcpy>

				}
			}

			need_justifying = false;
			prefix = 0;
    2432:	2500      	movs	r5, #0
				}
				if ((precision >= 0) && (precision < c))
					c = precision;
				if (c > 0) {
					memcpy(buf, cptr_temp, (size_t) c);
					need_justifying = true;
    2434:	2301      	movs	r3, #1
    2436:	e059      	b.n	24ec <_prf+0x4bc>
				}
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    2438:	68b8      	ldr	r0, [r7, #8]
    243a:	4603      	mov	r3, r0
				c = _to_udec(buf, uint32_temp, precision);
    243c:	687d      	ldr	r5, [r7, #4]
    243e:	462a      	mov	r2, r5
    2440:	6801      	ldr	r1, [r0, #0]
    2442:	3304      	adds	r3, #4
    2444:	60bb      	str	r3, [r7, #8]
    2446:	f107 0024 	add.w	r0, r7, #36	; 0x24
    244a:	f7ff fb65 	bl	1b18 <_to_udec>
    244e:	4604      	mov	r4, r0
				need_justifying = true;
				if (precision != -1)
    2450:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
    2454:	d142      	bne.n	24dc <_prf+0x4ac>

				}
			}

			need_justifying = false;
			prefix = 0;
    2456:	2500      	movs	r5, #0
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_udec(buf, uint32_temp, precision);
				need_justifying = true;
    2458:	2301      	movs	r3, #1
    245a:	e047      	b.n	24ec <_prf+0x4bc>
					pad = ' ';
				break;

			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
    245c:	68ba      	ldr	r2, [r7, #8]
    245e:	4613      	mov	r3, r2
    2460:	6811      	ldr	r1, [r2, #0]
    2462:	3304      	adds	r3, #4
    2464:	60bb      	str	r3, [r7, #8]
				c = _to_hex(buf, uint32_temp, falt, precision, c);
    2466:	9400      	str	r4, [sp, #0]
    2468:	687b      	ldr	r3, [r7, #4]
    246a:	693d      	ldr	r5, [r7, #16]
    246c:	462a      	mov	r2, r5
    246e:	f107 0024 	add.w	r0, r7, #36	; 0x24
    2472:	f7ff fb23 	bl	1abc <_to_hex>
    2476:	4604      	mov	r4, r0
				if (falt)
    2478:	b90d      	cbnz	r5, 247e <_prf+0x44e>

				}
			}

			need_justifying = false;
			prefix = 0;
    247a:	2500      	movs	r5, #0
    247c:	e000      	b.n	2480 <_prf+0x450>
			case 'x':
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
    247e:	2502      	movs	r5, #2
				need_justifying = true;
				if (precision != -1)
    2480:	687b      	ldr	r3, [r7, #4]
    2482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    2486:	d12e      	bne.n	24e6 <_prf+0x4b6>
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
				need_justifying = true;
    2488:	2301      	movs	r3, #1
    248a:	e02f      	b.n	24ec <_prf+0x4bc>
				if (precision != -1)
					pad = ' ';
				break;

			case '%':
				if ((*func)('%', dest) == EOF) {
    248c:	69b9      	ldr	r1, [r7, #24]
    248e:	2025      	movs	r0, #37	; 0x25
    2490:	47d0      	blx	sl
    2492:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2496:	d075      	beq.n	2584 <_prf+0x554>
					return EOF;
				}

				count++;
    2498:	f10b 0b01 	add.w	fp, fp, #1

				}
			}

			need_justifying = false;
			prefix = 0;
    249c:	2500      	movs	r5, #0
					break;

				}
			}

			need_justifying = false;
    249e:	462b      	mov	r3, r5
				if ((*func)('%', dest) == EOF) {
					return EOF;
				}

				count++;
				break;
    24a0:	e024      	b.n	24ec <_prf+0x4bc>

				}
			}

			need_justifying = false;
			prefix = 0;
    24a2:	2500      	movs	r5, #0
					break;

				}
			}

			need_justifying = false;
    24a4:	462b      	mov	r3, r5
    24a6:	e021      	b.n	24ec <_prf+0x4bc>
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
					prefix = 1;
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
    24a8:	f04f 0920 	mov.w	r9, #32
			case 'i':
				int32_temp = (int32_t) va_arg(vargs, int32_t);
				c = _to_dec(buf, int32_temp, fplus, fspace, precision);
				if (fplus || fspace || (int32_temp < 0))
					prefix = 1;
				need_justifying = true;
    24ac:	2301      	movs	r3, #1
    24ae:	e01d      	b.n	24ec <_prf+0x4bc>
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
					prefix = 1;
    24b0:	2501      	movs	r5, #1
				need_justifying = true;
    24b2:	462b      	mov	r3, r5
    24b4:	e01a      	b.n	24ec <_prf+0x4bc>
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
					prefix = 1;
    24b6:	2501      	movs	r5, #1
				need_justifying = true;
    24b8:	462b      	mov	r3, r5
    24ba:	e017      	b.n	24ec <_prf+0x4bc>
			}

				c = _to_float(buf, double_temp, c, falt, fplus,
					      fspace, precision);
				if (fplus || fspace || (buf[0] == '-'))
					prefix = 1;
    24bc:	2501      	movs	r5, #1
				need_justifying = true;
    24be:	462b      	mov	r3, r5
    24c0:	e014      	b.n	24ec <_prf+0x4bc>

				}
			}

			need_justifying = false;
			prefix = 0;
    24c2:	2500      	movs	r5, #0
			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
    24c4:	f04f 0920 	mov.w	r9, #32
				break;

			case 'o':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_octal(buf, uint32_temp, falt, precision);
				need_justifying = true;
    24c8:	2301      	movs	r3, #1
    24ca:	e00f      	b.n	24ec <_prf+0x4bc>

				}
			}

			need_justifying = false;
			prefix = 0;
    24cc:	2500      	movs	r5, #0
			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, true, 8, (int) 'x');
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
    24ce:	f04f 0920 	mov.w	r9, #32
				break;

			case 'p':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, true, 8, (int) 'x');
				need_justifying = true;
    24d2:	2301      	movs	r3, #1
    24d4:	e00a      	b.n	24ec <_prf+0x4bc>

				}
			}

			need_justifying = false;
			prefix = 0;
    24d6:	2500      	movs	r5, #0
					break;

				}
			}

			need_justifying = false;
    24d8:	462b      	mov	r3, r5
    24da:	e007      	b.n	24ec <_prf+0x4bc>
			prefix = 0;
    24dc:	2500      	movs	r5, #0
			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_udec(buf, uint32_temp, precision);
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
    24de:	f04f 0920 	mov.w	r9, #32
				break;

			case 'u':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_udec(buf, uint32_temp, precision);
				need_justifying = true;
    24e2:	2301      	movs	r3, #1
    24e4:	e002      	b.n	24ec <_prf+0x4bc>
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
				need_justifying = true;
				if (precision != -1)
					pad = ' ';
    24e6:	f04f 0920 	mov.w	r9, #32
			case 'X':
				uint32_temp = (uint32_t) va_arg(vargs, uint32_t);
				c = _to_hex(buf, uint32_temp, falt, precision, c);
				if (falt)
					prefix = 2;
				need_justifying = true;
    24ea:	2301      	movs	r3, #1

			case 0:
				return count;
			}

			if (c >= MAXFLD + 1)
    24ec:	2cc8      	cmp	r4, #200	; 0xc8
    24ee:	dc47      	bgt.n	2580 <_prf+0x550>
				return EOF;

			if (need_justifying) {
    24f0:	b3cb      	cbz	r3, 2566 <_prf+0x536>
				if (c < width) {
    24f2:	42b4      	cmp	r4, r6
    24f4:	da26      	bge.n	2544 <_prf+0x514>
					if (fminus)	{
    24f6:	697b      	ldr	r3, [r7, #20]
    24f8:	b93b      	cbnz	r3, 250a <_prf+0x4da>
    24fa:	e00a      	b.n	2512 <_prf+0x4e2>
						/* Left justify? */
						for (i = c; i < width; i++)
							buf[i] = ' ';
    24fc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
    2500:	4423      	add	r3, r4
    2502:	2220      	movs	r2, #32
    2504:	f803 2ccc 	strb.w	r2, [r3, #-204]

			if (need_justifying) {
				if (c < width) {
					if (fminus)	{
						/* Left justify? */
						for (i = c; i < width; i++)
    2508:	3401      	adds	r4, #1
    250a:	42b4      	cmp	r4, r6
    250c:	dbf6      	blt.n	24fc <_prf+0x4cc>
							prefix = 0;
						c = width - c + prefix;
						for (i = prefix; i < c; i++)
							buf[i] = pad;
					}
					c = width;
    250e:	4634      	mov	r4, r6
    2510:	e018      	b.n	2544 <_prf+0x514>
						/* Left justify? */
						for (i = c; i < width; i++)
							buf[i] = ' ';
					} else {
						/* Right justify */
						(void) memmove((buf + (width - c)), buf, (size_t) (c
    2512:	ebc4 0806 	rsb	r8, r4, r6
    2516:	1c62      	adds	r2, r4, #1
    2518:	f107 0124 	add.w	r1, r7, #36	; 0x24
    251c:	eb01 0008 	add.w	r0, r1, r8
    2520:	f000 f876 	bl	2610 <memmove>
										+ 1));
						if (pad == ' ')
    2524:	f1b9 0f20 	cmp.w	r9, #32
    2528:	d100      	bne.n	252c <_prf+0x4fc>
							prefix = 0;
    252a:	2500      	movs	r5, #0
						c = width - c + prefix;
    252c:	eb05 0208 	add.w	r2, r5, r8
						for (i = prefix; i < c; i++)
    2530:	e005      	b.n	253e <_prf+0x50e>
							buf[i] = pad;
    2532:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
    2536:	442b      	add	r3, r5
    2538:	f803 9ccc 	strb.w	r9, [r3, #-204]
						(void) memmove((buf + (width - c)), buf, (size_t) (c
										+ 1));
						if (pad == ' ')
							prefix = 0;
						c = width - c + prefix;
						for (i = prefix; i < c; i++)
    253c:	3501      	adds	r5, #1
    253e:	4295      	cmp	r5, r2
    2540:	dbf7      	blt.n	2532 <_prf+0x502>
							buf[i] = pad;
					}
					c = width;
    2542:	4634      	mov	r4, r6
    2544:	f107 0524 	add.w	r5, r7, #36	; 0x24
    2548:	4656      	mov	r6, sl
    254a:	e009      	b.n	2560 <_prf+0x530>
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
					if ((*func)(*cptr, dest) == EOF)
    254c:	69b9      	ldr	r1, [r7, #24]
    254e:	7828      	ldrb	r0, [r5, #0]
    2550:	47b0      	blx	r6
    2552:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    2556:	d015      	beq.n	2584 <_prf+0x554>
							buf[i] = pad;
					}
					c = width;
				}

				for (cptr = buf; c > 0; c--, cptr++, count++) {
    2558:	3c01      	subs	r4, #1
    255a:	3501      	adds	r5, #1
    255c:	f10b 0b01 	add.w	fp, fp, #1
    2560:	2c00      	cmp	r4, #0
    2562:	dcf3      	bgt.n	254c <_prf+0x51c>
    2564:	46b2      	mov	sl, r6
	uint32_t			uint32_temp;
	uint64_t			double_temp;

	count = 0;

	while ((c = *format++)) {
    2566:	69fb      	ldr	r3, [r7, #28]
    2568:	1c5a      	adds	r2, r3, #1
    256a:	61fa      	str	r2, [r7, #28]
    256c:	7818      	ldrb	r0, [r3, #0]
    256e:	2800      	cmp	r0, #0
    2570:	f47f ad69 	bne.w	2046 <_prf+0x16>
						return EOF;
				}
			}
		}
	}
	return count;
    2574:	4658      	mov	r0, fp
    2576:	e005      	b.n	2584 <_prf+0x554>
				case '0':
					pad = '0';
					break;

				case '\0':
					return count;
    2578:	4658      	mov	r0, fp
    257a:	e003      	b.n	2584 <_prf+0x554>

				count++;
				break;

			case 0:
				return count;
    257c:	4658      	mov	r0, fp
    257e:	e001      	b.n	2584 <_prf+0x554>
			}

			if (c >= MAXFLD + 1)
				return EOF;
    2580:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
				}
			}
		}
	}
	return count;
}
    2584:	37f4      	adds	r7, #244	; 0xf4
    2586:	46bd      	mov	sp, r7
    2588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000258c <_stdout_hook_default>:
 */

#include <stdio.h>

static int _stdout_hook_default(int c)
{
    258c:	b480      	push	{r7}
    258e:	af00      	add	r7, sp, #0
	(void)(c);  /* Prevent warning about unused argument */

	return EOF;
}
    2590:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2594:	46bd      	mov	sp, r7
    2596:	f85d 7b04 	ldr.w	r7, [sp], #4
    259a:	4770      	bx	lr

0000259c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
    259c:	b480      	push	{r7}
    259e:	af00      	add	r7, sp, #0
	_stdout_hook = hook;
    25a0:	4b02      	ldr	r3, [pc, #8]	; (25ac <__stdout_hook_install+0x10>)
    25a2:	6018      	str	r0, [r3, #0]
}
    25a4:	46bd      	mov	sp, r7
    25a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    25aa:	4770      	bx	lr
    25ac:	2000001c 	.word	0x2000001c

000025b0 <fputc>:

int fputc(int c, FILE *stream)
{
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    25b0:	2902      	cmp	r1, #2
    25b2:	d105      	bne.n	25c0 <fputc+0x10>
{
	_stdout_hook = hook;
}

int fputc(int c, FILE *stream)
{
    25b4:	b580      	push	{r7, lr}
    25b6:	af00      	add	r7, sp, #0
	return (stdout == stream) ? _stdout_hook(c) : EOF;
    25b8:	4b03      	ldr	r3, [pc, #12]	; (25c8 <fputc+0x18>)
    25ba:	681b      	ldr	r3, [r3, #0]
    25bc:	4798      	blx	r3
    25be:	bd80      	pop	{r7, pc}
    25c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    25c4:	4770      	bx	lr
    25c6:	bf00      	nop
    25c8:	2000001c 	.word	0x2000001c

000025cc <strchr>:
 *
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
    25cc:	b480      	push	{r7}
    25ce:	af00      	add	r7, sp, #0
	char tmp = (char) c;
    25d0:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0'))
    25d2:	e000      	b.n	25d6 <strchr+0xa>
		s++;
    25d4:	3001      	adds	r0, #1

char *strchr(const char *s, int c)
{
	char tmp = (char) c;

	while ((*s != tmp) && (*s != '\0'))
    25d6:	7803      	ldrb	r3, [r0, #0]
    25d8:	4299      	cmp	r1, r3
    25da:	d001      	beq.n	25e0 <strchr+0x14>
    25dc:	2b00      	cmp	r3, #0
    25de:	d1f9      	bne.n	25d4 <strchr+0x8>
		s++;

	return (*s == tmp) ? (char *) s : NULL;
    25e0:	4299      	cmp	r1, r3
    25e2:	d000      	beq.n	25e6 <strchr+0x1a>
    25e4:	2000      	movs	r0, #0
}
    25e6:	46bd      	mov	sp, r7
    25e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    25ec:	4770      	bx	lr
    25ee:	bf00      	nop

000025f0 <strcmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
    25f0:	b480      	push	{r7}
    25f2:	af00      	add	r7, sp, #0
	while ((*s1 == *s2) && (*s1 != '\0')) {
    25f4:	e001      	b.n	25fa <strcmp+0xa>
		s1++;
    25f6:	3001      	adds	r0, #1
		s2++;
    25f8:	3101      	adds	r1, #1
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    25fa:	7803      	ldrb	r3, [r0, #0]
    25fc:	780a      	ldrb	r2, [r1, #0]
    25fe:	4293      	cmp	r3, r2
    2600:	d101      	bne.n	2606 <strcmp+0x16>
    2602:	2b00      	cmp	r3, #0
    2604:	d1f7      	bne.n	25f6 <strcmp+0x6>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    2606:	1a98      	subs	r0, r3, r2
    2608:	46bd      	mov	sp, r7
    260a:	f85d 7b04 	ldr.w	r7, [sp], #4
    260e:	4770      	bx	lr

00002610 <memmove>:
void *memmove(void *d, const void *s, size_t n)
{
	char *dest = d;
	const char *src  = s;

	if ((size_t) (d - s) < n) {
    2610:	1a43      	subs	r3, r0, r1
    2612:	4293      	cmp	r3, r2
    2614:	d306      	bcc.n	2624 <memmove+0x14>
 *
 * @return pointer to destination buffer <d>
 */

void *memmove(void *d, const void *s, size_t n)
{
    2616:	b490      	push	{r4, r7}
    2618:	af00      	add	r7, sp, #0
    261a:	4603      	mov	r3, r0
    261c:	e00a      	b.n	2634 <memmove+0x24>
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
			n--;
    261e:	3a01      	subs	r2, #1
			dest[n] = src[n];
    2620:	5c8b      	ldrb	r3, [r1, r2]
    2622:	5483      	strb	r3, [r0, r2]
		/*
		 * The <src> buffer overlaps with the start of the <dest> buffer.
		 * Copy backwards to prevent the premature corruption of <src>.
		 */

		while (n > 0) {
    2624:	2a00      	cmp	r2, #0
    2626:	d1fa      	bne.n	261e <memmove+0xe>
			n--;
		}
	}

	return d;
}
    2628:	4770      	bx	lr
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
			*dest = *src;
    262a:	f811 4b01 	ldrb.w	r4, [r1], #1
    262e:	f803 4b01 	strb.w	r4, [r3], #1
			dest++;
			src++;
			n--;
    2632:	3a01      	subs	r2, #1
			n--;
			dest[n] = src[n];
		}
	} else {
		/* It is safe to perform a forward-copy */
		while (n > 0) {
    2634:	2a00      	cmp	r2, #0
    2636:	d1f8      	bne.n	262a <memmove+0x1a>
			n--;
		}
	}

	return d;
}
    2638:	46bd      	mov	sp, r7
    263a:	bc90      	pop	{r4, r7}
    263c:	4770      	bx	lr
    263e:	bf00      	nop

00002640 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_Restrict d, const void *_Restrict s, size_t n)
{
    2640:	b490      	push	{r4, r7}
    2642:	af00      	add	r7, sp, #0
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {
    2644:	ea80 0301 	eor.w	r3, r0, r1
    2648:	f013 0f03 	tst.w	r3, #3
    264c:	d008      	beq.n	2660 <memcpy+0x20>

void *memcpy(void *_Restrict d, const void *_Restrict s, size_t n)
{
	/* attempt word-sized copying only if buffers have identical alignment */

	unsigned char *d_byte = (unsigned char *)d;
    264e:	4603      	mov	r3, r0
    2650:	e018      	b.n	2684 <memcpy+0x44>
	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
    2652:	b1ca      	cbz	r2, 2688 <memcpy+0x48>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    2654:	780c      	ldrb	r4, [r1, #0]
    2656:	701c      	strb	r4, [r3, #0]
			n--;
    2658:	3a01      	subs	r2, #1

		while (((unsigned int)d_byte) & 0x3) {
			if (n == 0) {
				return d;
			}
			*(d_byte++) = *(s_byte++);
    265a:	3101      	adds	r1, #1
    265c:	3301      	adds	r3, #1
    265e:	e000      	b.n	2662 <memcpy+0x22>
    2660:	4603      	mov	r3, r0

	if ((((unsigned int)d ^ (unsigned int)s_byte) & 0x3) == 0) {

		/* do byte-sized copying until word-aligned or finished */

		while (((unsigned int)d_byte) & 0x3) {
    2662:	f013 0f03 	tst.w	r3, #3
    2666:	d1f4      	bne.n	2652 <memcpy+0x12>
    2668:	e004      	b.n	2674 <memcpy+0x34>

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
			*(d_word++) = *(s_word++);
    266a:	680c      	ldr	r4, [r1, #0]
    266c:	601c      	str	r4, [r3, #0]
			n -= sizeof(unsigned int);
    266e:	3a04      	subs	r2, #4

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
			*(d_word++) = *(s_word++);
    2670:	3104      	adds	r1, #4
    2672:	3304      	adds	r3, #4
		/* do word-sized copying as long as possible */

		unsigned int *d_word = (unsigned int *)d_byte;
		const unsigned int *s_word = (const unsigned int *)s_byte;

		while (n >= sizeof(unsigned int)) {
    2674:	2a03      	cmp	r2, #3
    2676:	d8f8      	bhi.n	266a <memcpy+0x2a>
    2678:	e004      	b.n	2684 <memcpy+0x44>
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    267a:	780c      	ldrb	r4, [r1, #0]
    267c:	701c      	strb	r4, [r3, #0]
		n--;
    267e:	3a01      	subs	r2, #1
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    2680:	3101      	adds	r1, #1
    2682:	3301      	adds	r3, #1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
    2684:	2a00      	cmp	r2, #0
    2686:	d1f8      	bne.n	267a <memcpy+0x3a>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    2688:	46bd      	mov	sp, r7
    268a:	bc90      	pop	{r4, r7}
    268c:	4770      	bx	lr
    268e:	bf00      	nop

00002690 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    2690:	b4b0      	push	{r4, r5, r7}
    2692:	af00      	add	r7, sp, #0
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    2694:	b2cc      	uxtb	r4, r1

void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
    2696:	4603      	mov	r3, r0
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
    2698:	e003      	b.n	26a2 <memset+0x12>
		if (n == 0) {
    269a:	b1c2      	cbz	r2, 26ce <memset+0x3e>
			return buf;
		}
		*(d_byte++) = c_byte;
    269c:	701c      	strb	r4, [r3, #0]
		n--;
    269e:	3a01      	subs	r2, #1

	while (((unsigned int)d_byte) & 0x3) {
		if (n == 0) {
			return buf;
		}
		*(d_byte++) = c_byte;
    26a0:	3301      	adds	r3, #1
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;

	while (((unsigned int)d_byte) & 0x3) {
    26a2:	f013 0f03 	tst.w	r3, #3
    26a6:	d1f8      	bne.n	269a <memset+0xa>
	};

	/* do word-sized initialization as long as possible */

	unsigned int *d_word = (unsigned int *)d_byte;
	unsigned int c_word = (unsigned int)(unsigned char)c;
    26a8:	b2cd      	uxtb	r5, r1

	c_word |= c_word << 8;
    26aa:	0209      	lsls	r1, r1, #8
    26ac:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
    26b0:	4329      	orrs	r1, r5
	c_word |= c_word << 16;
    26b2:	ea41 4101 	orr.w	r1, r1, r1, lsl #16

	while (n >= sizeof(unsigned int)) {
    26b6:	e002      	b.n	26be <memset+0x2e>
		*(d_word++) = c_word;
    26b8:	6019      	str	r1, [r3, #0]
		n -= sizeof(unsigned int);
    26ba:	3a04      	subs	r2, #4

	c_word |= c_word << 8;
	c_word |= c_word << 16;

	while (n >= sizeof(unsigned int)) {
		*(d_word++) = c_word;
    26bc:	3304      	adds	r3, #4
	unsigned int c_word = (unsigned int)(unsigned char)c;

	c_word |= c_word << 8;
	c_word |= c_word << 16;

	while (n >= sizeof(unsigned int)) {
    26be:	2a03      	cmp	r2, #3
    26c0:	d8fa      	bhi.n	26b8 <memset+0x28>
    26c2:	e002      	b.n	26ca <memset+0x3a>
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
    26c4:	701c      	strb	r4, [r3, #0]
		n--;
    26c6:	3a01      	subs	r2, #1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
		*(d_byte++) = c_byte;
    26c8:	3301      	adds	r3, #1

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
    26ca:	2a00      	cmp	r2, #0
    26cc:	d1fa      	bne.n	26c4 <memset+0x34>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    26ce:	46bd      	mov	sp, r7
    26d0:	bcb0      	pop	{r4, r5, r7}
    26d2:	4770      	bx	lr

000026d4 <_nop_char_out>:
 * @param c Character to swallow
 *
 * @return 0
 */
static int _nop_char_out(int c)
{
    26d4:	b480      	push	{r7}
    26d6:	af00      	add	r7, sp, #0
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    26d8:	2000      	movs	r0, #0
    26da:	46bd      	mov	sp, r7
    26dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    26e0:	4770      	bx	lr
    26e2:	bf00      	nop

000026e4 <_printk_hex_ulong>:
 * @param num Number to output
 *
 * @return N/A
 */
static void _printk_hex_ulong(const unsigned long num)
{
    26e4:	b5b0      	push	{r4, r5, r7, lr}
    26e6:	af00      	add	r7, sp, #0
    26e8:	4605      	mov	r5, r0
	int size = sizeof(num) * 2;
    26ea:	2408      	movs	r4, #8

	for (; size; size--) {
    26ec:	e00e      	b.n	270c <_printk_hex_ulong+0x28>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    26ee:	3c01      	subs	r4, #1
    26f0:	00a3      	lsls	r3, r4, #2
    26f2:	fa25 f303 	lsr.w	r3, r5, r3
    26f6:	f003 030f 	and.w	r3, r3, #15
		nibble += nibble > 9 ? 87 : 48;
    26fa:	2b09      	cmp	r3, #9
    26fc:	d901      	bls.n	2702 <_printk_hex_ulong+0x1e>
    26fe:	2057      	movs	r0, #87	; 0x57
    2700:	e000      	b.n	2704 <_printk_hex_ulong+0x20>
    2702:	2030      	movs	r0, #48	; 0x30
		_char_out((int)nibble);
    2704:	4a03      	ldr	r2, [pc, #12]	; (2714 <_printk_hex_ulong+0x30>)
    2706:	6812      	ldr	r2, [r2, #0]
    2708:	4418      	add	r0, r3
    270a:	4790      	blx	r2
 */
static void _printk_hex_ulong(const unsigned long num)
{
	int size = sizeof(num) * 2;

	for (; size; size--) {
    270c:	2c00      	cmp	r4, #0
    270e:	d1ee      	bne.n	26ee <_printk_hex_ulong+0xa>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
		nibble += nibble > 9 ? 87 : 48;
		_char_out((int)nibble);
	}
}
    2710:	bdb0      	pop	{r4, r5, r7, pc}
    2712:	bf00      	nop
    2714:	20000020 	.word	0x20000020

00002718 <_printk_dec_ulong>:
 * @param num Number to output
 *
 * @return N/A
 */
static void _printk_dec_ulong(const unsigned long num)
{
    2718:	b5b0      	push	{r4, r5, r7, lr}
    271a:	af00      	add	r7, sp, #0
    271c:	4605      	mov	r5, r0
	unsigned long pos = 999999999;
	unsigned long remainder = num;
	int found_largest_digit = 0;
    271e:	2100      	movs	r1, #0
 *
 * @return N/A
 */
static void _printk_dec_ulong(const unsigned long num)
{
	unsigned long pos = 999999999;
    2720:	4c0e      	ldr	r4, [pc, #56]	; (275c <_printk_dec_ulong+0x44>)
	unsigned long remainder = num;
	int found_largest_digit = 0;

	while (pos >= 9) {
    2722:	e013      	b.n	274c <_printk_dec_ulong+0x34>
		if (found_largest_digit || remainder > pos) {
    2724:	b909      	cbnz	r1, 272a <_printk_dec_ulong+0x12>
    2726:	42ac      	cmp	r4, r5
    2728:	d207      	bcs.n	273a <_printk_dec_ulong+0x22>
			found_largest_digit = 1;
			_char_out((int)((remainder / (pos + 1)) + 48));
    272a:	1c60      	adds	r0, r4, #1
    272c:	fbb5 f0f0 	udiv	r0, r5, r0
    2730:	4b0b      	ldr	r3, [pc, #44]	; (2760 <_printk_dec_ulong+0x48>)
    2732:	681b      	ldr	r3, [r3, #0]
    2734:	3030      	adds	r0, #48	; 0x30
    2736:	4798      	blx	r3
	unsigned long remainder = num;
	int found_largest_digit = 0;

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2738:	2101      	movs	r1, #1
			_char_out((int)((remainder / (pos + 1)) + 48));
		}
		remainder %= (pos + 1);
    273a:	1c63      	adds	r3, r4, #1
    273c:	fbb5 f2f3 	udiv	r2, r5, r3
    2740:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2744:	4b07      	ldr	r3, [pc, #28]	; (2764 <_printk_dec_ulong+0x4c>)
    2746:	fba3 3404 	umull	r3, r4, r3, r4
    274a:	08e4      	lsrs	r4, r4, #3
{
	unsigned long pos = 999999999;
	unsigned long remainder = num;
	int found_largest_digit = 0;

	while (pos >= 9) {
    274c:	2c08      	cmp	r4, #8
    274e:	d8e9      	bhi.n	2724 <_printk_dec_ulong+0xc>
			_char_out((int)((remainder / (pos + 1)) + 48));
		}
		remainder %= (pos + 1);
		pos /= 10;
	}
	_char_out((int)(remainder + 48));
    2750:	4b03      	ldr	r3, [pc, #12]	; (2760 <_printk_dec_ulong+0x48>)
    2752:	681b      	ldr	r3, [r3, #0]
    2754:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2758:	4798      	blx	r3
    275a:	bdb0      	pop	{r4, r5, r7, pc}
    275c:	3b9ac9ff 	.word	0x3b9ac9ff
    2760:	20000020 	.word	0x20000020
    2764:	cccccccd 	.word	0xcccccccd

00002768 <__printk_hook_install>:
 * @param fn putc routine to install
 *
 * @return N/A
 */
void __printk_hook_install(int (*fn)(int))
{
    2768:	b480      	push	{r7}
    276a:	af00      	add	r7, sp, #0
	_char_out = fn;
    276c:	4b02      	ldr	r3, [pc, #8]	; (2778 <__printk_hook_install+0x10>)
    276e:	6018      	str	r0, [r3, #0]
}
    2770:	46bd      	mov	sp, r7
    2772:	f85d 7b04 	ldr.w	r7, [sp], #4
    2776:	4770      	bx	lr
    2778:	20000020 	.word	0x20000020

0000277c <printk>:
 * @param fmt formatted string to output
 *
 * @return N/A
 */
void printk(const char *fmt, ...)
{
    277c:	b40f      	push	{r0, r1, r2, r3}
    277e:	b5f0      	push	{r4, r5, r6, r7, lr}
    2780:	b083      	sub	sp, #12
    2782:	af00      	add	r7, sp, #0
    2784:	f107 0620 	add.w	r6, r7, #32
    2788:	f856 4b04 	ldr.w	r4, [r6], #4
	va_list ap;

	va_start(ap, fmt);
    278c:	607e      	str	r6, [r7, #4]
 *
 * @return N/A
 */
static inline void _vprintk(const char *fmt, va_list ap)
{
	int might_format = 0; /* 1 if encountered a '%' */
    278e:	2500      	movs	r5, #0
    2790:	e07b      	b.n	288a <printk+0x10e>

	/* fmt has already been adjusted if needed */

	while (*fmt) {
		if (!might_format) {
    2792:	b92d      	cbnz	r5, 27a0 <printk+0x24>
			if (*fmt != '%') {
    2794:	2825      	cmp	r0, #37	; 0x25
    2796:	d076      	beq.n	2886 <printk+0x10a>
				_char_out((int)*fmt);
    2798:	4b40      	ldr	r3, [pc, #256]	; (289c <printk+0x120>)
    279a:	681b      	ldr	r3, [r3, #0]
    279c:	4798      	blx	r3
    279e:	e073      	b.n	2888 <printk+0x10c>
			} else {
				might_format = 1;
			}
		} else {
			switch (*fmt) {
    27a0:	3825      	subs	r0, #37	; 0x25
    27a2:	2855      	cmp	r0, #85	; 0x55
    27a4:	d866      	bhi.n	2874 <printk+0xf8>
    27a6:	e8df f000 	tbb	[pc, r0]
    27aa:	655f      	.short	0x655f
    27ac:	65656565 	.word	0x65656565
    27b0:	65656565 	.word	0x65656565
    27b4:	65656565 	.word	0x65656565
    27b8:	65656565 	.word	0x65656565
    27bc:	65656565 	.word	0x65656565
    27c0:	65656565 	.word	0x65656565
    27c4:	65656565 	.word	0x65656565
    27c8:	65656565 	.word	0x65656565
    27cc:	65656565 	.word	0x65656565
    27d0:	65656565 	.word	0x65656565
    27d4:	65656565 	.word	0x65656565
    27d8:	65656565 	.word	0x65656565
    27dc:	65654665 	.word	0x65654665
    27e0:	65656565 	.word	0x65656565
    27e4:	65656565 	.word	0x65656565
    27e8:	65652b58 	.word	0x65652b58
    27ec:	652b6f65 	.word	0x652b6f65
    27f0:	65656f65 	.word	0x65656f65
    27f4:	65653f65 	.word	0x65653f65
    27f8:	6539654c 	.word	0x6539654c
    27fc:	6f654665 	.word	0x6f654665
			case 'h':
				/* FIXME: do nothing for these modifiers */
				goto still_might_format;
			case 'd':
			case 'i': {
				long d = va_arg(ap, long);
    2800:	6835      	ldr	r5, [r6, #0]
    2802:	3604      	adds	r6, #4

				if (d < 0) {
    2804:	2d00      	cmp	r5, #0
    2806:	da04      	bge.n	2812 <printk+0x96>
					_char_out((int)'-');
    2808:	4b24      	ldr	r3, [pc, #144]	; (289c <printk+0x120>)
    280a:	681b      	ldr	r3, [r3, #0]
    280c:	202d      	movs	r0, #45	; 0x2d
    280e:	4798      	blx	r3
					d = -d;
    2810:	426d      	negs	r5, r5
				}
				_printk_dec_ulong(d);
    2812:	4628      	mov	r0, r5
    2814:	f7ff ff80 	bl	2718 <_printk_dec_ulong>
			default:
				_char_out((int)'%');
				_char_out((int)*fmt);
				break;
			}
			might_format = 0;
    2818:	2500      	movs	r5, #0
    281a:	e035      	b.n	2888 <printk+0x10c>
				break;
			}
			case 'u': {
				unsigned long u = va_arg(
					ap, unsigned long);
				_printk_dec_ulong(u);
    281c:	6830      	ldr	r0, [r6, #0]
    281e:	3604      	adds	r6, #4
    2820:	f7ff ff7a 	bl	2718 <_printk_dec_ulong>
			default:
				_char_out((int)'%');
				_char_out((int)*fmt);
				break;
			}
			might_format = 0;
    2824:	2500      	movs	r5, #0
    2826:	e02f      	b.n	2888 <printk+0x10c>
					ap, unsigned long);
				_printk_dec_ulong(u);
				break;
			}
			case 'p':
				  _char_out('0');
    2828:	4d1c      	ldr	r5, [pc, #112]	; (289c <printk+0x120>)
    282a:	682b      	ldr	r3, [r5, #0]
    282c:	2030      	movs	r0, #48	; 0x30
    282e:	4798      	blx	r3
				  _char_out('x');
    2830:	682b      	ldr	r3, [r5, #0]
    2832:	2078      	movs	r0, #120	; 0x78
    2834:	4798      	blx	r3
				  /* Fall through */
			case 'x':
			case 'X': {
				unsigned long x = va_arg(
					ap, unsigned long);
				_printk_hex_ulong(x);
    2836:	6830      	ldr	r0, [r6, #0]
    2838:	3604      	adds	r6, #4
    283a:	f7ff ff53 	bl	26e4 <_printk_hex_ulong>
			default:
				_char_out((int)'%');
				_char_out((int)*fmt);
				break;
			}
			might_format = 0;
    283e:	2500      	movs	r5, #0
    2840:	e022      	b.n	2888 <printk+0x10c>
					ap, unsigned long);
				_printk_hex_ulong(x);
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);
    2842:	6835      	ldr	r5, [r6, #0]
    2844:	3604      	adds	r6, #4
    2846:	e003      	b.n	2850 <printk+0xd4>

				while (*s)
					_char_out((int)(*s++));
    2848:	3501      	adds	r5, #1
    284a:	4b14      	ldr	r3, [pc, #80]	; (289c <printk+0x120>)
    284c:	681b      	ldr	r3, [r3, #0]
    284e:	4798      	blx	r3
				break;
			}
			case 's': {
				char *s = va_arg(ap, char *);

				while (*s)
    2850:	7828      	ldrb	r0, [r5, #0]
    2852:	2800      	cmp	r0, #0
    2854:	d1f8      	bne.n	2848 <printk+0xcc>
			default:
				_char_out((int)'%');
				_char_out((int)*fmt);
				break;
			}
			might_format = 0;
    2856:	2500      	movs	r5, #0
    2858:	e016      	b.n	2888 <printk+0x10c>
				break;
			}
			case 'c': {
				int c = va_arg(ap, int);

				_char_out(c);
    285a:	4a10      	ldr	r2, [pc, #64]	; (289c <printk+0x120>)
    285c:	6812      	ldr	r2, [r2, #0]
    285e:	6830      	ldr	r0, [r6, #0]
    2860:	3604      	adds	r6, #4
    2862:	4790      	blx	r2
			default:
				_char_out((int)'%');
				_char_out((int)*fmt);
				break;
			}
			might_format = 0;
    2864:	2500      	movs	r5, #0
    2866:	e00f      	b.n	2888 <printk+0x10c>

				_char_out(c);
				break;
			}
			case '%': {
				_char_out((int)'%');
    2868:	4b0c      	ldr	r3, [pc, #48]	; (289c <printk+0x120>)
    286a:	681b      	ldr	r3, [r3, #0]
    286c:	2025      	movs	r0, #37	; 0x25
    286e:	4798      	blx	r3
			default:
				_char_out((int)'%');
				_char_out((int)*fmt);
				break;
			}
			might_format = 0;
    2870:	2500      	movs	r5, #0
    2872:	e009      	b.n	2888 <printk+0x10c>
			case '%': {
				_char_out((int)'%');
				break;
			}
			default:
				_char_out((int)'%');
    2874:	4d09      	ldr	r5, [pc, #36]	; (289c <printk+0x120>)
    2876:	682b      	ldr	r3, [r5, #0]
    2878:	2025      	movs	r0, #37	; 0x25
    287a:	4798      	blx	r3
				_char_out((int)*fmt);
    287c:	682b      	ldr	r3, [r5, #0]
    287e:	7820      	ldrb	r0, [r4, #0]
    2880:	4798      	blx	r3
				break;
			}
			might_format = 0;
    2882:	2500      	movs	r5, #0
    2884:	e000      	b.n	2888 <printk+0x10c>
	while (*fmt) {
		if (!might_format) {
			if (*fmt != '%') {
				_char_out((int)*fmt);
			} else {
				might_format = 1;
    2886:	2501      	movs	r5, #1
				break;
			}
			might_format = 0;
		}
still_might_format:
		++fmt;
    2888:	3401      	adds	r4, #1
{
	int might_format = 0; /* 1 if encountered a '%' */

	/* fmt has already been adjusted if needed */

	while (*fmt) {
    288a:	7820      	ldrb	r0, [r4, #0]
    288c:	2800      	cmp	r0, #0
    288e:	d180      	bne.n	2792 <printk+0x16>
	va_list ap;

	va_start(ap, fmt);
	_vprintk(fmt, ap);
	va_end(ap);
}
    2890:	370c      	adds	r7, #12
    2892:	46bd      	mov	sp, r7
    2894:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2898:	b004      	add	sp, #16
    289a:	4770      	bx	lr
    289c:	20000020 	.word	0x20000020

000028a0 <_ConfigAbsSyms>:
/* file is auto-generated, do not modify ! */

#include <toolchain.h>

GEN_ABS_SYM_BEGIN (_ConfigAbsSyms)
    28a0:	b480      	push	{r7}
    28a2:	af00      	add	r7, sp, #0
GEN_ABSOLUTE_SYM(CONFIG_HAS_MCG, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_UART_K20_PORT_0_BAUD_RATE, 115200);
GEN_ABSOLUTE_SYM(CONFIG_UART_K20_PORT_2_IRQ_PRI, 3);

GEN_ABS_SYM_END
    28a4:	46bd      	mov	sp, r7
    28a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    28aa:	4770      	bx	lr

000028ac <CLOCK_GetMcgExtClkFreq>:
/*******************************************************************************
 * Code
 ******************************************************************************/

static uint32_t CLOCK_GetMcgExtClkFreq(void)
{
    28ac:	b480      	push	{r7}
    28ae:	af00      	add	r7, sp, #0
    uint32_t freq;

    switch (MCG_C7_OSCSEL_VAL)
    28b0:	4b0a      	ldr	r3, [pc, #40]	; (28dc <CLOCK_GetMcgExtClkFreq+0x30>)
    28b2:	7b1b      	ldrb	r3, [r3, #12]
    28b4:	f003 0303 	and.w	r3, r3, #3
    28b8:	2b01      	cmp	r3, #1
    28ba:	d007      	beq.n	28cc <CLOCK_GetMcgExtClkFreq+0x20>
    28bc:	b11b      	cbz	r3, 28c6 <CLOCK_GetMcgExtClkFreq+0x1a>
    28be:	2b02      	cmp	r3, #2
    28c0:	d107      	bne.n	28d2 <CLOCK_GetMcgExtClkFreq+0x26>
            /* Please call CLOCK_SetXtal32Freq base on board setting before using XTAL32K/RTC_CLKIN clock. */
            assert(g_xtal32Freq);
            freq = g_xtal32Freq;
            break;
        case 2U:
            freq = MCG_INTERNAL_IRC_48M;
    28c2:	4807      	ldr	r0, [pc, #28]	; (28e0 <CLOCK_GetMcgExtClkFreq+0x34>)
    28c4:	e006      	b.n	28d4 <CLOCK_GetMcgExtClkFreq+0x28>
    switch (MCG_C7_OSCSEL_VAL)
    {
        case 0U:
            /* Please call CLOCK_SetXtal0Freq base on board setting before using OSC0 clock. */
            assert(g_xtal0Freq);
            freq = g_xtal0Freq;
    28c6:	4b07      	ldr	r3, [pc, #28]	; (28e4 <CLOCK_GetMcgExtClkFreq+0x38>)
    28c8:	6818      	ldr	r0, [r3, #0]
            break;
    28ca:	e003      	b.n	28d4 <CLOCK_GetMcgExtClkFreq+0x28>
        case 1U:
            /* Please call CLOCK_SetXtal32Freq base on board setting before using XTAL32K/RTC_CLKIN clock. */
            assert(g_xtal32Freq);
            freq = g_xtal32Freq;
    28cc:	4b06      	ldr	r3, [pc, #24]	; (28e8 <CLOCK_GetMcgExtClkFreq+0x3c>)
    28ce:	6818      	ldr	r0, [r3, #0]
            break;
    28d0:	e000      	b.n	28d4 <CLOCK_GetMcgExtClkFreq+0x28>
        case 2U:
            freq = MCG_INTERNAL_IRC_48M;
            break;
        default:
            freq = 0U;
    28d2:	2000      	movs	r0, #0
            break;
    }

    return freq;
}
    28d4:	46bd      	mov	sp, r7
    28d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    28da:	4770      	bx	lr
    28dc:	40064000 	.word	0x40064000
    28e0:	02dc6c00 	.word	0x02dc6c00
    28e4:	20000324 	.word	0x20000324
    28e8:	20000320 	.word	0x20000320

000028ec <CLOCK_GetFllExtRefClkFreq>:

static uint32_t CLOCK_GetFllExtRefClkFreq(void)
{
    28ec:	b580      	push	{r7, lr}
    28ee:	af00      	add	r7, sp, #0
    /* FllExtRef = McgExtRef / FllExtRefDiv */
    uint8_t frdiv;
    uint8_t range;
    uint8_t oscsel;

    uint32_t freq = CLOCK_GetMcgExtClkFreq();
    28f0:	f7ff ffdc 	bl	28ac <CLOCK_GetMcgExtClkFreq>

    if (!freq)
    28f4:	4603      	mov	r3, r0
    28f6:	b310      	cbz	r0, 293e <CLOCK_GetFllExtRefClkFreq+0x52>
    {
        return freq;
    }

    frdiv = MCG_C1_FRDIV_VAL;
    28f8:	4913      	ldr	r1, [pc, #76]	; (2948 <CLOCK_GetFllExtRefClkFreq+0x5c>)
    28fa:	780a      	ldrb	r2, [r1, #0]
    28fc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    freq >>= frdiv;
    2900:	40d3      	lsrs	r3, r2

    range = MCG_C2_RANGE_VAL;
    2902:	7848      	ldrb	r0, [r1, #1]
    oscsel = MCG_C7_OSCSEL_VAL;
    2904:	7b09      	ldrb	r1, [r1, #12]
    2906:	f001 0103 	and.w	r1, r1, #3
    /*
       When should use divider 32, 64, 128, 256, 512, 1024, 1280, 1536.
       1. MCG_C7[OSCSEL] selects IRC48M.
       2. MCG_C7[OSCSEL] selects OSC0 and MCG_C2[RANGE] is not 0.
    */
    if (((0U != range) && (kMCG_OscselOsc == oscsel)) || (kMCG_OscselIrc == oscsel))
    290a:	f010 0f30 	tst.w	r0, #48	; 0x30
    290e:	d000      	beq.n	2912 <CLOCK_GetFllExtRefClkFreq+0x26>
    2910:	b109      	cbz	r1, 2916 <CLOCK_GetFllExtRefClkFreq+0x2a>
    2912:	2902      	cmp	r1, #2
    2914:	d114      	bne.n	2940 <CLOCK_GetFllExtRefClkFreq+0x54>
    {
        switch (frdiv)
    2916:	2a07      	cmp	r2, #7
    2918:	d814      	bhi.n	2944 <CLOCK_GetFllExtRefClkFreq+0x58>
    291a:	e8df f002 	tbb	[pc, r2]
    291e:	0404      	.short	0x0404
    2920:	04040404 	.word	0x04040404
    2924:	0b06      	.short	0x0b06
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                freq >>= 5u;
    2926:	0958      	lsrs	r0, r3, #5
                break;
    2928:	bd80      	pop	{r7, pc}
            case 6:
                /* 64*20=1280 */
                freq /= 20u;
    292a:	4808      	ldr	r0, [pc, #32]	; (294c <CLOCK_GetFllExtRefClkFreq+0x60>)
    292c:	fba0 3003 	umull	r3, r0, r0, r3
    2930:	0900      	lsrs	r0, r0, #4
                break;
    2932:	bd80      	pop	{r7, pc}
            case 7:
                /* 128*12=1536 */
                freq /= 12u;
    2934:	4806      	ldr	r0, [pc, #24]	; (2950 <CLOCK_GetFllExtRefClkFreq+0x64>)
    2936:	fba0 3003 	umull	r3, r0, r0, r3
    293a:	08c0      	lsrs	r0, r0, #3
                break;
    293c:	bd80      	pop	{r7, pc}
    293e:	bd80      	pop	{r7, pc}
    {
        return freq;
    }

    frdiv = MCG_C1_FRDIV_VAL;
    freq >>= frdiv;
    2940:	4618      	mov	r0, r3
    2942:	bd80      	pop	{r7, pc}
            case 7:
                /* 128*12=1536 */
                freq /= 12u;
                break;
            default:
                freq = 0u;
    2944:	2000      	movs	r0, #0
                break;
        }
    }

    return freq;
}
    2946:	bd80      	pop	{r7, pc}
    2948:	40064000 	.word	0x40064000
    294c:	cccccccd 	.word	0xcccccccd
    2950:	aaaaaaab 	.word	0xaaaaaaab

00002954 <CLOCK_GetInternalRefClkSelectFreq>:

static uint32_t CLOCK_GetInternalRefClkSelectFreq(void)
{
    2954:	b480      	push	{r7}
    2956:	af00      	add	r7, sp, #0
    if (kMCG_IrcSlow == MCG_S_IRCST_VAL)
    2958:	4b09      	ldr	r3, [pc, #36]	; (2980 <CLOCK_GetInternalRefClkSelectFreq+0x2c>)
    295a:	799b      	ldrb	r3, [r3, #6]
    295c:	f013 0f01 	tst.w	r3, #1
    2960:	d102      	bne.n	2968 <CLOCK_GetInternalRefClkSelectFreq+0x14>
    {
        /* Slow internal reference clock selected*/
        return s_slowIrcFreq;
    2962:	4b08      	ldr	r3, [pc, #32]	; (2984 <CLOCK_GetInternalRefClkSelectFreq+0x30>)
    2964:	6818      	ldr	r0, [r3, #0]
    2966:	e007      	b.n	2978 <CLOCK_GetInternalRefClkSelectFreq+0x24>
    }
    else
    {
        /* Fast internal reference clock selected*/
        return s_fastIrcFreq >> MCG_SC_FCRDIV_VAL;
    2968:	4b07      	ldr	r3, [pc, #28]	; (2988 <CLOCK_GetInternalRefClkSelectFreq+0x34>)
    296a:	681b      	ldr	r3, [r3, #0]
    296c:	4a04      	ldr	r2, [pc, #16]	; (2980 <CLOCK_GetInternalRefClkSelectFreq+0x2c>)
    296e:	7a10      	ldrb	r0, [r2, #8]
    2970:	f3c0 0042 	ubfx	r0, r0, #1, #3
    2974:	fa23 f000 	lsr.w	r0, r3, r0
    }
}
    2978:	46bd      	mov	sp, r7
    297a:	f85d 7b04 	ldr.w	r7, [sp], #4
    297e:	4770      	bx	lr
    2980:	40064000 	.word	0x40064000
    2984:	20000024 	.word	0x20000024
    2988:	20000028 	.word	0x20000028

0000298c <CLOCK_GetFllRefClkFreq>:

static uint32_t CLOCK_GetFllRefClkFreq(void)
{
    /* If use external reference clock. */
    if (kMCG_FllSrcExternal == MCG_S_IREFST_VAL)
    298c:	4b06      	ldr	r3, [pc, #24]	; (29a8 <CLOCK_GetFllRefClkFreq+0x1c>)
    298e:	799b      	ldrb	r3, [r3, #6]
    2990:	f013 0f10 	tst.w	r3, #16
    2994:	d104      	bne.n	29a0 <CLOCK_GetFllRefClkFreq+0x14>
        return s_fastIrcFreq >> MCG_SC_FCRDIV_VAL;
    }
}

static uint32_t CLOCK_GetFllRefClkFreq(void)
{
    2996:	b580      	push	{r7, lr}
    2998:	af00      	add	r7, sp, #0
    /* If use external reference clock. */
    if (kMCG_FllSrcExternal == MCG_S_IREFST_VAL)
    {
        return CLOCK_GetFllExtRefClkFreq();
    299a:	f7ff ffa7 	bl	28ec <CLOCK_GetFllExtRefClkFreq>
    299e:	bd80      	pop	{r7, pc}
    }
    /* If use internal reference clock. */
    else
    {
        return s_slowIrcFreq;
    29a0:	4b02      	ldr	r3, [pc, #8]	; (29ac <CLOCK_GetFllRefClkFreq+0x20>)
    29a2:	6818      	ldr	r0, [r3, #0]
    29a4:	4770      	bx	lr
    29a6:	bf00      	nop
    29a8:	40064000 	.word	0x40064000
    29ac:	20000024 	.word	0x20000024

000029b0 <CLOCK_GetPll0RefFreq>:
    }
}

static uint32_t CLOCK_GetPll0RefFreq(void)
{
    29b0:	b580      	push	{r7, lr}
    29b2:	af00      	add	r7, sp, #0
    /* MCG external reference clock. */
    return CLOCK_GetMcgExtClkFreq();
    29b4:	f7ff ff7a 	bl	28ac <CLOCK_GetMcgExtClkFreq>
}
    29b8:	bd80      	pop	{r7, pc}
    29ba:	bf00      	nop

000029bc <CLOCK_GetOscRangeFromFreq>:

static uint8_t CLOCK_GetOscRangeFromFreq(uint32_t freq)
{
    29bc:	b480      	push	{r7}
    29be:	af00      	add	r7, sp, #0
    uint8_t range;

    if (freq <= 39063U)
    29c0:	f649 0397 	movw	r3, #39063	; 0x9897
    29c4:	4298      	cmp	r0, r3
    29c6:	d904      	bls.n	29d2 <CLOCK_GetOscRangeFromFreq+0x16>
    {
        range = 0U;
    }
    else if (freq <= 8000000U)
    29c8:	4b05      	ldr	r3, [pc, #20]	; (29e0 <CLOCK_GetOscRangeFromFreq+0x24>)
    29ca:	4298      	cmp	r0, r3
    29cc:	d803      	bhi.n	29d6 <CLOCK_GetOscRangeFromFreq+0x1a>
    {
        range = 1U;
    29ce:	2001      	movs	r0, #1
    29d0:	e002      	b.n	29d8 <CLOCK_GetOscRangeFromFreq+0x1c>
{
    uint8_t range;

    if (freq <= 39063U)
    {
        range = 0U;
    29d2:	2000      	movs	r0, #0
    29d4:	e000      	b.n	29d8 <CLOCK_GetOscRangeFromFreq+0x1c>
    {
        range = 1U;
    }
    else
    {
        range = 2U;
    29d6:	2002      	movs	r0, #2
    }

    return range;
}
    29d8:	46bd      	mov	sp, r7
    29da:	f85d 7b04 	ldr.w	r7, [sp], #4
    29de:	4770      	bx	lr
    29e0:	007a1200 	.word	0x007a1200

000029e4 <CLOCK_GetOsc0ErClkFreq>:
        __NOP();
    }
}

uint32_t CLOCK_GetOsc0ErClkFreq(void)
{
    29e4:	b480      	push	{r7}
    29e6:	af00      	add	r7, sp, #0
    if (OSC0->CR & OSC_CR_ERCLKEN_MASK)
    29e8:	4b06      	ldr	r3, [pc, #24]	; (2a04 <CLOCK_GetOsc0ErClkFreq+0x20>)
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	f013 0f80 	tst.w	r3, #128	; 0x80
    29f0:	d002      	beq.n	29f8 <CLOCK_GetOsc0ErClkFreq+0x14>
    {
        /* Please call CLOCK_SetXtal0Freq base on board setting before using OSC0 clock. */
        assert(g_xtal0Freq);
        return g_xtal0Freq;
    29f2:	4b05      	ldr	r3, [pc, #20]	; (2a08 <CLOCK_GetOsc0ErClkFreq+0x24>)
    29f4:	6818      	ldr	r0, [r3, #0]
    29f6:	e000      	b.n	29fa <CLOCK_GetOsc0ErClkFreq+0x16>
    }
    else
    {
        return 0U;
    29f8:	2000      	movs	r0, #0
    }
}
    29fa:	46bd      	mov	sp, r7
    29fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2a00:	4770      	bx	lr
    2a02:	bf00      	nop
    2a04:	40065000 	.word	0x40065000
    2a08:	20000324 	.word	0x20000324

00002a0c <CLOCK_GetEr32kClkFreq>:

uint32_t CLOCK_GetEr32kClkFreq(void)
{
    uint32_t freq;

    switch (SIM_SOPT1_OSC32KSEL_VAL)
    2a0c:	4b0d      	ldr	r3, [pc, #52]	; (2a44 <CLOCK_GetEr32kClkFreq+0x38>)
    2a0e:	681b      	ldr	r3, [r3, #0]
    2a10:	f3c3 4381 	ubfx	r3, r3, #18, #2
    2a14:	2b02      	cmp	r3, #2
    2a16:	d00e      	beq.n	2a36 <CLOCK_GetEr32kClkFreq+0x2a>
    2a18:	2b03      	cmp	r3, #3
    2a1a:	d003      	beq.n	2a24 <CLOCK_GetEr32kClkFreq+0x18>
    2a1c:	b973      	cbnz	r3, 2a3c <CLOCK_GetEr32kClkFreq+0x30>
        return 0U;
    }
}

uint32_t CLOCK_GetEr32kClkFreq(void)
{
    2a1e:	b580      	push	{r7, lr}
    2a20:	af00      	add	r7, sp, #0
    2a22:	e002      	b.n	2a2a <CLOCK_GetEr32kClkFreq+0x1e>
            /* Please call CLOCK_SetXtal32Freq base on board setting before using XTAL32K/RTC_CLKIN clock. */
            assert(g_xtal32Freq);
            freq = g_xtal32Freq;
            break;
        case 3U: /* LPO clock      */
            freq = LPO_CLK_FREQ;
    2a24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
        default:
            freq = 0U;
            break;
    }
    return freq;
}
    2a28:	4770      	bx	lr
    uint32_t freq;

    switch (SIM_SOPT1_OSC32KSEL_VAL)
    {
        case 0U: /* OSC 32k clock  */
            freq = (CLOCK_GetOsc0ErClkFreq() == 32768U) ? 32768U : 0U;
    2a2a:	f7ff ffdb 	bl	29e4 <CLOCK_GetOsc0ErClkFreq>
    2a2e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    2a32:	d105      	bne.n	2a40 <CLOCK_GetEr32kClkFreq+0x34>
    2a34:	bd80      	pop	{r7, pc}
            break;
        case 2U: /* RTC 32k clock  */
            /* Please call CLOCK_SetXtal32Freq base on board setting before using XTAL32K/RTC_CLKIN clock. */
            assert(g_xtal32Freq);
            freq = g_xtal32Freq;
    2a36:	4b04      	ldr	r3, [pc, #16]	; (2a48 <CLOCK_GetEr32kClkFreq+0x3c>)
    2a38:	6818      	ldr	r0, [r3, #0]
            break;
    2a3a:	4770      	bx	lr
        case 3U: /* LPO clock      */
            freq = LPO_CLK_FREQ;
            break;
        default:
            freq = 0U;
    2a3c:	2000      	movs	r0, #0
    2a3e:	4770      	bx	lr
    uint32_t freq;

    switch (SIM_SOPT1_OSC32KSEL_VAL)
    {
        case 0U: /* OSC 32k clock  */
            freq = (CLOCK_GetOsc0ErClkFreq() == 32768U) ? 32768U : 0U;
    2a40:	2000      	movs	r0, #0
        default:
            freq = 0U;
            break;
    }
    return freq;
}
    2a42:	bd80      	pop	{r7, pc}
    2a44:	40047000 	.word	0x40047000
    2a48:	20000320 	.word	0x20000320

00002a4c <CLOCK_SetSimConfig>:

    return freq;
}

void CLOCK_SetSimConfig(sim_clock_config_t const *config)
{
    2a4c:	b490      	push	{r4, r7}
    2a4e:	af00      	add	r7, sp, #0
    SIM->CLKDIV1 = config->clkdiv1;
    2a50:	6841      	ldr	r1, [r0, #4]
    2a52:	4a0d      	ldr	r2, [pc, #52]	; (2a88 <CLOCK_SetSimConfig+0x3c>)
    2a54:	f241 0344 	movw	r3, #4164	; 0x1044
    2a58:	50d1      	str	r1, [r2, r3]
    CLOCK_SetPllFllSelClock(config->pllFllSel);
    2a5a:	7803      	ldrb	r3, [r0, #0]
 *
 * @param src The value to set PLLFLLSEL clock source.
 */
static inline void CLOCK_SetPllFllSelClock(uint32_t src)
{
    SIM->SOPT2 = ((SIM->SOPT2 & ~SIM_SOPT2_PLLFLLSEL_MASK) | SIM_SOPT2_PLLFLLSEL(src));
    2a5c:	f241 0404 	movw	r4, #4100	; 0x1004
    2a60:	5911      	ldr	r1, [r2, r4]
    2a62:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
    2a66:	041b      	lsls	r3, r3, #16
    2a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    2a6c:	430b      	orrs	r3, r1
    2a6e:	5113      	str	r3, [r2, r4]
    CLOCK_SetEr32kClock(config->er32kSrc);
    2a70:	7843      	ldrb	r3, [r0, #1]
 *
 * @param src The value to set ERCLK32K clock source.
 */
static inline void CLOCK_SetEr32kClock(uint32_t src)
{
    SIM->SOPT1 = ((SIM->SOPT1 & ~SIM_SOPT1_OSC32KSEL_MASK) | SIM_SOPT1_OSC32KSEL(src));
    2a72:	6811      	ldr	r1, [r2, #0]
    2a74:	f421 2140 	bic.w	r1, r1, #786432	; 0xc0000
    2a78:	049b      	lsls	r3, r3, #18
    2a7a:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
    2a7e:	430b      	orrs	r3, r1
    2a80:	6013      	str	r3, [r2, #0]
}
    2a82:	46bd      	mov	sp, r7
    2a84:	bc90      	pop	{r4, r7}
    2a86:	4770      	bx	lr
    2a88:	40047000 	.word	0x40047000

00002a8c <CLOCK_GetFllFreq>:

    uint8_t drs, dmx32;
    uint32_t freq;

    /* If FLL is not enabled currently, then return 0U. */
    if ((MCG->C2 & MCG_C2_LP_MASK) || (MCG->S & MCG_S_PLLST_MASK))
    2a8c:	4b11      	ldr	r3, [pc, #68]	; (2ad4 <CLOCK_GetFllFreq+0x48>)
    2a8e:	785b      	ldrb	r3, [r3, #1]
    2a90:	f013 0f02 	tst.w	r3, #2
    2a94:	d118      	bne.n	2ac8 <CLOCK_GetFllFreq+0x3c>
    2a96:	4b0f      	ldr	r3, [pc, #60]	; (2ad4 <CLOCK_GetFllFreq+0x48>)
    2a98:	799b      	ldrb	r3, [r3, #6]
    2a9a:	f013 0f20 	tst.w	r3, #32
    2a9e:	d115      	bne.n	2acc <CLOCK_GetFllFreq+0x40>
    }
    return mcgoutclk;
}

uint32_t CLOCK_GetFllFreq(void)
{
    2aa0:	b580      	push	{r7, lr}
    2aa2:	af00      	add	r7, sp, #0
    {
        return 0U;
    }

    /* Get FLL reference clock frequency. */
    freq = CLOCK_GetFllRefClkFreq();
    2aa4:	f7ff ff72 	bl	298c <CLOCK_GetFllRefClkFreq>
    if (!freq)
    2aa8:	4603      	mov	r3, r0
    2aaa:	b188      	cbz	r0, 2ad0 <CLOCK_GetFllFreq+0x44>
    {
        return freq;
    }

    drs = MCG_C4_DRST_DRS_VAL;
    2aac:	4909      	ldr	r1, [pc, #36]	; (2ad4 <CLOCK_GetFllFreq+0x48>)
    2aae:	78ca      	ldrb	r2, [r1, #3]
    dmx32 = MCG_C4_DMX32_VAL;
    2ab0:	78c9      	ldrb	r1, [r1, #3]

    return freq * fllFactorTable[drs][dmx32];
    2ab2:	f3c2 1241 	ubfx	r2, r2, #5, #2
    2ab6:	0052      	lsls	r2, r2, #1
    2ab8:	eb02 12d1 	add.w	r2, r2, r1, lsr #7
    2abc:	4906      	ldr	r1, [pc, #24]	; (2ad8 <CLOCK_GetFllFreq+0x4c>)
    2abe:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
    2ac2:	fb00 f003 	mul.w	r0, r0, r3
    2ac6:	bd80      	pop	{r7, pc}
    uint32_t freq;

    /* If FLL is not enabled currently, then return 0U. */
    if ((MCG->C2 & MCG_C2_LP_MASK) || (MCG->S & MCG_S_PLLST_MASK))
    {
        return 0U;
    2ac8:	2000      	movs	r0, #0

    drs = MCG_C4_DRST_DRS_VAL;
    dmx32 = MCG_C4_DMX32_VAL;

    return freq * fllFactorTable[drs][dmx32];
}
    2aca:	4770      	bx	lr
    uint32_t freq;

    /* If FLL is not enabled currently, then return 0U. */
    if ((MCG->C2 & MCG_C2_LP_MASK) || (MCG->S & MCG_S_PLLST_MASK))
    {
        return 0U;
    2acc:	2000      	movs	r0, #0
    2ace:	4770      	bx	lr

    drs = MCG_C4_DRST_DRS_VAL;
    dmx32 = MCG_C4_DMX32_VAL;

    return freq * fllFactorTable[drs][dmx32];
}
    2ad0:	bd80      	pop	{r7, pc}
    2ad2:	bf00      	nop
    2ad4:	40064000 	.word	0x40064000
    2ad8:	000052cc 	.word	0x000052cc

00002adc <CLOCK_GetInternalRefClkFreq>:

uint32_t CLOCK_GetInternalRefClkFreq(void)
{
    /* If MCGIRCLK is gated. */
    if (!(MCG->C1 & MCG_C1_IRCLKEN_MASK))
    2adc:	4b05      	ldr	r3, [pc, #20]	; (2af4 <CLOCK_GetInternalRefClkFreq+0x18>)
    2ade:	781b      	ldrb	r3, [r3, #0]
    2ae0:	f013 0f02 	tst.w	r3, #2
    2ae4:	d004      	beq.n	2af0 <CLOCK_GetInternalRefClkFreq+0x14>

    return freq * fllFactorTable[drs][dmx32];
}

uint32_t CLOCK_GetInternalRefClkFreq(void)
{
    2ae6:	b580      	push	{r7, lr}
    2ae8:	af00      	add	r7, sp, #0
    if (!(MCG->C1 & MCG_C1_IRCLKEN_MASK))
    {
        return 0U;
    }

    return CLOCK_GetInternalRefClkSelectFreq();
    2aea:	f7ff ff33 	bl	2954 <CLOCK_GetInternalRefClkSelectFreq>
    2aee:	bd80      	pop	{r7, pc}
uint32_t CLOCK_GetInternalRefClkFreq(void)
{
    /* If MCGIRCLK is gated. */
    if (!(MCG->C1 & MCG_C1_IRCLKEN_MASK))
    {
        return 0U;
    2af0:	2000      	movs	r0, #0
    2af2:	4770      	bx	lr
    2af4:	40064000 	.word	0x40064000

00002af8 <CLOCK_GetPll0Freq>:
uint32_t CLOCK_GetPll0Freq(void)
{
    uint32_t mcgpll0clk;

    /* If PLL0 is not enabled, return 0. */
    if (!(MCG->S & MCG_S_LOCK0_MASK))
    2af8:	4b0c      	ldr	r3, [pc, #48]	; (2b2c <CLOCK_GetPll0Freq+0x34>)
    2afa:	799b      	ldrb	r3, [r3, #6]
    2afc:	f013 0f40 	tst.w	r3, #64	; 0x40
    2b00:	d011      	beq.n	2b26 <CLOCK_GetPll0Freq+0x2e>
        return 0U;
    }
}

uint32_t CLOCK_GetPll0Freq(void)
{
    2b02:	b580      	push	{r7, lr}
    2b04:	af00      	add	r7, sp, #0
    if (!(MCG->S & MCG_S_LOCK0_MASK))
    {
        return 0U;
    }

    mcgpll0clk = CLOCK_GetPll0RefFreq();
    2b06:	f7ff ff53 	bl	29b0 <CLOCK_GetPll0RefFreq>

    mcgpll0clk /= (FSL_FEATURE_MCG_PLL_PRDIV_BASE + MCG_C5_PRDIV0_VAL);
    2b0a:	4a08      	ldr	r2, [pc, #32]	; (2b2c <CLOCK_GetPll0Freq+0x34>)
    2b0c:	7913      	ldrb	r3, [r2, #4]
    2b0e:	f003 031f 	and.w	r3, r3, #31
    2b12:	3301      	adds	r3, #1
    2b14:	fbb0 f0f3 	udiv	r0, r0, r3
    mcgpll0clk *= (FSL_FEATURE_MCG_PLL_VDIV_BASE + MCG_C6_VDIV0_VAL);
    2b18:	7953      	ldrb	r3, [r2, #5]
    2b1a:	f003 031f 	and.w	r3, r3, #31
    2b1e:	3318      	adds	r3, #24
    2b20:	fb03 f000 	mul.w	r0, r3, r0

    return mcgpll0clk;
    2b24:	bd80      	pop	{r7, pc}
    uint32_t mcgpll0clk;

    /* If PLL0 is not enabled, return 0. */
    if (!(MCG->S & MCG_S_LOCK0_MASK))
    {
        return 0U;
    2b26:	2000      	movs	r0, #0
    2b28:	4770      	bx	lr
    2b2a:	bf00      	nop
    2b2c:	40064000 	.word	0x40064000

00002b30 <CLOCK_GetPllFllSelClkFreq>:
    }
    return freq;
}

uint32_t CLOCK_GetPllFllSelClkFreq(void)
{
    2b30:	b580      	push	{r7, lr}
    2b32:	af00      	add	r7, sp, #0
    uint32_t freq;

    switch (SIM_SOPT2_PLLFLLSEL_VAL)
    2b34:	f241 0304 	movw	r3, #4100	; 0x1004
    2b38:	4a09      	ldr	r2, [pc, #36]	; (2b60 <CLOCK_GetPllFllSelClkFreq+0x30>)
    2b3a:	58d3      	ldr	r3, [r2, r3]
    2b3c:	f3c3 4301 	ubfx	r3, r3, #16, #2
    2b40:	2b01      	cmp	r3, #1
    2b42:	d007      	beq.n	2b54 <CLOCK_GetPllFllSelClkFreq+0x24>
    2b44:	b11b      	cbz	r3, 2b4e <CLOCK_GetPllFllSelClkFreq+0x1e>
    2b46:	2b03      	cmp	r3, #3
    2b48:	d107      	bne.n	2b5a <CLOCK_GetPllFllSelClkFreq+0x2a>
            break;
        case 1U: /* PLL. */
            freq = CLOCK_GetPll0Freq();
            break;
        case 3U: /* MCG IRC48M. */
            freq = MCG_INTERNAL_IRC_48M;
    2b4a:	4806      	ldr	r0, [pc, #24]	; (2b64 <CLOCK_GetPllFllSelClkFreq+0x34>)
    2b4c:	bd80      	pop	{r7, pc}
    uint32_t freq;

    switch (SIM_SOPT2_PLLFLLSEL_VAL)
    {
        case 0U: /* FLL. */
            freq = CLOCK_GetFllFreq();
    2b4e:	f7ff ff9d 	bl	2a8c <CLOCK_GetFllFreq>
            break;
    2b52:	bd80      	pop	{r7, pc}
        case 1U: /* PLL. */
            freq = CLOCK_GetPll0Freq();
    2b54:	f7ff ffd0 	bl	2af8 <CLOCK_GetPll0Freq>
            break;
    2b58:	bd80      	pop	{r7, pc}
        case 3U: /* MCG IRC48M. */
            freq = MCG_INTERNAL_IRC_48M;
            break;
        default:
            freq = 0U;
    2b5a:	2000      	movs	r0, #0
            break;
    }

    return freq;
}
    2b5c:	bd80      	pop	{r7, pc}
    2b5e:	bf00      	nop
    2b60:	40047000 	.word	0x40047000
    2b64:	02dc6c00 	.word	0x02dc6c00

00002b68 <CLOCK_GetOutClkFreq>:
    }
    return ret;
}

uint32_t CLOCK_GetOutClkFreq(void)
{
    2b68:	b580      	push	{r7, lr}
    2b6a:	af00      	add	r7, sp, #0
    uint32_t mcgoutclk;
    uint32_t clkst = MCG_S_CLKST_VAL;
    2b6c:	4b0b      	ldr	r3, [pc, #44]	; (2b9c <CLOCK_GetOutClkFreq+0x34>)
    2b6e:	799b      	ldrb	r3, [r3, #6]
    2b70:	f3c3 0381 	ubfx	r3, r3, #2, #2

    switch (clkst)
    2b74:	2b03      	cmp	r3, #3
    2b76:	d80f      	bhi.n	2b98 <CLOCK_GetOutClkFreq+0x30>
    2b78:	e8df f003 	tbb	[pc, r3]
    2b7c:	020b0805 	.word	0x020b0805
    {
        case kMCG_ClkOutStatPll:
            mcgoutclk = CLOCK_GetPll0Freq();
    2b80:	f7ff ffba 	bl	2af8 <CLOCK_GetPll0Freq>
            break;
    2b84:	bd80      	pop	{r7, pc}
        case kMCG_ClkOutStatFll:
            mcgoutclk = CLOCK_GetFllFreq();
    2b86:	f7ff ff81 	bl	2a8c <CLOCK_GetFllFreq>
            break;
    2b8a:	bd80      	pop	{r7, pc}
        case kMCG_ClkOutStatInt:
            mcgoutclk = CLOCK_GetInternalRefClkSelectFreq();
    2b8c:	f7ff fee2 	bl	2954 <CLOCK_GetInternalRefClkSelectFreq>
            break;
    2b90:	bd80      	pop	{r7, pc}
        case kMCG_ClkOutStatExt:
            mcgoutclk = CLOCK_GetMcgExtClkFreq();
    2b92:	f7ff fe8b 	bl	28ac <CLOCK_GetMcgExtClkFreq>
            break;
    2b96:	bd80      	pop	{r7, pc}
        default:
            mcgoutclk = 0U;
    2b98:	2000      	movs	r0, #0
            break;
    }
    return mcgoutclk;
}
    2b9a:	bd80      	pop	{r7, pc}
    2b9c:	40064000 	.word	0x40064000

00002ba0 <CLOCK_GetFixedFreqClkFreq>:

    return CLOCK_GetInternalRefClkSelectFreq();
}

uint32_t CLOCK_GetFixedFreqClkFreq(void)
{
    2ba0:	b598      	push	{r3, r4, r7, lr}
    2ba2:	af00      	add	r7, sp, #0
    uint32_t freq = CLOCK_GetFllRefClkFreq();
    2ba4:	f7ff fef2 	bl	298c <CLOCK_GetFllRefClkFreq>

    /* MCGFFCLK must be no more than MCGOUTCLK/8. */
    if ((freq) && (freq <= (CLOCK_GetOutClkFreq() / 8U)))
    2ba8:	b138      	cbz	r0, 2bba <CLOCK_GetFixedFreqClkFreq+0x1a>
    2baa:	4604      	mov	r4, r0
    2bac:	f7ff ffdc 	bl	2b68 <CLOCK_GetOutClkFreq>
    2bb0:	ebb4 0fd0 	cmp.w	r4, r0, lsr #3
    2bb4:	d803      	bhi.n	2bbe <CLOCK_GetFixedFreqClkFreq+0x1e>
    {
        return freq;
    2bb6:	4620      	mov	r0, r4
    2bb8:	bd98      	pop	{r3, r4, r7, pc}
    }
    else
    {
        return 0U;
    2bba:	2000      	movs	r0, #0
    2bbc:	bd98      	pop	{r3, r4, r7, pc}
    2bbe:	2000      	movs	r0, #0
    }
}
    2bc0:	bd98      	pop	{r3, r4, r7, pc}
    2bc2:	bf00      	nop

00002bc4 <CLOCK_GetFreq>:
{
    return CLOCK_GetOutClkFreq() / (SIM_CLKDIV1_OUTDIV1_VAL + 1);
}

uint32_t CLOCK_GetFreq(clock_name_t clockName)
{
    2bc4:	b580      	push	{r7, lr}
    2bc6:	af00      	add	r7, sp, #0
    uint32_t freq;

    switch (clockName)
    2bc8:	2813      	cmp	r0, #19
    2bca:	d851      	bhi.n	2c70 <CLOCK_GetFreq+0xac>
    2bcc:	e8df f000 	tbb	[pc, r0]
    2bd0:	23170c0c 	.word	0x23170c0c
    2bd4:	3e3b502f 	.word	0x3e3b502f
    2bd8:	44505041 	.word	0x44505041
    2bdc:	504d4a47 	.word	0x504d4a47
    2be0:	520a5050 	.word	0x520a5050
            break;
        case kCLOCK_McgPll0Clk:
            freq = CLOCK_GetPll0Freq();
            break;
        case kCLOCK_McgIrc48MClk:
            freq = MCG_INTERNAL_IRC_48M;
    2be4:	4825      	ldr	r0, [pc, #148]	; (2c7c <CLOCK_GetFreq+0xb8>)
    2be6:	bd80      	pop	{r7, pc}

    switch (clockName)
    {
        case kCLOCK_CoreSysClk:
        case kCLOCK_PlatClk:
            freq = CLOCK_GetOutClkFreq() / (SIM_CLKDIV1_OUTDIV1_VAL + 1);
    2be8:	f7ff ffbe 	bl	2b68 <CLOCK_GetOutClkFreq>
    2bec:	f241 0344 	movw	r3, #4164	; 0x1044
    2bf0:	4a23      	ldr	r2, [pc, #140]	; (2c80 <CLOCK_GetFreq+0xbc>)
    2bf2:	58d3      	ldr	r3, [r2, r3]
    2bf4:	0f1b      	lsrs	r3, r3, #28
    2bf6:	3301      	adds	r3, #1
    2bf8:	fbb0 f0f3 	udiv	r0, r0, r3
            break;
    2bfc:	bd80      	pop	{r7, pc}
        case kCLOCK_BusClk:
            freq = CLOCK_GetOutClkFreq() / (SIM_CLKDIV1_OUTDIV2_VAL + 1);
    2bfe:	f7ff ffb3 	bl	2b68 <CLOCK_GetOutClkFreq>
    2c02:	f241 0344 	movw	r3, #4164	; 0x1044
    2c06:	4a1e      	ldr	r2, [pc, #120]	; (2c80 <CLOCK_GetFreq+0xbc>)
    2c08:	58d3      	ldr	r3, [r2, r3]
    2c0a:	f3c3 6303 	ubfx	r3, r3, #24, #4
    2c0e:	3301      	adds	r3, #1
    2c10:	fbb0 f0f3 	udiv	r0, r0, r3
            break;
    2c14:	bd80      	pop	{r7, pc}
        case kCLOCK_FlexBusClk:
            freq = CLOCK_GetOutClkFreq() / (SIM_CLKDIV1_OUTDIV3_VAL + 1);
    2c16:	f7ff ffa7 	bl	2b68 <CLOCK_GetOutClkFreq>
    2c1a:	f241 0344 	movw	r3, #4164	; 0x1044
    2c1e:	4a18      	ldr	r2, [pc, #96]	; (2c80 <CLOCK_GetFreq+0xbc>)
    2c20:	58d3      	ldr	r3, [r2, r3]
    2c22:	f3c3 5303 	ubfx	r3, r3, #20, #4
    2c26:	3301      	adds	r3, #1
    2c28:	fbb0 f0f3 	udiv	r0, r0, r3
            break;
    2c2c:	bd80      	pop	{r7, pc}
        case kCLOCK_FlashClk:
            freq = CLOCK_GetOutClkFreq() / (SIM_CLKDIV1_OUTDIV4_VAL + 1);
    2c2e:	f7ff ff9b 	bl	2b68 <CLOCK_GetOutClkFreq>
    2c32:	f241 0344 	movw	r3, #4164	; 0x1044
    2c36:	4a12      	ldr	r2, [pc, #72]	; (2c80 <CLOCK_GetFreq+0xbc>)
    2c38:	58d3      	ldr	r3, [r2, r3]
    2c3a:	f3c3 4303 	ubfx	r3, r3, #16, #4
    2c3e:	3301      	adds	r3, #1
    2c40:	fbb0 f0f3 	udiv	r0, r0, r3
            break;
    2c44:	bd80      	pop	{r7, pc}
        case kCLOCK_PllFllSelClk:
            freq = CLOCK_GetPllFllSelClkFreq();
    2c46:	f7ff ff73 	bl	2b30 <CLOCK_GetPllFllSelClkFreq>
            break;
    2c4a:	bd80      	pop	{r7, pc}
        case kCLOCK_Er32kClk:
            freq = CLOCK_GetEr32kClkFreq();
    2c4c:	f7ff fede 	bl	2a0c <CLOCK_GetEr32kClkFreq>
            break;
    2c50:	bd80      	pop	{r7, pc}
        case kCLOCK_Osc0ErClk:
            freq = CLOCK_GetOsc0ErClkFreq();
    2c52:	f7ff fec7 	bl	29e4 <CLOCK_GetOsc0ErClkFreq>
            break;
    2c56:	bd80      	pop	{r7, pc}
        case kCLOCK_McgFixedFreqClk:
            freq = CLOCK_GetFixedFreqClkFreq();
    2c58:	f7ff ffa2 	bl	2ba0 <CLOCK_GetFixedFreqClkFreq>
            break;
    2c5c:	bd80      	pop	{r7, pc}
        case kCLOCK_McgInternalRefClk:
            freq = CLOCK_GetInternalRefClkFreq();
    2c5e:	f7ff ff3d 	bl	2adc <CLOCK_GetInternalRefClkFreq>
            break;
    2c62:	bd80      	pop	{r7, pc}
        case kCLOCK_McgFllClk:
            freq = CLOCK_GetFllFreq();
    2c64:	f7ff ff12 	bl	2a8c <CLOCK_GetFllFreq>
            break;
    2c68:	bd80      	pop	{r7, pc}
        case kCLOCK_McgPll0Clk:
            freq = CLOCK_GetPll0Freq();
    2c6a:	f7ff ff45 	bl	2af8 <CLOCK_GetPll0Freq>
            break;
    2c6e:	bd80      	pop	{r7, pc}
            break;
        case kCLOCK_LpoClk:
            freq = LPO_CLK_FREQ;
            break;
        default:
            freq = 0U;
    2c70:	2000      	movs	r0, #0
            break;
    2c72:	bd80      	pop	{r7, pc}
            break;
        case kCLOCK_McgIrc48MClk:
            freq = MCG_INTERNAL_IRC_48M;
            break;
        case kCLOCK_LpoClk:
            freq = LPO_CLK_FREQ;
    2c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
            freq = 0U;
            break;
    }

    return freq;
}
    2c78:	bd80      	pop	{r7, pc}
    2c7a:	bf00      	nop
    2c7c:	02dc6c00 	.word	0x02dc6c00
    2c80:	40047000 	.word	0x40047000

00002c84 <CLOCK_SetExternalRefClkConfig>:

    return mcgpll0clk;
}

status_t CLOCK_SetExternalRefClkConfig(mcg_oscsel_t oscsel)
{
    2c84:	b490      	push	{r4, r7}
    2c86:	af00      	add	r7, sp, #0
    {
        return kStatus_MCG_SourceUsed;
    }
#endif /* MCG_CONFIG_CHECK_PARAM */

    if (MCG_C7_OSCSEL_VAL != oscsel)
    2c88:	4b14      	ldr	r3, [pc, #80]	; (2cdc <CLOCK_SetExternalRefClkConfig+0x58>)
    2c8a:	7b1b      	ldrb	r3, [r3, #12]
    2c8c:	f003 0303 	and.w	r3, r3, #3
    2c90:	4283      	cmp	r3, r0
    2c92:	d001      	beq.n	2c98 <CLOCK_SetExternalRefClkConfig+0x14>
    {
        /* If change OSCSEL, need to delay, ERR009878. */
        needDelay = true;
    2c94:	2401      	movs	r4, #1
    2c96:	e000      	b.n	2c9a <CLOCK_SetExternalRefClkConfig+0x16>
    }
    else
    {
        needDelay = false;
    2c98:	2400      	movs	r4, #0
    }

    MCG->C7 = (MCG->C7 & ~MCG_C7_OSCSEL_MASK) | MCG_C7_OSCSEL(oscsel);
    2c9a:	4910      	ldr	r1, [pc, #64]	; (2cdc <CLOCK_SetExternalRefClkConfig+0x58>)
    2c9c:	7b0b      	ldrb	r3, [r1, #12]
    2c9e:	f003 02fc 	and.w	r2, r3, #252	; 0xfc
    2ca2:	f000 0303 	and.w	r3, r0, #3
    2ca6:	4313      	orrs	r3, r2
    2ca8:	730b      	strb	r3, [r1, #12]
    if (kMCG_OscselOsc == oscsel)
    2caa:	b940      	cbnz	r0, 2cbe <CLOCK_SetExternalRefClkConfig+0x3a>
    {
        if (MCG->C2 & MCG_C2_EREFS_MASK)
    2cac:	784b      	ldrb	r3, [r1, #1]
    2cae:	f013 0f04 	tst.w	r3, #4
    2cb2:	d004      	beq.n	2cbe <CLOCK_SetExternalRefClkConfig+0x3a>
        {
            while (!(MCG->S & MCG_S_OSCINIT0_MASK))
    2cb4:	4b09      	ldr	r3, [pc, #36]	; (2cdc <CLOCK_SetExternalRefClkConfig+0x58>)
    2cb6:	799b      	ldrb	r3, [r3, #6]
    2cb8:	f013 0f02 	tst.w	r3, #2
    2cbc:	d0fa      	beq.n	2cb4 <CLOCK_SetExternalRefClkConfig+0x30>
            {
            }
        }
    }

    if (needDelay)
    2cbe:	b91c      	cbnz	r4, 2cc8 <CLOCK_SetExternalRefClkConfig+0x44>
    2cc0:	e007      	b.n	2cd2 <CLOCK_SetExternalRefClkConfig+0x4e>
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
    2cc2:	bf00      	nop
    {
        /* ERR009878 Delay at least 50 micro-seconds for external clock change valid. */
        i = 1500U;
        while (i--)
    2cc4:	4613      	mov	r3, r2
    2cc6:	e001      	b.n	2ccc <CLOCK_SetExternalRefClkConfig+0x48>
    2cc8:	f240 53dc 	movw	r3, #1500	; 0x5dc
    2ccc:	1e5a      	subs	r2, r3, #1
    2cce:	2b00      	cmp	r3, #0
    2cd0:	d1f7      	bne.n	2cc2 <CLOCK_SetExternalRefClkConfig+0x3e>
            __NOP();
        }
    }

    return kStatus_Success;
}
    2cd2:	2000      	movs	r0, #0
    2cd4:	46bd      	mov	sp, r7
    2cd6:	bc90      	pop	{r4, r7}
    2cd8:	4770      	bx	lr
    2cda:	bf00      	nop
    2cdc:	40064000 	.word	0x40064000

00002ce0 <CLOCK_SetInternalRefClkConfig>:

status_t CLOCK_SetInternalRefClkConfig(uint8_t enableMode, mcg_irc_mode_t ircs, uint8_t fcrdiv)
{
    2ce0:	b4b0      	push	{r4, r5, r7}
    2ce2:	af00      	add	r7, sp, #0
    uint32_t mcgOutClkState = MCG_S_CLKST_VAL;
    2ce4:	4b21      	ldr	r3, [pc, #132]	; (2d6c <CLOCK_SetInternalRefClkConfig+0x8c>)
    2ce6:	799c      	ldrb	r4, [r3, #6]
    2ce8:	f3c4 0481 	ubfx	r4, r4, #2, #2
    mcg_irc_mode_t curIrcs = (mcg_irc_mode_t)MCG_S_IRCST_VAL;
    2cec:	799d      	ldrb	r5, [r3, #6]
    uint8_t curFcrdiv = MCG_SC_FCRDIV_VAL;
    2cee:	7a1b      	ldrb	r3, [r3, #8]
    2cf0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        }
    }
#endif

    /* If need to update the FCRDIV. */
    if (fcrdiv != curFcrdiv)
    2cf4:	4293      	cmp	r3, r2
    2cf6:	d01c      	beq.n	2d32 <CLOCK_SetInternalRefClkConfig+0x52>
    2cf8:	f005 0501 	and.w	r5, r5, #1
    {
        /* If fast IRC is in use currently, change to slow IRC. */
        if ((kMCG_IrcFast == curIrcs) && ((mcgOutClkState == kMCG_ClkOutStatInt) || (MCG->C1 & MCG_C1_IRCLKEN_MASK)))
    2cfc:	b185      	cbz	r5, 2d20 <CLOCK_SetInternalRefClkConfig+0x40>
    2cfe:	2c01      	cmp	r4, #1
    2d00:	d004      	beq.n	2d0c <CLOCK_SetInternalRefClkConfig+0x2c>
    2d02:	4b1a      	ldr	r3, [pc, #104]	; (2d6c <CLOCK_SetInternalRefClkConfig+0x8c>)
    2d04:	781b      	ldrb	r3, [r3, #0]
    2d06:	f013 0f02 	tst.w	r3, #2
    2d0a:	d009      	beq.n	2d20 <CLOCK_SetInternalRefClkConfig+0x40>
        {
            MCG->C2 = ((MCG->C2 & ~MCG_C2_IRCS_MASK) | (MCG_C2_IRCS(kMCG_IrcSlow)));
    2d0c:	4d17      	ldr	r5, [pc, #92]	; (2d6c <CLOCK_SetInternalRefClkConfig+0x8c>)
    2d0e:	786b      	ldrb	r3, [r5, #1]
    2d10:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    2d14:	706b      	strb	r3, [r5, #1]
            while (MCG_S_IRCST_VAL != kMCG_IrcSlow)
    2d16:	4b15      	ldr	r3, [pc, #84]	; (2d6c <CLOCK_SetInternalRefClkConfig+0x8c>)
    2d18:	799b      	ldrb	r3, [r3, #6]
    2d1a:	f013 0f01 	tst.w	r3, #1
    2d1e:	d1fa      	bne.n	2d16 <CLOCK_SetInternalRefClkConfig+0x36>
            {
            }
        }
        /* Update FCRDIV. */
        MCG->SC = (MCG->SC & ~(MCG_SC_FCRDIV_MASK | MCG_SC_ATMF_MASK | MCG_SC_LOCS0_MASK)) | MCG_SC_FCRDIV(fcrdiv);
    2d20:	4d12      	ldr	r5, [pc, #72]	; (2d6c <CLOCK_SetInternalRefClkConfig+0x8c>)
    2d22:	7a2b      	ldrb	r3, [r5, #8]
    2d24:	0052      	lsls	r2, r2, #1
    2d26:	f003 03d0 	and.w	r3, r3, #208	; 0xd0
    2d2a:	f002 020e 	and.w	r2, r2, #14
    2d2e:	431a      	orrs	r2, r3
    2d30:	722a      	strb	r2, [r5, #8]
    }

    /* Set internal reference clock selection. */
    MCG->C2 = (MCG->C2 & ~MCG_C2_IRCS_MASK) | (MCG_C2_IRCS(ircs));
    2d32:	4a0e      	ldr	r2, [pc, #56]	; (2d6c <CLOCK_SetInternalRefClkConfig+0x8c>)
    2d34:	7853      	ldrb	r3, [r2, #1]
    2d36:	f003 05fe 	and.w	r5, r3, #254	; 0xfe
    2d3a:	f001 0301 	and.w	r3, r1, #1
    2d3e:	432b      	orrs	r3, r5
    2d40:	7053      	strb	r3, [r2, #1]
    MCG->C1 = (MCG->C1 & ~(MCG_C1_IRCLKEN_MASK | MCG_C1_IREFSTEN_MASK)) | (uint8_t)enableMode;
    2d42:	7813      	ldrb	r3, [r2, #0]
    2d44:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    2d48:	4303      	orrs	r3, r0
    2d4a:	7013      	strb	r3, [r2, #0]

    /* If MCGIRCLK is used, need to wait for MCG_S_IRCST. */
    if ((mcgOutClkState == kMCG_ClkOutStatInt) || (enableMode & kMCG_IrclkEnable))
    2d4c:	2c01      	cmp	r4, #1
    2d4e:	d002      	beq.n	2d56 <CLOCK_SetInternalRefClkConfig+0x76>
    2d50:	f010 0f02 	tst.w	r0, #2
    2d54:	d005      	beq.n	2d62 <CLOCK_SetInternalRefClkConfig+0x82>
    {
        while (MCG_S_IRCST_VAL != ircs)
    2d56:	4b05      	ldr	r3, [pc, #20]	; (2d6c <CLOCK_SetInternalRefClkConfig+0x8c>)
    2d58:	799b      	ldrb	r3, [r3, #6]
    2d5a:	f003 0301 	and.w	r3, r3, #1
    2d5e:	428b      	cmp	r3, r1
    2d60:	d1f9      	bne.n	2d56 <CLOCK_SetInternalRefClkConfig+0x76>
        {
        }
    }

    return kStatus_Success;
}
    2d62:	2000      	movs	r0, #0
    2d64:	46bd      	mov	sp, r7
    2d66:	bcb0      	pop	{r4, r5, r7}
    2d68:	4770      	bx	lr
    2d6a:	bf00      	nop
    2d6c:	40064000 	.word	0x40064000

00002d70 <CLOCK_EnablePll0>:
        return 0U;
    }
}

void CLOCK_EnablePll0(mcg_pll_config_t const *config)
{
    2d70:	b480      	push	{r7}
    2d72:	af00      	add	r7, sp, #0
    assert(config);

    uint8_t mcg_c5 = 0U;

    mcg_c5 |= MCG_C5_PRDIV0(config->prdiv);
    2d74:	7842      	ldrb	r2, [r0, #1]
    2d76:	f002 021f 	and.w	r2, r2, #31
    MCG->C5 = mcg_c5; /* Disable the PLL first. */
    2d7a:	4b0c      	ldr	r3, [pc, #48]	; (2dac <CLOCK_EnablePll0+0x3c>)
    2d7c:	711a      	strb	r2, [r3, #4]

    MCG->C6 = (MCG->C6 & ~MCG_C6_VDIV0_MASK) | MCG_C6_VDIV0(config->vdiv);
    2d7e:	7959      	ldrb	r1, [r3, #5]
    2d80:	7882      	ldrb	r2, [r0, #2]
    2d82:	f001 01e0 	and.w	r1, r1, #224	; 0xe0
    2d86:	f002 021f 	and.w	r2, r2, #31
    2d8a:	430a      	orrs	r2, r1
    2d8c:	715a      	strb	r2, [r3, #5]

    /* Set enable mode. */
    MCG->C5 |= ((uint32_t)kMCG_PllEnableIndependent | (uint32_t)config->enableMode);
    2d8e:	7919      	ldrb	r1, [r3, #4]
    2d90:	7802      	ldrb	r2, [r0, #0]
    2d92:	430a      	orrs	r2, r1
    2d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2d98:	711a      	strb	r2, [r3, #4]

    /* Wait for PLL lock. */
    while (!(MCG->S & MCG_S_LOCK0_MASK))
    2d9a:	4b04      	ldr	r3, [pc, #16]	; (2dac <CLOCK_EnablePll0+0x3c>)
    2d9c:	799b      	ldrb	r3, [r3, #6]
    2d9e:	f013 0f40 	tst.w	r3, #64	; 0x40
    2da2:	d0fa      	beq.n	2d9a <CLOCK_EnablePll0+0x2a>
    {
    }
}
    2da4:	46bd      	mov	sp, r7
    2da6:	f85d 7b04 	ldr.w	r7, [sp], #4
    2daa:	4770      	bx	lr
    2dac:	40064000 	.word	0x40064000

00002db0 <CLOCK_InitOsc0>:
        MCG->S = MCG_S_LOLS0_MASK;
    }
}

void CLOCK_InitOsc0(osc_config_t const *config)
{
    2db0:	b5b0      	push	{r4, r5, r7, lr}
    2db2:	af00      	add	r7, sp, #0
    2db4:	4604      	mov	r4, r0
    uint8_t range = CLOCK_GetOscRangeFromFreq(config->freq);
    2db6:	6800      	ldr	r0, [r0, #0]
    2db8:	f7ff fe00 	bl	29bc <CLOCK_GetOscRangeFromFreq>

    OSC_SetCapLoad(OSC0, config->capLoad);
    2dbc:	7921      	ldrb	r1, [r4, #4]
   OSC_SetCapLoad(OSC, kOSC_Cap2P | kOSC_Cap8P);
   @endcode
 */
static inline void OSC_SetCapLoad(OSC_Type *base, uint8_t capLoad)
{
    uint8_t reg = base->CR;
    2dbe:	4a12      	ldr	r2, [pc, #72]	; (2e08 <CLOCK_InitOsc0+0x58>)
    2dc0:	7813      	ldrb	r3, [r2, #0]

    reg &= ~(OSC_CR_SC2P_MASK | OSC_CR_SC4P_MASK | OSC_CR_SC8P_MASK | OSC_CR_SC16P_MASK);
    2dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    reg |= capLoad;
    2dc6:	430b      	orrs	r3, r1

    base->CR = reg;
    2dc8:	7013      	strb	r3, [r2, #0]
 * @param base   OSC peripheral address.
 * @param config Pointer to the configuration structure.
 */
static inline void OSC_SetExtRefClkConfig(OSC_Type *base, oscer_config_t const *config)
{
    uint8_t reg = base->CR;
    2dca:	7813      	ldrb	r3, [r2, #0]

    reg &= ~(OSC_CR_ERCLKEN_MASK | OSC_CR_EREFSTEN_MASK);
    2dcc:	f003 015f 	and.w	r1, r3, #95	; 0x5f
    reg |= config->enableMode;
    2dd0:	79a3      	ldrb	r3, [r4, #6]
    2dd2:	430b      	orrs	r3, r1

    base->CR = reg;
    2dd4:	7013      	strb	r3, [r2, #0]
    OSC_SetExtRefClkConfig(OSC0, &config->oscerConfig);

    MCG->C2 = ((MCG->C2 & ~OSC_MODE_MASK) | MCG_C2_RANGE(range) | (uint8_t)config->workMode);
    2dd6:	490d      	ldr	r1, [pc, #52]	; (2e0c <CLOCK_InitOsc0+0x5c>)
    2dd8:	784a      	ldrb	r2, [r1, #1]
    2dda:	0103      	lsls	r3, r0, #4
    2ddc:	7965      	ldrb	r5, [r4, #5]
    2dde:	f002 00c3 	and.w	r0, r2, #195	; 0xc3
    2de2:	f003 0330 	and.w	r3, r3, #48	; 0x30
    2de6:	4318      	orrs	r0, r3
    2de8:	4328      	orrs	r0, r5
    2dea:	7048      	strb	r0, [r1, #1]

    if ((kOSC_ModeExt != config->workMode) && (OSC0->CR & OSC_CR_ERCLKEN_MASK))
    2dec:	7963      	ldrb	r3, [r4, #5]
    2dee:	b14b      	cbz	r3, 2e04 <CLOCK_InitOsc0+0x54>
    2df0:	4b05      	ldr	r3, [pc, #20]	; (2e08 <CLOCK_InitOsc0+0x58>)
    2df2:	781b      	ldrb	r3, [r3, #0]
    2df4:	f013 0f80 	tst.w	r3, #128	; 0x80
    2df8:	d004      	beq.n	2e04 <CLOCK_InitOsc0+0x54>
    {
        /* Wait for stable. */
        while (!(MCG->S & MCG_S_OSCINIT0_MASK))
    2dfa:	4b04      	ldr	r3, [pc, #16]	; (2e0c <CLOCK_InitOsc0+0x5c>)
    2dfc:	799b      	ldrb	r3, [r3, #6]
    2dfe:	f013 0f02 	tst.w	r3, #2
    2e02:	d0fa      	beq.n	2dfa <CLOCK_InitOsc0+0x4a>
    2e04:	bdb0      	pop	{r4, r5, r7, pc}
    2e06:	bf00      	nop
    2e08:	40065000 	.word	0x40065000
    2e0c:	40064000 	.word	0x40064000

00002e10 <CLOCK_SetPbeMode>:
{
    /*
       This function is designed to change MCG to PBE mode from PEE/BLPE/FBE,
       but with this workflow, the source mode could be all modes except PEI/PBI.
     */
    MCG->C2 &= ~MCG_C2_LP_MASK; /* Disable lowpower. */
    2e10:	4a15      	ldr	r2, [pc, #84]	; (2e68 <CLOCK_SetPbeMode+0x58>)
    2e12:	7853      	ldrb	r3, [r2, #1]
    2e14:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    2e18:	7053      	strb	r3, [r2, #1]

    /* Change to use external clock first. */
    MCG->C1 = ((MCG->C1 & ~(MCG_C1_CLKS_MASK | MCG_C1_IREFS_MASK)) | MCG_C1_CLKS(kMCG_ClkOutSrcExternal));
    2e1a:	7813      	ldrb	r3, [r2, #0]
    2e1c:	f003 033b 	and.w	r3, r3, #59	; 0x3b
    2e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2e24:	7013      	strb	r3, [r2, #0]

    /* Wait for CLKST clock status bits to show clock source is ext ref clk */
    while ((MCG->S & (MCG_S_IREFST_MASK | MCG_S_CLKST_MASK)) !=
    2e26:	4b10      	ldr	r3, [pc, #64]	; (2e68 <CLOCK_SetPbeMode+0x58>)
    2e28:	799b      	ldrb	r3, [r3, #6]
    2e2a:	f003 031c 	and.w	r3, r3, #28
    2e2e:	2b08      	cmp	r3, #8
    2e30:	d1f9      	bne.n	2e26 <CLOCK_SetPbeMode+0x16>
           (MCG_S_IREFST(kMCG_FllSrcExternal) | MCG_S_CLKST(kMCG_ClkOutStatExt)))
    {
    }

    /* Disable PLL first, then configure PLL. */
    MCG->C6 &= ~MCG_C6_PLLS_MASK;
    2e32:	4a0d      	ldr	r2, [pc, #52]	; (2e68 <CLOCK_SetPbeMode+0x58>)
    2e34:	7953      	ldrb	r3, [r2, #5]
    2e36:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    2e3a:	7153      	strb	r3, [r2, #5]
    while (MCG->S & MCG_S_PLLST_MASK)
    2e3c:	4b0a      	ldr	r3, [pc, #40]	; (2e68 <CLOCK_SetPbeMode+0x58>)
    2e3e:	799b      	ldrb	r3, [r3, #6]
    2e40:	f013 0f20 	tst.w	r3, #32
    2e44:	d1fa      	bne.n	2e3c <CLOCK_SetPbeMode+0x2c>

    return kStatus_Success;
}

status_t CLOCK_SetPbeMode(mcg_pll_clk_select_t pllcs, mcg_pll_config_t const *config)
{
    2e46:	b580      	push	{r7, lr}
    2e48:	af00      	add	r7, sp, #0
    {
    }

    /* Configure the PLL. */
    {
        CLOCK_EnablePll0(config);
    2e4a:	4608      	mov	r0, r1
    2e4c:	f7ff ff90 	bl	2d70 <CLOCK_EnablePll0>
    }

    /* Change to PLL mode. */
    MCG->C6 |= MCG_C6_PLLS_MASK;
    2e50:	4a05      	ldr	r2, [pc, #20]	; (2e68 <CLOCK_SetPbeMode+0x58>)
    2e52:	7953      	ldrb	r3, [r2, #5]
    2e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2e58:	7153      	strb	r3, [r2, #5]
    while (!(MCG->S & MCG_S_PLLST_MASK))
    2e5a:	4b03      	ldr	r3, [pc, #12]	; (2e68 <CLOCK_SetPbeMode+0x58>)
    2e5c:	799b      	ldrb	r3, [r3, #6]
    2e5e:	f013 0f20 	tst.w	r3, #32
    2e62:	d0fa      	beq.n	2e5a <CLOCK_SetPbeMode+0x4a>
    {
    }

    return kStatus_Success;
}
    2e64:	2000      	movs	r0, #0
    2e66:	bd80      	pop	{r7, pc}
    2e68:	40064000 	.word	0x40064000

00002e6c <CLOCK_BootToPeeMode>:

    return kStatus_Success;
}

status_t CLOCK_BootToPeeMode(mcg_oscsel_t oscsel, mcg_pll_clk_select_t pllcs, mcg_pll_config_t const *config)
{
    2e6c:	b5b0      	push	{r4, r5, r7, lr}
    2e6e:	af00      	add	r7, sp, #0
    2e70:	460c      	mov	r4, r1
    2e72:	4615      	mov	r5, r2
    assert(config);

    CLOCK_SetExternalRefClkConfig(oscsel);
    2e74:	f7ff ff06 	bl	2c84 <CLOCK_SetExternalRefClkConfig>

    CLOCK_SetPbeMode(pllcs, config);
    2e78:	4629      	mov	r1, r5
    2e7a:	4620      	mov	r0, r4
    2e7c:	f7ff ffc8 	bl	2e10 <CLOCK_SetPbeMode>

    /* Change to use PLL output clock. */
    MCG->C1 = (MCG->C1 & ~MCG_C1_CLKS_MASK) | MCG_C1_CLKS(kMCG_ClkOutSrcOut);
    2e80:	4a06      	ldr	r2, [pc, #24]	; (2e9c <CLOCK_BootToPeeMode+0x30>)
    2e82:	7813      	ldrb	r3, [r2, #0]
    2e84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    2e88:	7013      	strb	r3, [r2, #0]
    while (MCG_S_CLKST_VAL != kMCG_ClkOutStatPll)
    2e8a:	4b04      	ldr	r3, [pc, #16]	; (2e9c <CLOCK_BootToPeeMode+0x30>)
    2e8c:	799b      	ldrb	r3, [r3, #6]
    2e8e:	f3c3 0381 	ubfx	r3, r3, #2, #2
    2e92:	2b03      	cmp	r3, #3
    2e94:	d1f9      	bne.n	2e8a <CLOCK_BootToPeeMode+0x1e>
    {
    }

    return kStatus_Success;
}
    2e96:	2000      	movs	r0, #0
    2e98:	bdb0      	pop	{r4, r5, r7, pc}
    2e9a:	bf00      	nop
    2e9c:	40064000 	.word	0x40064000

00002ea0 <I2C_CheckAndClearError>:

    return result;
}

static status_t I2C_CheckAndClearError(I2C_Type *base, uint32_t status)
{
    2ea0:	b480      	push	{r7}
    2ea2:	af00      	add	r7, sp, #0
    status_t result = kStatus_Success;

    /* Check arbitration lost. */
    if (status & kI2C_ArbitrationLostFlag)
    2ea4:	f011 0f10 	tst.w	r1, #16
    2ea8:	d004      	beq.n	2eb4 <I2C_CheckAndClearError+0x14>
    {
        /* Clear arbitration lost flag. */
        base->S = kI2C_ArbitrationLostFlag;
    2eaa:	2310      	movs	r3, #16
    2eac:	70c3      	strb	r3, [r0, #3]
        result = kStatus_I2C_ArbitrationLost;
    2eae:	f240 404f 	movw	r0, #1103	; 0x44f
    2eb2:	e006      	b.n	2ec2 <I2C_CheckAndClearError+0x22>
    }
    /* Check NAK */
    else if (status & kI2C_ReceiveNakFlag)
    2eb4:	f011 0f01 	tst.w	r1, #1
    2eb8:	d101      	bne.n	2ebe <I2C_CheckAndClearError+0x1e>
    return result;
}

static status_t I2C_CheckAndClearError(I2C_Type *base, uint32_t status)
{
    status_t result = kStatus_Success;
    2eba:	2000      	movs	r0, #0
    2ebc:	e001      	b.n	2ec2 <I2C_CheckAndClearError+0x22>
        result = kStatus_I2C_ArbitrationLost;
    }
    /* Check NAK */
    else if (status & kI2C_ReceiveNakFlag)
    {
        result = kStatus_I2C_Nak;
    2ebe:	f240 404e 	movw	r0, #1102	; 0x44e
    else
    {
    }

    return result;
}
    2ec2:	46bd      	mov	sp, r7
    2ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ec8:	4770      	bx	lr
    2eca:	bf00      	nop

00002ecc <I2C_GetInstance>:
/*******************************************************************************
 * Codes
 ******************************************************************************/

uint32_t I2C_GetInstance(I2C_Type *base)
{
    2ecc:	b480      	push	{r7}
    2ece:	af00      	add	r7, sp, #0
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < FSL_FEATURE_SOC_I2C_COUNT; instance++)
    2ed0:	2300      	movs	r3, #0
    2ed2:	e005      	b.n	2ee0 <I2C_GetInstance+0x14>
    {
        if (s_i2cBases[instance] == base)
    2ed4:	4a06      	ldr	r2, [pc, #24]	; (2ef0 <I2C_GetInstance+0x24>)
    2ed6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    2eda:	4282      	cmp	r2, r0
    2edc:	d002      	beq.n	2ee4 <I2C_GetInstance+0x18>
uint32_t I2C_GetInstance(I2C_Type *base)
{
    uint32_t instance;

    /* Find the instance index from base address mappings. */
    for (instance = 0; instance < FSL_FEATURE_SOC_I2C_COUNT; instance++)
    2ede:	3301      	adds	r3, #1
    2ee0:	2b02      	cmp	r3, #2
    2ee2:	d9f7      	bls.n	2ed4 <I2C_GetInstance+0x8>
    }

    assert(instance < FSL_FEATURE_SOC_I2C_COUNT);

    return instance;
}
    2ee4:	4618      	mov	r0, r3
    2ee6:	46bd      	mov	sp, r7
    2ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2eec:	4770      	bx	lr
    2eee:	bf00      	nop
    2ef0:	00005360 	.word	0x00005360

00002ef4 <I2C_MasterGetDefaultConfig>:
    /* Disable I2C clock. */
    CLOCK_DisableClock(s_i2cClocks[I2C_GetInstance(base)]);
}

void I2C_MasterGetDefaultConfig(i2c_master_config_t *masterConfig)
{
    2ef4:	b480      	push	{r7}
    2ef6:	af00      	add	r7, sp, #0
    assert(masterConfig);

    /* Default baud rate at 100kbps. */
    masterConfig->baudRate_Bps = 100000U;
    2ef8:	4b05      	ldr	r3, [pc, #20]	; (2f10 <I2C_MasterGetDefaultConfig+0x1c>)
    2efa:	6043      	str	r3, [r0, #4]

/* Default pin high drive is disabled. */
#if defined(FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION) && FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION
    masterConfig->enableHighDrive = false;
    2efc:	2300      	movs	r3, #0
    2efe:	7043      	strb	r3, [r0, #1]
#endif

/* Default stop hold enable is disabled. */
#if defined(FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF) && FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF
    masterConfig->enableStopHold = false;
    2f00:	7083      	strb	r3, [r0, #2]
#endif

    /* Default glitch filter value is no filter. */
    masterConfig->glitchFilterWidth = 0U;
    2f02:	7203      	strb	r3, [r0, #8]

    /* Enable the I2C peripheral. */
    masterConfig->enableMaster = true;
    2f04:	2301      	movs	r3, #1
    2f06:	7003      	strb	r3, [r0, #0]
}
    2f08:	46bd      	mov	sp, r7
    2f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f0e:	4770      	bx	lr
    2f10:	000186a0 	.word	0x000186a0

00002f14 <I2C_EnableInterrupts>:

void I2C_EnableInterrupts(I2C_Type *base, uint32_t mask)
{
    2f14:	b480      	push	{r7}
    2f16:	af00      	add	r7, sp, #0
    if (mask & kI2C_GlobalInterruptEnable)
    2f18:	f011 0f40 	tst.w	r1, #64	; 0x40
    2f1c:	d003      	beq.n	2f26 <I2C_EnableInterrupts+0x12>
    {
        base->C1 |= I2C_C1_IICIE_MASK;
    2f1e:	7883      	ldrb	r3, [r0, #2]
    2f20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2f24:	7083      	strb	r3, [r0, #2]
        base->FLT |= I2C_FLT_STOPIE_MASK;
    }
#endif /* FSL_FEATURE_I2C_HAS_STOP_DETECT */

#if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
    if (mask & kI2C_StartStopDetectInterruptEnable)
    2f26:	f011 0f20 	tst.w	r1, #32
    2f2a:	d003      	beq.n	2f34 <I2C_EnableInterrupts+0x20>
    {
        base->FLT |= I2C_FLT_SSIE_MASK;
    2f2c:	7983      	ldrb	r3, [r0, #6]
    2f2e:	f043 0320 	orr.w	r3, r3, #32
    2f32:	7183      	strb	r3, [r0, #6]
    }
#endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
}
    2f34:	46bd      	mov	sp, r7
    2f36:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f3a:	4770      	bx	lr

00002f3c <I2C_DisableInterrupts>:

void I2C_DisableInterrupts(I2C_Type *base, uint32_t mask)
{
    2f3c:	b480      	push	{r7}
    2f3e:	af00      	add	r7, sp, #0
    if (mask & kI2C_GlobalInterruptEnable)
    2f40:	f011 0f40 	tst.w	r1, #64	; 0x40
    2f44:	d003      	beq.n	2f4e <I2C_DisableInterrupts+0x12>
    {
        base->C1 &= ~I2C_C1_IICIE_MASK;
    2f46:	7883      	ldrb	r3, [r0, #2]
    2f48:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    2f4c:	7083      	strb	r3, [r0, #2]
        base->FLT &= ~I2C_FLT_STOPIE_MASK;
    }
#endif /* FSL_FEATURE_I2C_HAS_STOP_DETECT */

#if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
    if (mask & kI2C_StartStopDetectInterruptEnable)
    2f4e:	f011 0f20 	tst.w	r1, #32
    2f52:	d003      	beq.n	2f5c <I2C_DisableInterrupts+0x20>
    {
        base->FLT &= ~I2C_FLT_SSIE_MASK;
    2f54:	7983      	ldrb	r3, [r0, #6]
    2f56:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    2f5a:	7183      	strb	r3, [r0, #6]
    }
#endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */
}
    2f5c:	46bd      	mov	sp, r7
    2f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2f62:	4770      	bx	lr

00002f64 <I2C_MasterSetBaudRate>:

void I2C_MasterSetBaudRate(I2C_Type *base, uint32_t baudRate_Bps, uint32_t srcClock_Hz)
{
    2f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f68:	af00      	add	r7, sp, #0
    uint8_t mult;
    uint8_t i;

    /* Search for the settings with the lowest error. Mult is the MULT field of the I2C_F register,
     * and ranges from 0-2. It selects the multiplier factor for the divider. */
    for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
    2f6a:	f04f 0e00 	mov.w	lr, #0
    uint32_t multiplier;
    uint32_t computedRate;
    uint32_t absError;
    uint32_t bestError = UINT32_MAX;
    uint32_t bestMult = 0u;
    uint32_t bestIcr = 0u;
    2f6e:	46f0      	mov	r8, lr
{
    uint32_t multiplier;
    uint32_t computedRate;
    uint32_t absError;
    uint32_t bestError = UINT32_MAX;
    uint32_t bestMult = 0u;
    2f70:	46f4      	mov	ip, lr
void I2C_MasterSetBaudRate(I2C_Type *base, uint32_t baudRate_Bps, uint32_t srcClock_Hz)
{
    uint32_t multiplier;
    uint32_t computedRate;
    uint32_t absError;
    uint32_t bestError = UINT32_MAX;
    2f72:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    uint8_t mult;
    uint8_t i;

    /* Search for the settings with the lowest error. Mult is the MULT field of the I2C_F register,
     * and ranges from 0-2. It selects the multiplier factor for the divider. */
    for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
    2f76:	e020      	b.n	2fba <I2C_MasterSetBaudRate+0x56>
    {
        multiplier = 1u << mult;
    2f78:	2601      	movs	r6, #1
    2f7a:	fa06 f60e 	lsl.w	r6, r6, lr

        /* Scan table to find best match. */
        for (i = 0u; i < sizeof(s_i2cDividerTable) / sizeof(uint16_t); ++i)
    2f7e:	2400      	movs	r4, #0
    2f80:	e013      	b.n	2faa <I2C_MasterSetBaudRate+0x46>
        {
            computedRate = srcClock_Hz / (multiplier * s_i2cDividerTable[i]);
    2f82:	4b16      	ldr	r3, [pc, #88]	; (2fdc <I2C_MasterSetBaudRate+0x78>)
    2f84:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    2f88:	fb06 f303 	mul.w	r3, r6, r3
    2f8c:	fbb2 f3f3 	udiv	r3, r2, r3
            absError = baudRate_Bps > computedRate ? (baudRate_Bps - computedRate) : (computedRate - baudRate_Bps);
    2f90:	428b      	cmp	r3, r1
    2f92:	d201      	bcs.n	2f98 <I2C_MasterSetBaudRate+0x34>
    2f94:	1acb      	subs	r3, r1, r3
    2f96:	e000      	b.n	2f9a <I2C_MasterSetBaudRate+0x36>
    2f98:	1a5b      	subs	r3, r3, r1

            if (absError < bestError)
    2f9a:	429d      	cmp	r5, r3
    2f9c:	d903      	bls.n	2fa6 <I2C_MasterSetBaudRate+0x42>
            {
                bestMult = mult;
    2f9e:	46f4      	mov	ip, lr
                bestIcr = i;
    2fa0:	46a0      	mov	r8, r4
                bestError = absError;

                /* If the error is 0, then we can stop searching because we won't find a better match. */
                if (absError == 0)
    2fa2:	b12b      	cbz	r3, 2fb0 <I2C_MasterSetBaudRate+0x4c>

            if (absError < bestError)
            {
                bestMult = mult;
                bestIcr = i;
                bestError = absError;
    2fa4:	461d      	mov	r5, r3
    for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
    {
        multiplier = 1u << mult;

        /* Scan table to find best match. */
        for (i = 0u; i < sizeof(s_i2cDividerTable) / sizeof(uint16_t); ++i)
    2fa6:	3401      	adds	r4, #1
    2fa8:	b2e4      	uxtb	r4, r4
    2faa:	2c3f      	cmp	r4, #63	; 0x3f
    2fac:	d9e9      	bls.n	2f82 <I2C_MasterSetBaudRate+0x1e>
    2fae:	462b      	mov	r3, r5
    uint8_t mult;
    uint8_t i;

    /* Search for the settings with the lowest error. Mult is the MULT field of the I2C_F register,
     * and ranges from 0-2. It selects the multiplier factor for the divider. */
    for (mult = 0u; (mult <= 2u) && (bestError != 0); ++mult)
    2fb0:	f10e 0e01 	add.w	lr, lr, #1
    2fb4:	fa5f fe8e 	uxtb.w	lr, lr
    2fb8:	461d      	mov	r5, r3
    2fba:	f1be 0f02 	cmp.w	lr, #2
    2fbe:	d801      	bhi.n	2fc4 <I2C_MasterSetBaudRate+0x60>
    2fc0:	2d00      	cmp	r5, #0
    2fc2:	d1d9      	bne.n	2f78 <I2C_MasterSetBaudRate+0x14>
            }
        }
    }

    /* Set frequency register based on best settings. */
    base->F = I2C_F_MULT(bestMult) | I2C_F_ICR(bestIcr);
    2fc4:	fa5f f38c 	uxtb.w	r3, ip
    2fc8:	019b      	lsls	r3, r3, #6
    2fca:	b2db      	uxtb	r3, r3
    2fcc:	f008 083f 	and.w	r8, r8, #63	; 0x3f
    2fd0:	ea43 0308 	orr.w	r3, r3, r8
    2fd4:	7043      	strb	r3, [r0, #1]
    2fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2fda:	bf00      	nop
    2fdc:	000052dc 	.word	0x000052dc

00002fe0 <I2C_MasterInit>:
        s_i2cSlaveIsr(base, handle);
    }
}

void I2C_MasterInit(I2C_Type *base, const i2c_master_config_t *masterConfig, uint32_t srcClock_Hz)
{
    2fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fe2:	af00      	add	r7, sp, #0
    2fe4:	4604      	mov	r4, r0
    2fe6:	460d      	mov	r5, r1
    2fe8:	4616      	mov	r6, r2
#if defined(FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION) && FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION
    uint8_t c2Reg;
#endif

    /* Enable I2C clock. */
    CLOCK_EnableClock(s_i2cClocks[I2C_GetInstance(base)]);
    2fea:	f7ff ff6f 	bl	2ecc <I2C_GetInstance>
    2fee:	4b1f      	ldr	r3, [pc, #124]	; (306c <I2C_MasterInit+0x8c>)
    2ff0:	f853 1020 	ldr.w	r1, [r3, r0, lsl #2]
 *
 * @param name  Which clock to enable, see \ref clock_ip_name_t.
 */
static inline void CLOCK_EnableClock(clock_ip_name_t name)
{
    uint32_t regAddr = SIM_BASE + CLK_GATE_ABSTRACT_REG_OFFSET((uint32_t)name);
    2ff4:	0c0b      	lsrs	r3, r1, #16
    2ff6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2ffa:	f503 238e 	add.w	r3, r3, #290816	; 0x47000
    (*(volatile uint32_t *)regAddr) |= (1U << CLK_GATE_ABSTRACT_BITS_SHIFT((uint32_t)name));
    2ffe:	6818      	ldr	r0, [r3, #0]
    3000:	b28a      	uxth	r2, r1
    3002:	2101      	movs	r1, #1
    3004:	fa01 f202 	lsl.w	r2, r1, r2
    3008:	4302      	orrs	r2, r0
    300a:	601a      	str	r2, [r3, #0]

    /* Disable I2C prior to configuring it. */
    base->C1 &= ~(I2C_C1_IICEN_MASK);
    300c:	78a3      	ldrb	r3, [r4, #2]
    300e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3012:	70a3      	strb	r3, [r4, #2]
/* Must clear the STARTF / STOPF bits prior to clearing IICIF */
#if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
    if (statusMask & kI2C_StartDetectFlag)
    {
        /* Shift the odd-ball flags back into place. */
        base->FLT |= (uint8_t)(statusMask >> 8U);
    3014:	79a3      	ldrb	r3, [r4, #6]
    3016:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    301a:	71a3      	strb	r3, [r4, #6]

#ifdef I2C_HAS_STOP_DETECT
    if (statusMask & kI2C_StopDetectFlag)
    {
        /* Shift the odd-ball flags back into place. */
        base->FLT |= (uint8_t)(statusMask >> 8U);
    301c:	79a3      	ldrb	r3, [r4, #6]
    301e:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    3022:	71a3      	strb	r3, [r4, #6]
    }
#endif

    base->S = (uint8_t)statusMask;
    3024:	2312      	movs	r3, #18
    3026:	70e3      	strb	r3, [r4, #3]

    /* Clear all flags. */
    I2C_MasterClearStatusFlags(base, kClearFlags);

    /* Configure baud rate. */
    I2C_MasterSetBaudRate(base, masterConfig->baudRate_Bps, srcClock_Hz);
    3028:	4632      	mov	r2, r6
    302a:	6869      	ldr	r1, [r5, #4]
    302c:	4620      	mov	r0, r4
    302e:	f7ff ff99 	bl	2f64 <I2C_MasterSetBaudRate>

#if defined(FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION) && FSL_FEATURE_I2C_HAS_HIGH_DRIVE_SELECTION
    /* Configure high drive feature. */
    c2Reg = base->C2;
    3032:	7963      	ldrb	r3, [r4, #5]
    c2Reg &= ~(I2C_C2_HDRS_MASK);
    3034:	f003 02df 	and.w	r2, r3, #223	; 0xdf
    c2Reg |= I2C_C2_HDRS(masterConfig->enableHighDrive);
    3038:	786b      	ldrb	r3, [r5, #1]
    303a:	015b      	lsls	r3, r3, #5
    303c:	f003 0320 	and.w	r3, r3, #32
    3040:	4313      	orrs	r3, r2
    base->C2 = c2Reg;
    3042:	7163      	strb	r3, [r4, #5]
#endif

    /* Read out the FLT register. */
    fltReg = base->FLT;
    3044:	79a3      	ldrb	r3, [r4, #6]

#if defined(FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF) && FSL_FEATURE_I2C_HAS_STOP_HOLD_OFF
    /* Configure the stop / hold enable. */
    fltReg &= ~(I2C_FLT_SHEN_MASK);
    3046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
    fltReg |= I2C_FLT_SHEN(masterConfig->enableStopHold);
    304a:	78ab      	ldrb	r3, [r5, #2]
    304c:	01db      	lsls	r3, r3, #7
    304e:	b2db      	uxtb	r3, r3
    3050:	4313      	orrs	r3, r2
#endif

    /* Configure the glitch filter value. */
    fltReg &= ~(I2C_FLT_FLT_MASK);
    3052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    fltReg |= I2C_FLT_FLT(masterConfig->glitchFilterWidth);
    3056:	7a2a      	ldrb	r2, [r5, #8]
    3058:	f002 020f 	and.w	r2, r2, #15
    305c:	4313      	orrs	r3, r2

    /* Write the register value back to the filter register. */
    base->FLT = fltReg;
    305e:	71a3      	strb	r3, [r4, #6]

    /* Enable the I2C peripheral based on the configuration. */
    base->C1 = I2C_C1_IICEN(masterConfig->enableMaster);
    3060:	782b      	ldrb	r3, [r5, #0]
    3062:	01db      	lsls	r3, r3, #7
    3064:	b2db      	uxtb	r3, r3
    3066:	70a3      	strb	r3, [r4, #2]
    3068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    306a:	bf00      	nop
    306c:	0000536c 	.word	0x0000536c

00003070 <I2C_MasterStop>:

    return result;
}

status_t I2C_MasterStop(I2C_Type *base)
{
    3070:	b480      	push	{r7}
    3072:	af00      	add	r7, sp, #0
    status_t result = kStatus_Success;
    uint16_t timeout = UINT16_MAX;

    /* Issue the STOP command on the bus. */
    base->C1 &= ~(I2C_C1_MST_MASK | I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
    3074:	7883      	ldrb	r3, [r0, #2]
    3076:	f003 03c7 	and.w	r3, r3, #199	; 0xc7
    307a:	7083      	strb	r3, [r0, #2]
}

status_t I2C_MasterStop(I2C_Type *base)
{
    status_t result = kStatus_Success;
    uint16_t timeout = UINT16_MAX;
    307c:	f64f 73ff 	movw	r3, #65535	; 0xffff

    /* Issue the STOP command on the bus. */
    base->C1 &= ~(I2C_C1_MST_MASK | I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);

    /* Wait until data transfer complete. */
    while ((base->S & kI2C_BusBusyFlag) && (--timeout))
    3080:	78c2      	ldrb	r2, [r0, #3]
    3082:	f012 0f20 	tst.w	r2, #32
    3086:	d003      	beq.n	3090 <I2C_MasterStop+0x20>
    3088:	3b01      	subs	r3, #1
    308a:	b29b      	uxth	r3, r3
    308c:	2b00      	cmp	r3, #0
    308e:	d1f7      	bne.n	3080 <I2C_MasterStop+0x10>
    {
    }

    if (timeout == 0)
    3090:	b10b      	cbz	r3, 3096 <I2C_MasterStop+0x26>
    return result;
}

status_t I2C_MasterStop(I2C_Type *base)
{
    status_t result = kStatus_Success;
    3092:	2000      	movs	r0, #0
    3094:	e001      	b.n	309a <I2C_MasterStop+0x2a>
    {
    }

    if (timeout == 0)
    {
        result = kStatus_I2C_Timeout;
    3096:	f44f 608a 	mov.w	r0, #1104	; 0x450
    }

    return result;
}
    309a:	46bd      	mov	sp, r7
    309c:	f85d 7b04 	ldr.w	r7, [sp], #4
    30a0:	4770      	bx	lr
    30a2:	bf00      	nop

000030a4 <I2C_MasterGetStatusFlags>:

uint32_t I2C_MasterGetStatusFlags(I2C_Type *base)
{
    30a4:	b480      	push	{r7}
    30a6:	af00      	add	r7, sp, #0
    uint32_t statusFlags = base->S;
    30a8:	78c3      	ldrb	r3, [r0, #3]
    30aa:	b2db      	uxtb	r3, r3

#ifdef I2C_HAS_STOP_DETECT
    /* Look up the STOPF bit from the filter register. */
    if (base->FLT & I2C_FLT_STOPF_MASK)
    30ac:	7982      	ldrb	r2, [r0, #6]
    30ae:	f012 0f40 	tst.w	r2, #64	; 0x40
    30b2:	d001      	beq.n	30b8 <I2C_MasterGetStatusFlags+0x14>
    {
        statusFlags |= kI2C_StopDetectFlag;
    30b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    }
#endif

#if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
    /* Look up the STARTF bit from the filter register. */
    if (base->FLT & I2C_FLT_STARTF_MASK)
    30b8:	7982      	ldrb	r2, [r0, #6]
    30ba:	f012 0f10 	tst.w	r2, #16
    30be:	d001      	beq.n	30c4 <I2C_MasterGetStatusFlags+0x20>
    {
        statusFlags |= kI2C_StartDetectFlag;
    30c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    }
#endif /* FSL_FEATURE_I2C_HAS_START_STOP_DETECT */

    return statusFlags;
}
    30c4:	4618      	mov	r0, r3
    30c6:	46bd      	mov	sp, r7
    30c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    30cc:	4770      	bx	lr
    30ce:	bf00      	nop

000030d0 <I2C_MasterStart>:
    /* Set frequency register based on best settings. */
    base->F = I2C_F_MULT(bestMult) | I2C_F_ICR(bestIcr);
}

status_t I2C_MasterStart(I2C_Type *base, uint8_t address, i2c_direction_t direction)
{
    30d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30d2:	af00      	add	r7, sp, #0
    30d4:	4605      	mov	r5, r0
    30d6:	460c      	mov	r4, r1
    30d8:	4616      	mov	r6, r2
    status_t result = kStatus_Success;
    uint32_t statusFlags = I2C_MasterGetStatusFlags(base);
    30da:	f7ff ffe3 	bl	30a4 <I2C_MasterGetStatusFlags>

    /* Return an error if the bus is already in use. */
    if (statusFlags & kI2C_BusBusyFlag)
    30de:	f010 0f20 	tst.w	r0, #32
    30e2:	d10e      	bne.n	3102 <I2C_MasterStart+0x32>
        result = kStatus_I2C_Busy;
    }
    else
    {
        /* Send the START signal. */
        base->C1 |= I2C_C1_MST_MASK | I2C_C1_TX_MASK;
    30e4:	78ab      	ldrb	r3, [r5, #2]
    30e6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    30ea:	70ab      	strb	r3, [r5, #2]
        while (!(base->S2 & I2C_S2_EMPTY_MASK))
        {
        }
#endif /* FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING */

        base->D = (((uint32_t)address) << 1U | ((direction == kI2C_Read) ? 1U : 0U));
    30ec:	0064      	lsls	r4, r4, #1
    30ee:	b2e4      	uxtb	r4, r4
    30f0:	2e01      	cmp	r6, #1
    30f2:	d101      	bne.n	30f8 <I2C_MasterStart+0x28>
    30f4:	2301      	movs	r3, #1
    30f6:	e000      	b.n	30fa <I2C_MasterStart+0x2a>
    30f8:	2300      	movs	r3, #0
    30fa:	431c      	orrs	r4, r3
    30fc:	712c      	strb	r4, [r5, #4]
    base->F = I2C_F_MULT(bestMult) | I2C_F_ICR(bestIcr);
}

status_t I2C_MasterStart(I2C_Type *base, uint8_t address, i2c_direction_t direction)
{
    status_t result = kStatus_Success;
    30fe:	2000      	movs	r0, #0
    3100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint32_t statusFlags = I2C_MasterGetStatusFlags(base);

    /* Return an error if the bus is already in use. */
    if (statusFlags & kI2C_BusBusyFlag)
    {
        result = kStatus_I2C_Busy;
    3102:	f240 404c 	movw	r0, #1100	; 0x44c

        base->D = (((uint32_t)address) << 1U | ((direction == kI2C_Read) ? 1U : 0U));
    }

    return result;
}
    3106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003108 <I2C_MasterRepeatedStart>:

status_t I2C_MasterRepeatedStart(I2C_Type *base, uint8_t address, i2c_direction_t direction)
{
    3108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    310a:	af00      	add	r7, sp, #0
    310c:	4605      	mov	r5, r0
    310e:	460c      	mov	r4, r1
    3110:	4616      	mov	r6, r2
    status_t result = kStatus_Success;
    uint8_t savedMult;
    uint32_t statusFlags = I2C_MasterGetStatusFlags(base);
    3112:	f7ff ffc7 	bl	30a4 <I2C_MasterGetStatusFlags>
    uint8_t timeDelay = 6;

    /* Return an error if the bus is already in use, but not by us. */
    if ((statusFlags & kI2C_BusBusyFlag) && ((base->C1 & I2C_C1_MST_MASK) == 0))
    3116:	f010 0f20 	tst.w	r0, #32
    311a:	d003      	beq.n	3124 <I2C_MasterRepeatedStart+0x1c>
    311c:	78ab      	ldrb	r3, [r5, #2]
    311e:	f013 0f20 	tst.w	r3, #32
    3122:	d01c      	beq.n	315e <I2C_MasterRepeatedStart+0x56>
    {
        result = kStatus_I2C_Busy;
    }
    else
    {
        savedMult = base->F;
    3124:	786b      	ldrb	r3, [r5, #1]
    3126:	b2db      	uxtb	r3, r3
        base->F = savedMult & (~I2C_F_MULT_MASK);
    3128:	f003 023f 	and.w	r2, r3, #63	; 0x3f
    312c:	706a      	strb	r2, [r5, #1]

        /* We are already in a transfer, so send a repeated start. */
        base->C1 |= I2C_C1_RSTA_MASK;
    312e:	78aa      	ldrb	r2, [r5, #2]
    3130:	f042 0204 	orr.w	r2, r2, #4
    3134:	70aa      	strb	r2, [r5, #2]

        /* Restore the multiplier factor. */
        base->F = savedMult;
    3136:	706b      	strb	r3, [r5, #1]
status_t I2C_MasterRepeatedStart(I2C_Type *base, uint8_t address, i2c_direction_t direction)
{
    status_t result = kStatus_Success;
    uint8_t savedMult;
    uint32_t statusFlags = I2C_MasterGetStatusFlags(base);
    uint8_t timeDelay = 6;
    3138:	2206      	movs	r2, #6

        /* Restore the multiplier factor. */
        base->F = savedMult;

        /* Add some delay to wait the Re-Start signal. */
        while (timeDelay--)
    313a:	e001      	b.n	3140 <I2C_MasterRepeatedStart+0x38>
    313c:	bf00      	nop
    313e:	461a      	mov	r2, r3
    3140:	1e53      	subs	r3, r2, #1
    3142:	b2db      	uxtb	r3, r3
    3144:	2a00      	cmp	r2, #0
    3146:	d1f9      	bne.n	313c <I2C_MasterRepeatedStart+0x34>
        while (!(base->S2 & I2C_S2_EMPTY_MASK))
        {
        }
#endif /* FSL_FEATURE_I2C_HAS_DOUBLE_BUFFERING */

        base->D = (((uint32_t)address) << 1U | ((direction == kI2C_Read) ? 1U : 0U));
    3148:	0064      	lsls	r4, r4, #1
    314a:	b2e4      	uxtb	r4, r4
    314c:	2e01      	cmp	r6, #1
    314e:	d101      	bne.n	3154 <I2C_MasterRepeatedStart+0x4c>
    3150:	2301      	movs	r3, #1
    3152:	e000      	b.n	3156 <I2C_MasterRepeatedStart+0x4e>
    3154:	2300      	movs	r3, #0
    3156:	431c      	orrs	r4, r3
    3158:	712c      	strb	r4, [r5, #4]
    return result;
}

status_t I2C_MasterRepeatedStart(I2C_Type *base, uint8_t address, i2c_direction_t direction)
{
    status_t result = kStatus_Success;
    315a:	2000      	movs	r0, #0
    315c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint8_t timeDelay = 6;

    /* Return an error if the bus is already in use, but not by us. */
    if ((statusFlags & kI2C_BusBusyFlag) && ((base->C1 & I2C_C1_MST_MASK) == 0))
    {
        result = kStatus_I2C_Busy;
    315e:	f240 404c 	movw	r0, #1100	; 0x44c

        base->D = (((uint32_t)address) << 1U | ((direction == kI2C_Read) ? 1U : 0U));
    }

    return result;
}
    3162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003164 <I2C_InitTransferStateMachine>:

    return instance;
}

static status_t I2C_InitTransferStateMachine(I2C_Type *base, i2c_master_handle_t *handle, i2c_master_transfer_t *xfer)
{
    3164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3168:	af00      	add	r7, sp, #0
    316a:	4604      	mov	r4, r0
    316c:	468e      	mov	lr, r1
    316e:	4690      	mov	r8, r2
    status_t result = kStatus_Success;
    i2c_direction_t direction = xfer->direction;
    3170:	f892 c005 	ldrb.w	ip, [r2, #5]
    uint16_t timeout = UINT16_MAX;

    /* Initialize the handle transfer information. */
    handle->transfer = *xfer;
    3174:	460d      	mov	r5, r1
    3176:	4616      	mov	r6, r2
    3178:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    317a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    317c:	e896 0003 	ldmia.w	r6, {r0, r1}
    3180:	e885 0003 	stmia.w	r5, {r0, r1}

    /* Save total transfer size. */
    handle->transferSize = xfer->dataSize;
    3184:	f8d8 3014 	ldr.w	r3, [r8, #20]
    3188:	f8ce 3018 	str.w	r3, [lr, #24]

    /* Initial transfer state. */
    if (handle->transfer.subaddressSize > 0)
    318c:	f89e 300c 	ldrb.w	r3, [lr, #12]
    3190:	b13b      	cbz	r3, 31a2 <I2C_InitTransferStateMachine+0x3e>
    {
        handle->state = kSendCommandState;
    3192:	2302      	movs	r3, #2
    3194:	f88e 301c 	strb.w	r3, [lr, #28]
        if (xfer->direction == kI2C_Read)
    3198:	f898 3005 	ldrb.w	r3, [r8, #5]
    319c:	2b01      	cmp	r3, #1
    319e:	d106      	bne.n	31ae <I2C_InitTransferStateMachine+0x4a>
    31a0:	e003      	b.n	31aa <I2C_InitTransferStateMachine+0x46>
            direction = kI2C_Write;
        }
    }
    else
    {
        handle->state = kCheckAddressState;
    31a2:	2301      	movs	r3, #1
    31a4:	f88e 301c 	strb.w	r3, [lr, #28]
    31a8:	e001      	b.n	31ae <I2C_InitTransferStateMachine+0x4a>
    if (handle->transfer.subaddressSize > 0)
    {
        handle->state = kSendCommandState;
        if (xfer->direction == kI2C_Read)
        {
            direction = kI2C_Write;
    31aa:	f04f 0c00 	mov.w	ip, #0
    31ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
    {
        handle->state = kCheckAddressState;
    }

    /* Wait until the data register is ready for transmit. */
    while ((!(base->S & kI2C_TransferCompleteFlag)) && (--timeout))
    31b2:	78e2      	ldrb	r2, [r4, #3]
    31b4:	f012 0f80 	tst.w	r2, #128	; 0x80
    31b8:	d103      	bne.n	31c2 <I2C_InitTransferStateMachine+0x5e>
    31ba:	3b01      	subs	r3, #1
    31bc:	b29b      	uxth	r3, r3
    31be:	2b00      	cmp	r3, #0
    31c0:	d1f7      	bne.n	31b2 <I2C_InitTransferStateMachine+0x4e>
    {
    }

    /* Failed to start the transfer. */
    if (timeout == 0)
    31c2:	b1eb      	cbz	r3, 3200 <I2C_InitTransferStateMachine+0x9c>
    31c4:	4620      	mov	r0, r4
/* Must clear the STARTF / STOPF bits prior to clearing IICIF */
#if defined(FSL_FEATURE_I2C_HAS_START_STOP_DETECT) && FSL_FEATURE_I2C_HAS_START_STOP_DETECT
    if (statusMask & kI2C_StartDetectFlag)
    {
        /* Shift the odd-ball flags back into place. */
        base->FLT |= (uint8_t)(statusMask >> 8U);
    31c6:	79a3      	ldrb	r3, [r4, #6]
    31c8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    31cc:	71a3      	strb	r3, [r4, #6]

#ifdef I2C_HAS_STOP_DETECT
    if (statusMask & kI2C_StopDetectFlag)
    {
        /* Shift the odd-ball flags back into place. */
        base->FLT |= (uint8_t)(statusMask >> 8U);
    31ce:	79a3      	ldrb	r3, [r4, #6]
    31d0:	f043 0350 	orr.w	r3, r3, #80	; 0x50
    31d4:	71a3      	strb	r3, [r4, #6]
    }
#endif

    base->S = (uint8_t)statusMask;
    31d6:	2312      	movs	r3, #18
    31d8:	70e3      	strb	r3, [r4, #3]

    /* Clear all status before transfer. */
    I2C_MasterClearStatusFlags(base, kClearFlags);

    /* If repeated start is requested, send repeated start. */
    if (handle->transfer.flags & kI2C_TransferRepeatedStartFlag)
    31da:	f8de 3000 	ldr.w	r3, [lr]
    31de:	f013 0f02 	tst.w	r3, #2
    31e2:	d006      	beq.n	31f2 <I2C_InitTransferStateMachine+0x8e>
    {
        result = I2C_MasterRepeatedStart(base, handle->transfer.slaveAddress, direction);
    31e4:	4662      	mov	r2, ip
    31e6:	f89e 1004 	ldrb.w	r1, [lr, #4]
    31ea:	f7ff ff8d 	bl	3108 <I2C_MasterRepeatedStart>
    31ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    else /* For normal transfer, send start. */
    {
        result = I2C_MasterStart(base, handle->transfer.slaveAddress, direction);
    31f2:	4662      	mov	r2, ip
    31f4:	f89e 1004 	ldrb.w	r1, [lr, #4]
    31f8:	f7ff ff6a 	bl	30d0 <I2C_MasterStart>
    31fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }

    /* Failed to start the transfer. */
    if (timeout == 0)
    {
        return kStatus_I2C_Timeout;
    3200:	f44f 608a 	mov.w	r0, #1104	; 0x450
    {
        result = I2C_MasterStart(base, handle->transfer.slaveAddress, direction);
    }

    return result;
}
    3204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00003208 <I2C_MasterTransferRunStateMachine>:

    return result;
}

static status_t I2C_MasterTransferRunStateMachine(I2C_Type *base, i2c_master_handle_t *handle, bool *isDone)
{
    3208:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    320c:	b083      	sub	sp, #12
    320e:	af00      	add	r7, sp, #0
    3210:	4606      	mov	r6, r0
    3212:	460c      	mov	r4, r1
    3214:	4691      	mov	r9, r2
    status_t result = kStatus_Success;
    uint32_t statusFlags = base->S;
    3216:	78c5      	ldrb	r5, [r0, #3]
    3218:	b2ed      	uxtb	r5, r5
    *isDone = false;
    321a:	2300      	movs	r3, #0
    321c:	7013      	strb	r3, [r2, #0]
    volatile uint8_t dummy = 0;
    321e:	71fb      	strb	r3, [r7, #7]
    bool ignoreNak = ((handle->state == kSendDataState) && (handle->transfer.dataSize == 0U)) ||
    3220:	7f0b      	ldrb	r3, [r1, #28]
    3222:	2b03      	cmp	r3, #3
    3224:	d101      	bne.n	322a <I2C_MasterTransferRunStateMachine+0x22>
    3226:	694a      	ldr	r2, [r1, #20]
    3228:	b13a      	cbz	r2, 323a <I2C_MasterTransferRunStateMachine+0x32>
    322a:	2b05      	cmp	r3, #5
    322c:	d108      	bne.n	3240 <I2C_MasterTransferRunStateMachine+0x38>
                     ((handle->state == kReceiveDataState) && (handle->transfer.dataSize == 1U));
    322e:	6963      	ldr	r3, [r4, #20]
    3230:	2b01      	cmp	r3, #1
    3232:	d008      	beq.n	3246 <I2C_MasterTransferRunStateMachine+0x3e>
{
    status_t result = kStatus_Success;
    uint32_t statusFlags = base->S;
    *isDone = false;
    volatile uint8_t dummy = 0;
    bool ignoreNak = ((handle->state == kSendDataState) && (handle->transfer.dataSize == 0U)) ||
    3234:	f04f 0800 	mov.w	r8, #0
    3238:	e007      	b.n	324a <I2C_MasterTransferRunStateMachine+0x42>
    323a:	f04f 0801 	mov.w	r8, #1
    323e:	e004      	b.n	324a <I2C_MasterTransferRunStateMachine+0x42>
    3240:	f04f 0800 	mov.w	r8, #0
    3244:	e001      	b.n	324a <I2C_MasterTransferRunStateMachine+0x42>
    3246:	f04f 0801 	mov.w	r8, #1
                     ((handle->state == kReceiveDataState) && (handle->transfer.dataSize == 1U));

    /* Add this to avoid build warning. */
    dummy++;
    324a:	79fb      	ldrb	r3, [r7, #7]
    324c:	3301      	adds	r3, #1
    324e:	b2db      	uxtb	r3, r3
    3250:	71fb      	strb	r3, [r7, #7]

    /* Check & clear error flags. */
    result = I2C_CheckAndClearError(base, statusFlags);
    3252:	4629      	mov	r1, r5
    3254:	4630      	mov	r0, r6
    3256:	f7ff fe23 	bl	2ea0 <I2C_CheckAndClearError>

    /* Ignore Nak when it's appeared for last byte. */
    if ((result == kStatus_I2C_Nak) && ignoreNak)
    325a:	f240 434e 	movw	r3, #1102	; 0x44e
    325e:	4298      	cmp	r0, r3
    3260:	d103      	bne.n	326a <I2C_MasterTransferRunStateMachine+0x62>
    3262:	f1b8 0f00 	cmp.w	r8, #0
    3266:	d000      	beq.n	326a <I2C_MasterTransferRunStateMachine+0x62>
    {
        result = kStatus_Success;
    3268:	2000      	movs	r0, #0
    }

    if (result)
    326a:	2800      	cmp	r0, #0
    326c:	d17a      	bne.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>
        return result;
    }

    /* Handle Check address state to check the slave address is Acked in slave
       probe application. */
    if (handle->state == kCheckAddressState)
    326e:	7f23      	ldrb	r3, [r4, #28]
    3270:	2b01      	cmp	r3, #1
    3272:	d109      	bne.n	3288 <I2C_MasterTransferRunStateMachine+0x80>
    {
        if (statusFlags & kI2C_ReceiveNakFlag)
    3274:	f015 0f01 	tst.w	r5, #1
    3278:	d172      	bne.n	3360 <I2C_MasterTransferRunStateMachine+0x158>
        {
            return kStatus_I2C_Nak;
        }
        else
        {
            if (handle->transfer.direction == kI2C_Write)
    327a:	7963      	ldrb	r3, [r4, #5]
    327c:	b913      	cbnz	r3, 3284 <I2C_MasterTransferRunStateMachine+0x7c>
            {
                /* Next state, send data. */
                handle->state = kSendDataState;
    327e:	2303      	movs	r3, #3
    3280:	7723      	strb	r3, [r4, #28]
    3282:	e001      	b.n	3288 <I2C_MasterTransferRunStateMachine+0x80>
            }
            else
            {
                /* Next state, receive data begin. */
                handle->state = kReceiveDataBeginState;
    3284:	2304      	movs	r3, #4
    3286:	7723      	strb	r3, [r4, #28]
            }
        }
    }

    /* Run state machine. */
    switch (handle->state)
    3288:	7f23      	ldrb	r3, [r4, #28]
    328a:	3b02      	subs	r3, #2
    328c:	2b03      	cmp	r3, #3
    328e:	d869      	bhi.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>
    3290:	e8df f003 	tbb	[pc, r3]
    3294:	48372702 	.word	0x48372702
    {
        /* Send I2C command. */
        case kSendCommandState:
            if (handle->transfer.subaddressSize)
    3298:	7b23      	ldrb	r3, [r4, #12]
    329a:	b14b      	cbz	r3, 32b0 <I2C_MasterTransferRunStateMachine+0xa8>
            {
                handle->transfer.subaddressSize--;
    329c:	3b01      	subs	r3, #1
    329e:	b2db      	uxtb	r3, r3
    32a0:	7323      	strb	r3, [r4, #12]
                base->D = ((handle->transfer.subaddress) >> (8 * handle->transfer.subaddressSize));
    32a2:	68a2      	ldr	r2, [r4, #8]
    32a4:	00db      	lsls	r3, r3, #3
    32a6:	fa22 f303 	lsr.w	r3, r2, r3
    32aa:	b2db      	uxtb	r3, r3
    32ac:	7133      	strb	r3, [r6, #4]
    32ae:	e059      	b.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>
            }
            else
            {
                if (handle->transfer.direction == kI2C_Write)
    32b0:	7963      	ldrb	r3, [r4, #5]
    32b2:	b973      	cbnz	r3, 32d2 <I2C_MasterTransferRunStateMachine+0xca>
                {
                    /* Next state, send data. */
                    handle->state = kSendDataState;
    32b4:	2303      	movs	r3, #3
    32b6:	7723      	strb	r3, [r4, #28]

                    /* Send first byte of data. */
                    if (handle->transfer.dataSize > 0)
    32b8:	6963      	ldr	r3, [r4, #20]
    32ba:	2b00      	cmp	r3, #0
    32bc:	d052      	beq.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>
                    {
                        base->D = *handle->transfer.data;
    32be:	6923      	ldr	r3, [r4, #16]
    32c0:	781b      	ldrb	r3, [r3, #0]
    32c2:	7133      	strb	r3, [r6, #4]
                        handle->transfer.data++;
    32c4:	6923      	ldr	r3, [r4, #16]
    32c6:	3301      	adds	r3, #1
    32c8:	6123      	str	r3, [r4, #16]
                        handle->transfer.dataSize--;
    32ca:	6963      	ldr	r3, [r4, #20]
    32cc:	3b01      	subs	r3, #1
    32ce:	6163      	str	r3, [r4, #20]
    32d0:	e048      	b.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>
                    }
                }
                else
                {
                    /* Send repeated start and slave address. */
                    result = I2C_MasterRepeatedStart(base, handle->transfer.slaveAddress, kI2C_Read);
    32d2:	2201      	movs	r2, #1
    32d4:	7921      	ldrb	r1, [r4, #4]
    32d6:	4630      	mov	r0, r6
    32d8:	f7ff ff16 	bl	3108 <I2C_MasterRepeatedStart>

                    /* Next state, receive data begin. */
                    handle->state = kReceiveDataBeginState;
    32dc:	2304      	movs	r3, #4
    32de:	7723      	strb	r3, [r4, #28]
    32e0:	e040      	b.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>
            break;

        /* Send I2C data. */
        case kSendDataState:
            /* Send one byte of data. */
            if (handle->transfer.dataSize > 0)
    32e2:	6963      	ldr	r3, [r4, #20]
    32e4:	b14b      	cbz	r3, 32fa <I2C_MasterTransferRunStateMachine+0xf2>
            {
                base->D = *handle->transfer.data;
    32e6:	6923      	ldr	r3, [r4, #16]
    32e8:	781b      	ldrb	r3, [r3, #0]
    32ea:	7133      	strb	r3, [r6, #4]
                handle->transfer.data++;
    32ec:	6923      	ldr	r3, [r4, #16]
    32ee:	3301      	adds	r3, #1
    32f0:	6123      	str	r3, [r4, #16]
                handle->transfer.dataSize--;
    32f2:	6963      	ldr	r3, [r4, #20]
    32f4:	3b01      	subs	r3, #1
    32f6:	6163      	str	r3, [r4, #20]
    32f8:	e034      	b.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>
            }
            else
            {
                *isDone = true;
    32fa:	2301      	movs	r3, #1
    32fc:	f889 3000 	strb.w	r3, [r9]
    3300:	e030      	b.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>
            }
            break;

        /* Start I2C data receive. */
        case kReceiveDataBeginState:
            base->C1 &= ~(I2C_C1_TX_MASK | I2C_C1_TXAK_MASK);
    3302:	78b3      	ldrb	r3, [r6, #2]
    3304:	f003 03e7 	and.w	r3, r3, #231	; 0xe7
    3308:	70b3      	strb	r3, [r6, #2]

            /* Send nak at the last receive byte. */
            if (handle->transfer.dataSize == 1)
    330a:	6963      	ldr	r3, [r4, #20]
    330c:	2b01      	cmp	r3, #1
    330e:	d103      	bne.n	3318 <I2C_MasterTransferRunStateMachine+0x110>
            {
                base->C1 |= I2C_C1_TXAK_MASK;
    3310:	78b3      	ldrb	r3, [r6, #2]
    3312:	f043 0308 	orr.w	r3, r3, #8
    3316:	70b3      	strb	r3, [r6, #2]
            }

            /* Read dummy to release the bus. */
            dummy = base->D;
    3318:	7933      	ldrb	r3, [r6, #4]
    331a:	b2db      	uxtb	r3, r3
    331c:	71fb      	strb	r3, [r7, #7]

            /* Next state, receive data. */
            handle->state = kReceiveDataState;
    331e:	2305      	movs	r3, #5
    3320:	7723      	strb	r3, [r4, #28]
            break;
    3322:	e01f      	b.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>

        /* Receive I2C data. */
        case kReceiveDataState:
            /* Receive one byte of data. */
            if (handle->transfer.dataSize--)
    3324:	6963      	ldr	r3, [r4, #20]
    3326:	1e5a      	subs	r2, r3, #1
    3328:	6162      	str	r2, [r4, #20]
    332a:	b1db      	cbz	r3, 3364 <I2C_MasterTransferRunStateMachine+0x15c>
            {
                if (handle->transfer.dataSize == 0)
    332c:	6963      	ldr	r3, [r4, #20]
    332e:	b94b      	cbnz	r3, 3344 <I2C_MasterTransferRunStateMachine+0x13c>
                {
                    *isDone = true;
    3330:	2301      	movs	r3, #1
    3332:	f889 3000 	strb.w	r3, [r9]

                    /* Send stop if kI2C_TransferNoStop is not asserted. */
                    if (!(handle->transfer.flags & kI2C_TransferNoStopFlag))
    3336:	6823      	ldr	r3, [r4, #0]
    3338:	f013 0f04 	tst.w	r3, #4
    333c:	d102      	bne.n	3344 <I2C_MasterTransferRunStateMachine+0x13c>
                    {
                        result = I2C_MasterStop(base);
    333e:	4630      	mov	r0, r6
    3340:	f7ff fe96 	bl	3070 <I2C_MasterStop>
                    }
                }

                /* Send NAK at the last receive byte. */
                if (handle->transfer.dataSize == 1)
    3344:	6963      	ldr	r3, [r4, #20]
    3346:	2b01      	cmp	r3, #1
    3348:	d103      	bne.n	3352 <I2C_MasterTransferRunStateMachine+0x14a>
                {
                    base->C1 |= I2C_C1_TXAK_MASK;
    334a:	78b3      	ldrb	r3, [r6, #2]
    334c:	f043 0308 	orr.w	r3, r3, #8
    3350:	70b3      	strb	r3, [r6, #2]
                }

                /* Read the data byte into the transfer buffer. */
                *handle->transfer.data = base->D;
    3352:	6923      	ldr	r3, [r4, #16]
    3354:	7932      	ldrb	r2, [r6, #4]
    3356:	701a      	strb	r2, [r3, #0]
                handle->transfer.data++;
    3358:	6923      	ldr	r3, [r4, #16]
    335a:	3301      	adds	r3, #1
    335c:	6123      	str	r3, [r4, #16]
    335e:	e001      	b.n	3364 <I2C_MasterTransferRunStateMachine+0x15c>
       probe application. */
    if (handle->state == kCheckAddressState)
    {
        if (statusFlags & kI2C_ReceiveNakFlag)
        {
            return kStatus_I2C_Nak;
    3360:	f240 404e 	movw	r0, #1102	; 0x44e
        default:
            break;
    }

    return result;
}
    3364:	370c      	adds	r7, #12
    3366:	46bd      	mov	sp, r7
    3368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000336c <I2C_MasterTransferHandleIRQ>:

    return kStatus_Success;
}

void I2C_MasterTransferHandleIRQ(I2C_Type *base, void *i2cHandle)
{
    336c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3370:	b082      	sub	sp, #8
    3372:	af00      	add	r7, sp, #0
    3374:	4605      	mov	r5, r0
    3376:	460c      	mov	r4, r1
    i2c_master_handle_t *handle = (i2c_master_handle_t *)i2cHandle;
    status_t result = kStatus_Success;
    bool isDone;

    /* Clear the interrupt flag. */
    base->S = kI2C_IntPendingFlag;
    3378:	2302      	movs	r3, #2
    337a:	70c3      	strb	r3, [r0, #3]

    /* Check transfer complete flag. */
    result = I2C_MasterTransferRunStateMachine(base, handle, &isDone);
    337c:	1dfa      	adds	r2, r7, #7
    337e:	f7ff ff43 	bl	3208 <I2C_MasterTransferRunStateMachine>
    3382:	4606      	mov	r6, r0

    if (isDone || result)
    3384:	79fb      	ldrb	r3, [r7, #7]
    3386:	b903      	cbnz	r3, 338a <I2C_MasterTransferHandleIRQ+0x1e>
    3388:	b308      	cbz	r0, 33ce <I2C_MasterTransferHandleIRQ+0x62>
    {
        /* Send stop command if transfer done or received Nak. */
        if ((!(handle->transfer.flags & kI2C_TransferNoStopFlag)) || (result == kStatus_I2C_Nak))
    338a:	6823      	ldr	r3, [r4, #0]
    338c:	f013 0f04 	tst.w	r3, #4
    3390:	d003      	beq.n	339a <I2C_MasterTransferHandleIRQ+0x2e>
    3392:	f240 434e 	movw	r3, #1102	; 0x44e
    3396:	429e      	cmp	r6, r3
    3398:	d109      	bne.n	33ae <I2C_MasterTransferHandleIRQ+0x42>
        {
            /* Ensure stop command is a need. */
            if ((base->C1 & I2C_C1_MST_MASK))
    339a:	78ab      	ldrb	r3, [r5, #2]
    339c:	f013 0f20 	tst.w	r3, #32
    33a0:	d005      	beq.n	33ae <I2C_MasterTransferHandleIRQ+0x42>
            {
                if (I2C_MasterStop(base) != kStatus_Success)
    33a2:	4628      	mov	r0, r5
    33a4:	f7ff fe64 	bl	3070 <I2C_MasterStop>
    33a8:	b108      	cbz	r0, 33ae <I2C_MasterTransferHandleIRQ+0x42>
                {
                    result = kStatus_I2C_Timeout;
    33aa:	f44f 668a 	mov.w	r6, #1104	; 0x450
                }
            }
        }

        /* Restore handle to idle state. */
        handle->state = kIdleState;
    33ae:	2300      	movs	r3, #0
    33b0:	7723      	strb	r3, [r4, #28]

        /* Disable interrupt. */
        I2C_DisableInterrupts(base, kI2C_GlobalInterruptEnable);
    33b2:	2140      	movs	r1, #64	; 0x40
    33b4:	4628      	mov	r0, r5
    33b6:	f7ff fdc1 	bl	2f3c <I2C_DisableInterrupts>

        /* Call the callback function after the function has completed. */
        if (handle->completionCallback)
    33ba:	f8d4 8020 	ldr.w	r8, [r4, #32]
    33be:	f1b8 0f00 	cmp.w	r8, #0
    33c2:	d004      	beq.n	33ce <I2C_MasterTransferHandleIRQ+0x62>
        {
            handle->completionCallback(base, handle, result, handle->userData);
    33c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    33c6:	4632      	mov	r2, r6
    33c8:	4621      	mov	r1, r4
    33ca:	4628      	mov	r0, r5
    33cc:	47c0      	blx	r8
        }
    }
}
    33ce:	3708      	adds	r7, #8
    33d0:	46bd      	mov	sp, r7
    33d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    33d6:	bf00      	nop

000033d8 <I2C_MasterTransferCreateHandle>:

void I2C_MasterTransferCreateHandle(I2C_Type *base,
                                    i2c_master_handle_t *handle,
                                    i2c_master_transfer_callback_t callback,
                                    void *userData)
{
    33d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33dc:	af00      	add	r7, sp, #0
    33de:	460c      	mov	r4, r1
    33e0:	4690      	mov	r8, r2
    33e2:	461e      	mov	r6, r3
    assert(handle);

    uint32_t instance = I2C_GetInstance(base);
    33e4:	f7ff fd72 	bl	2ecc <I2C_GetInstance>
    33e8:	4605      	mov	r5, r0

    /* Zero handle. */
    memset(handle, 0, sizeof(*handle));
    33ea:	2228      	movs	r2, #40	; 0x28
    33ec:	2100      	movs	r1, #0
    33ee:	4620      	mov	r0, r4
    33f0:	f7ff f94e 	bl	2690 <memset>

    /* Set callback and userData. */
    handle->completionCallback = callback;
    33f4:	f8c4 8020 	str.w	r8, [r4, #32]
    handle->userData = userData;
    33f8:	6266      	str	r6, [r4, #36]	; 0x24

    /* Save the context in global variables to support the double weak mechanism. */
    s_i2cHandle[instance] = handle;
    33fa:	4b09      	ldr	r3, [pc, #36]	; (3420 <I2C_MasterTransferCreateHandle+0x48>)
    33fc:	f843 4025 	str.w	r4, [r3, r5, lsl #2]

    /* Save master interrupt handler. */
    s_i2cMasterIsr = I2C_MasterTransferHandleIRQ;
    3400:	4a08      	ldr	r2, [pc, #32]	; (3424 <I2C_MasterTransferCreateHandle+0x4c>)
    3402:	4b09      	ldr	r3, [pc, #36]	; (3428 <I2C_MasterTransferCreateHandle+0x50>)
    3404:	601a      	str	r2, [r3, #0]

    /* Enable NVIC interrupt. */
    EnableIRQ(s_i2cIrqs[instance]);
    3406:	4b09      	ldr	r3, [pc, #36]	; (342c <I2C_MasterTransferCreateHandle+0x54>)
    3408:	575b      	ldrsb	r3, [r3, r5]
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    340a:	0959      	lsrs	r1, r3, #5
    340c:	f003 031f 	and.w	r3, r3, #31
    3410:	2201      	movs	r2, #1
    3412:	fa02 f303 	lsl.w	r3, r2, r3
    3416:	4a06      	ldr	r2, [pc, #24]	; (3430 <I2C_MasterTransferCreateHandle+0x58>)
    3418:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    341c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3420:	200001ec 	.word	0x200001ec
    3424:	0000336d 	.word	0x0000336d
    3428:	200001f8 	.word	0x200001f8
    342c:	0000535c 	.word	0x0000535c
    3430:	e000e100 	.word	0xe000e100

00003434 <I2C_MasterTransferNonBlocking>:
}

status_t I2C_MasterTransferNonBlocking(I2C_Type *base, i2c_master_handle_t *handle, i2c_master_transfer_t *xfer)
{
    3434:	b5b0      	push	{r4, r5, r7, lr}
    3436:	af00      	add	r7, sp, #0
    assert(xfer);

    status_t result = kStatus_Success;

    /* Check if the I2C bus is idle - if not return busy status. */
    if (handle->state != kIdleState)
    3438:	7f0b      	ldrb	r3, [r1, #28]
    343a:	b94b      	cbnz	r3, 3450 <I2C_MasterTransferNonBlocking+0x1c>
    343c:	4605      	mov	r5, r0
        result = kStatus_I2C_Busy;
    }
    else
    {
        /* Start up the master transfer state machine. */
        result = I2C_InitTransferStateMachine(base, handle, xfer);
    343e:	f7ff fe91 	bl	3164 <I2C_InitTransferStateMachine>

        if (result == kStatus_Success)
    3442:	4604      	mov	r4, r0
    3444:	b930      	cbnz	r0, 3454 <I2C_MasterTransferNonBlocking+0x20>
        {
            /* Enable the I2C interrupts. */
            I2C_EnableInterrupts(base, kI2C_GlobalInterruptEnable);
    3446:	2140      	movs	r1, #64	; 0x40
    3448:	4628      	mov	r0, r5
    344a:	f7ff fd63 	bl	2f14 <I2C_EnableInterrupts>
    344e:	e001      	b.n	3454 <I2C_MasterTransferNonBlocking+0x20>
    status_t result = kStatus_Success;

    /* Check if the I2C bus is idle - if not return busy status. */
    if (handle->state != kIdleState)
    {
        result = kStatus_I2C_Busy;
    3450:	f240 444c 	movw	r4, #1100	; 0x44c
            I2C_EnableInterrupts(base, kI2C_GlobalInterruptEnable);
        }
    }

    return result;
}
    3454:	4620      	mov	r0, r4
    3456:	bdb0      	pop	{r4, r5, r7, pc}

00003458 <uart_k20_init>:
#else
#define uart_k20_console_init(...)
#endif /* CONFIG_UART_CONSOLE && (CONFIG_PRINTK || CONFIG_STDOUT_CONSOLE) */

static int uart_k20_init(struct device *dev)
{
    3458:	b480      	push	{r7}
    345a:	af00      	add	r7, sp, #0

	/* Although it is possible to modify the bits through
	 * *sim directly, the following code saves about 20 bytes
	 * of ROM space, compared to direct modification.
	 */
	scgc4 = SIM->SCGC4;
    345c:	4b0b      	ldr	r3, [pc, #44]	; (348c <uart_k20_init+0x34>)
    345e:	f241 0134 	movw	r1, #4148	; 0x1034
    3462:	585a      	ldr	r2, [r3, r1]
#ifdef CONFIG_UART_K20_PORT_2
	scgc4 |= SIM_SCGC4_UART2(1);
#endif

#ifdef CONFIG_UART_K20_PORT_3
	scgc4 |= SIM_SCGC4_UART3(1);
    3464:	f442 5270 	orr.w	r2, r2, #15360	; 0x3c00
#endif

	SIM->SCGC4 = scgc4;
    3468:	505a      	str	r2, [r3, r1]

#ifdef CONFIG_UART_K20_PORT_4
	SIM->SCGC1 |= SIM_SCGC1_UART4(1);
    346a:	f241 0128 	movw	r1, #4136	; 0x1028
    346e:	585a      	ldr	r2, [r3, r1]
    3470:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    3474:	505a      	str	r2, [r3, r1]
	/* UART0 Rx and Tx pin assignments */
	rxPin = CONFIG_UART_CONSOLE_PORT_RX_PIN;
	txPin = CONFIG_UART_CONSOLE_PORT_TX_PIN;

	/* Enable the UART Rx and Tx Pins */
	port->PCR[rxPin] = PORT_PCR_MUX(CONFIG_UART_CONSOLE_PORT_MUX_FUNC);
    3476:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
    347a:	f44f 7240 	mov.w	r2, #768	; 0x300
    347e:	641a      	str	r2, [r3, #64]	; 0x40
	port->PCR[txPin] = PORT_PCR_MUX(CONFIG_UART_CONSOLE_PORT_MUX_FUNC);
    3480:	645a      	str	r2, [r3, #68]	; 0x44

	/* Initialize UART port for console if needed */
	uart_k20_console_init();

	return 0;
}
    3482:	2000      	movs	r0, #0
    3484:	46bd      	mov	sp, r7
    3486:	f85d 7b04 	ldr.w	r7, [sp], #4
    348a:	4770      	bx	lr
    348c:	40047000 	.word	0x40047000

00003490 <fsl_frdm_k64f_init>:
 *
 * @return 0
 */

static int fsl_frdm_k64f_init(struct device *arg)
{
    3490:	b598      	push	{r3, r4, r7, lr}
    3492:	af00      	add	r7, sp, #0
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    3494:	2120      	movs	r1, #32
    3496:	f3ef 8411 	mrs	r4, BASEPRI
    349a:	f381 8811 	msr	BASEPRI, r1

	/* disable interrupts */
	oldLevel = irq_lock();

	/* enable the port clocks */
	SIM->SCGC5 |= (SIM_SCGC5_PORTA(1) | SIM_SCGC5_PORTB(1) |
    349e:	4a1e      	ldr	r2, [pc, #120]	; (3518 <fsl_frdm_k64f_init+0x88>)
    34a0:	f241 0138 	movw	r1, #4152	; 0x1038
    34a4:	5853      	ldr	r3, [r2, r1]
    34a6:	f443 5378 	orr.w	r3, r3, #15872	; 0x3e00
    34aa:	5053      	str	r3, [r2, r1]
			       SIM_SCGC5_PORTC(1) | SIM_SCGC5_PORTD(1) |
			       SIM_SCGC5_PORTE(1));

	/* release I/O power hold to allow normal run state */
	PMC->REGSC |= PMC_REGSC_ACKISO_MASK;
    34ac:	491b      	ldr	r1, [pc, #108]	; (351c <fsl_frdm_k64f_init+0x8c>)
    34ae:	788b      	ldrb	r3, [r1, #2]
    34b0:	f043 0308 	orr.w	r3, r3, #8
    34b4:	708b      	strb	r3, [r1, #2]
	 * Disable memory protection and clear slave port errors.
	 * Note that the K64F does not implement the optional ARMv7-M memory
	 * protection unit (MPU), specified by the architecture (PMSAv7), in the
	 * Cortex-M4 core.  Instead, the processor includes its own MPU module.
	 */
	temp_reg = MPU->CESR;
    34b6:	f5a1 21e0 	sub.w	r1, r1, #458752	; 0x70000
    34ba:	680b      	ldr	r3, [r1, #0]
	temp_reg &= ~MPU_CESR_VLD_MASK;
    34bc:	f023 0301 	bic.w	r3, r3, #1
	temp_reg |= MPU_CESR_SPERR_MASK;
    34c0:	f043 4378 	orr.w	r3, r3, #4160749568	; 0xf8000000
	MPU->CESR = temp_reg;
    34c4:	600b      	str	r3, [r1, #0]
 * @return 1 if so, 0 otherwise
 */

static inline void _ScbMemFaultAllFaultsReset(void)
{
	__scs.scb.cfsr.byte.mmfsr.val = 0xfe;
    34c6:	4b16      	ldr	r3, [pc, #88]	; (3520 <fsl_frdm_k64f_init+0x90>)
    34c8:	21fe      	movs	r1, #254	; 0xfe
    34ca:	f883 1d28 	strb.w	r1, [r3, #3368]	; 0xd28
 * @return N/A
 */

static inline void _ScbBusFaultAllFaultsReset(void)
{
	__scs.scb.cfsr.byte.bfsr.val = 0xfe;
    34ce:	f883 1d29 	strb.w	r1, [r3, #3369]	; 0xd29
 * @return N/A
 */

static inline void _ScbUsageFaultAllFaultsReset(void)
{
	__scs.scb.cfsr.byte.ufsr.val = 0xffff;
    34d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    34d6:	f8a3 1d2a 	strh.w	r1, [r3, #3370]	; 0xd2a
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbHardFaultAllFaultsReset(void)
{
	return __scs.scb.hfsr.val = 0xffff;
    34da:	f8c3 1d2c 	str.w	r1, [r3, #3372]	; 0xd2c
 *
 * @param config Pointer to the configure structure.
 */
static inline void CLOCK_SetSimSafeDivs(void)
{
    SIM->CLKDIV1 = 0x01240000U;
    34de:	f04f 7192 	mov.w	r1, #19136512	; 0x1240000
    34e2:	f241 0344 	movw	r3, #4164	; 0x1044
    34e6:	50d1      	str	r1, [r2, r3]
 */
static ALWAYS_INLINE void clkInit(void)
{
	CLOCK_SetSimSafeDivs();

	CLOCK_InitOsc0(&oscConfig);
    34e8:	480e      	ldr	r0, [pc, #56]	; (3524 <fsl_frdm_k64f_init+0x94>)
    34ea:	f7ff fc61 	bl	2db0 <CLOCK_InitOsc0>
 *
 * @param freq The XTAL0/EXTAL0 input clock frequency in Hz.
 */
static inline void CLOCK_SetXtal0Freq(uint32_t freq)
{
    g_xtal0Freq = freq;
    34ee:	4a0e      	ldr	r2, [pc, #56]	; (3528 <fsl_frdm_k64f_init+0x98>)
    34f0:	4b0e      	ldr	r3, [pc, #56]	; (352c <fsl_frdm_k64f_init+0x9c>)
    34f2:	601a      	str	r2, [r3, #0]
	CLOCK_SetXtal0Freq(CONFIG_OSC_XTAL0_FREQ);

	CLOCK_BootToPeeMode(kMCG_OscselOsc, kMCG_PllClkSelPll0, &pll0Config);
    34f4:	4a0e      	ldr	r2, [pc, #56]	; (3530 <fsl_frdm_k64f_init+0xa0>)
    34f6:	2100      	movs	r1, #0
    34f8:	4608      	mov	r0, r1
    34fa:	f7ff fcb7 	bl	2e6c <CLOCK_BootToPeeMode>

	CLOCK_SetInternalRefClkConfig(kMCG_IrclkEnable, kMCG_IrcSlow,
    34fe:	2201      	movs	r2, #1
    3500:	2100      	movs	r1, #0
    3502:	2002      	movs	r0, #2
    3504:	f7ff fbec 	bl	2ce0 <CLOCK_SetInternalRefClkConfig>
				      CONFIG_MCG_FCRDIV);

	CLOCK_SetSimConfig(&simConfig);
    3508:	480a      	ldr	r0, [pc, #40]	; (3534 <fsl_frdm_k64f_init+0xa4>)
    350a:	f7ff fa9f 	bl	2a4c <CLOCK_SetSimConfig>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    350e:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	/* restore interrupt state */
	irq_unlock(oldLevel);
	return 0;
}
    3512:	2000      	movs	r0, #0
    3514:	bd98      	pop	{r3, r4, r7, pc}
    3516:	bf00      	nop
    3518:	40047000 	.word	0x40047000
    351c:	4007d000 	.word	0x4007d000
    3520:	e000e000 	.word	0xe000e000
    3524:	00005880 	.word	0x00005880
    3528:	02faf080 	.word	0x02faf080
    352c:	20000324 	.word	0x20000324
    3530:	0000587c 	.word	0x0000587c
    3534:	00005874 	.word	0x00005874

00003538 <_WdogInit>:
     *
     * This sequence must execute within 20 clock cycles, so disable
     * interrupts to keep the code atomic and ensure the timing.
     */

    cpsid i
    3538:	b672      	cpsid	i

    ldr r0, =PERIPH_ADDR_BASE_WDOG
    353a:	4807      	ldr	r0, [pc, #28]	; (3558 <_WdogInit+0x20>)

    movw r1, #WDOG_UNLOCK_1_CMD
    353c:	f24c 5120 	movw	r1, #50464	; 0xc520
    strh r1, [r0, #WDOG_UNLOCK_OFFSET]
    3540:	81c1      	strh	r1, [r0, #14]

    movw r1, #WDOG_UNLOCK_2_CMD
    3542:	f64d 1128 	movw	r1, #55592	; 0xd928
    strh r1, [r0, #WDOG_UNLOCK_OFFSET]
    3546:	81c1      	strh	r1, [r0, #14]
     *
     * Writes to control/configuration registers must execute within
     * 256 clock cycles after unlocking.
     */

    ldrh r1, [r0, #WDOG_SCTRL_HI_OFFSET]
    3548:	8801      	ldrh	r1, [r0, #0]
    mov  r2, #1
    354a:	f04f 0201 	mov.w	r2, #1
    bics r1, r2
    354e:	4391      	bics	r1, r2
    strh r1, [r0, #WDOG_SCTRL_HI_OFFSET]
    3550:	8001      	strh	r1, [r0, #0]

    cpsie i
    3552:	b662      	cpsie	i

    bx lr
    3554:	4770      	bx	lr
    3556:	0000      	.short	0x0000
     * interrupts to keep the code atomic and ensure the timing.
     */

    cpsid i

    ldr r0, =PERIPH_ADDR_BASE_WDOG
    3558:	40052000 	.word	0x40052000

0000355c <_ExcExit>:
 * @return N/A
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

    ldr r1, =_nanokernel
    355c:	4909      	ldr	r1, [pc, #36]	; (3584 <_EXIT_EXC+0x2>)

    ldr r1, [r1, #__tNANO_current_OFFSET]
    355e:	6809      	ldr	r1, [r1, #0]
    ldr r2, [r1, #__tTCS_prio_OFFSET]
    3560:	68ca      	ldr	r2, [r1, #12]
    ldr r3, [r1, #__tTCS_sched_locked_OFFSET]
    3562:	6d8b      	ldr	r3, [r1, #88]	; 0x58

    /* coop thread ? do not schedule */
    cmp r2, #0
    3564:	2a00      	cmp	r2, #0
    blt _EXIT_EXC
    3566:	db0c      	blt.n	3582 <_EXIT_EXC>

    /* scheduler locked ? do not schedule */
    cmp r3, #0
    3568:	2b00      	cmp	r3, #0
    bgt _EXIT_EXC
    356a:	dc0a      	bgt.n	3582 <_EXIT_EXC>

    push {lr}
    356c:	b500      	push	{lr}
    blx _is_next_thread_current
    356e:	f000 fea3 	bl	42b8 <_is_next_thread_current>
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
    pop {r1}
    mov lr, r1
#else
    pop {lr}
    3572:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_CPU_CORTEX_M0_M0PLUS  */
    cmp r0, #0
    3576:	2800      	cmp	r0, #0
    bne _EXIT_EXC
    3578:	d103      	bne.n	3582 <_EXIT_EXC>

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    357a:	4903      	ldr	r1, [pc, #12]	; (3588 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
    357c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
    3580:	600a      	str	r2, [r1, #0]

00003582 <_EXIT_EXC>:

    _GDB_STUB_EXC_EXIT

_EXIT_EXC:

    bx lr
    3582:	4770      	bx	lr
 * @return N/A
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

    ldr r1, =_nanokernel
    3584:	200001fc 	.word	0x200001fc
#endif /* CONFIG_CPU_CORTEX_M0_M0PLUS  */
    cmp r0, #0
    bne _EXIT_EXC

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
    3588:	e000ed04 	.word	0xe000ed04

0000358c <_IntLibInit>:
 *
 * @return N/A
 */

void _IntLibInit(void)
{
    358c:	b480      	push	{r7}
    358e:	af00      	add	r7, sp, #0
	int irq = 0;
    3590:	2300      	movs	r3, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3592:	e005      	b.n	35a0 <_IntLibInit+0x14>
 */

static inline void _NvicIrqPrioSet(unsigned int irq, unsigned int prio)
{
	__ASSERT(prio < 256, "invalid priority\n");
	__scs.nvic.ipr[irq] = prio;
    3594:	4a05      	ldr	r2, [pc, #20]	; (35ac <_IntLibInit+0x20>)
    3596:	441a      	add	r2, r3
    3598:	2120      	movs	r1, #32
    359a:	f882 1400 	strb.w	r1, [r2, #1024]	; 0x400
    359e:	3301      	adds	r3, #1
    35a0:	2b55      	cmp	r3, #85	; 0x55
    35a2:	ddf7      	ble.n	3594 <_IntLibInit+0x8>
		_NvicIrqPrioSet(irq, _EXC_IRQ_DEFAULT_PRIO);
	}
}
    35a4:	46bd      	mov	sp, r7
    35a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    35aa:	4770      	bx	lr
    35ac:	e000e000 	.word	0xe000e000

000035b0 <__pendsv>:
	pop {r0}
	mov lr, r0
#endif

    /* load _Nanokernel into r1 and current tTCS into r2 */
    ldr r1, =_nanokernel
    35b0:	4911      	ldr	r1, [pc, #68]	; (35f8 <__pendsv+0x48>)
    ldr r2, [r1, #__tNANO_current_OFFSET]
    35b2:	680a      	ldr	r2, [r1, #0]

    /* addr of callee-saved regs in TCS in r0 */
    ldr r0, =__tTCS_preempReg_OFFSET
    35b4:	2030      	movs	r0, #48	; 0x30
    add r0, r2
    35b6:	4410      	add	r0, r2

    /* save callee-saved + psp in TCS */
    mrs ip, PSP
    35b8:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#else
    stmia r0, {v1-v8, ip}
    35bc:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    35c0:	4f0e      	ldr	r7, [pc, #56]	; (35fc <__pendsv+0x4c>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    35c2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
    cpsid i
#else /* CONFIG_CPU_CORTEX_M3_M4 */
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    35c6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    35c8:	f380 8811 	msr	BASEPRI, r0
#endif

    /* find out incoming thread (fiber or task) */

    mov.n v2, lr
    35cc:	4675      	mov	r5, lr
    movs.n v1, r1
    35ce:	000c      	movs	r4, r1
    blx _get_next_ready_thread
    35d0:	f000 fe0e 	bl	41f0 <_get_next_ready_thread>
    movs.n r1, v1
    35d4:	0021      	movs	r1, r4
    mov.n lr, v2
    35d6:	46ae      	mov	lr, r5
    movs.n r2, r0
    35d8:	0002      	movs	r2, r0

    /* r2 contains the new thread */
    str r2, [r1, #__tNANO_current_OFFSET]
    35da:	600a      	str	r2, [r1, #0]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
    35dc:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #__tTCS_basepri_OFFSET]
    35de:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
    movs.n r3, #0
    35e0:	2300      	movs	r3, #0
    str r3, [r2, #__tTCS_basepri_OFFSET]
    35e2:	62d3      	str	r3, [r2, #44]	; 0x2c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#else /* CONFIG_CPU_CORTEX_M3_M4 */
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    35e4:	f380 8811 	msr	BASEPRI, r0
    add r0, r2, #__tTCS_preemp_float_regs_OFFSET
    vldmia r0, {s16-s31}
#endif

    /* load callee-saved + psp from TCS */
    add r0, r2, #__tTCS_preempReg_OFFSET
    35e8:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    35ec:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#endif /* CONFIG_CPU_CORTEX_M0_M0PLUS */

    msr PSP, ip
    35f0:	f38c 8809 	msr	PSP, ip

    _GDB_STUB_EXC_EXIT

    /* exc return */
    bx lr
    35f4:	4770      	bx	lr
    35f6:	0000      	.short	0x0000
	pop {r0}
	mov lr, r0
#endif

    /* load _Nanokernel into r1 and current tTCS into r2 */
    ldr r1, =_nanokernel
    35f8:	200001fc 	.word	0x200001fc
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
    35fc:	e000ed04 	.word	0xe000ed04

00003600 <__svc>:
    /*
     * Set _Swap()'s default return code to -EAGAIN. This eliminates the
     * need for the timeout code to invoke fiberRtnValueSet().
     */

    mrs  r2, PSP   /* thread mode, stack frame is on PSP */
    3600:	f3ef 8209 	mrs	r2, PSP
    ldr  r3, =_k_neg_eagain
    3604:	4b05      	ldr	r3, [pc, #20]	; (361c <__svc+0x1c>)
    ldr  r3, [r3, #0]
    3606:	681b      	ldr	r3, [r3, #0]
    str  r3, [r2, #__tESF_a1_OFFSET]
    3608:	6013      	str	r3, [r2, #0]
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
    360a:	4040      	eors	r0, r0
    msr BASEPRI, r0
    360c:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
    3610:	4903      	ldr	r1, [pc, #12]	; (3620 <__svc+0x20>)
    ldr r2, =_SCS_ICSR_PENDSV
    3612:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
    3616:	600a      	str	r2, [r1, #0]

    _GDB_STUB_EXC_EXIT

    /* handler mode exit, to PendSV */
    bx lr
    3618:	4770      	bx	lr
    361a:	0000      	.short	0x0000
     * Set _Swap()'s default return code to -EAGAIN. This eliminates the
     * need for the timeout code to invoke fiberRtnValueSet().
     */

    mrs  r2, PSP   /* thread mode, stack frame is on PSP */
    ldr  r3, =_k_neg_eagain
    361c:	00005908 	.word	0x00005908
     */
    eors.n r0, r0
    msr BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
    3620:	e000ed04 	.word	0xe000ed04

00003624 <_Swap>:
 *
 */

SECTION_FUNC(TEXT, _Swap)

    ldr r1, =_nanokernel
    3624:	4902      	ldr	r1, [pc, #8]	; (3630 <_Swap+0xc>)
    ldr r2, [r1, #__tNANO_current_OFFSET]
    3626:	680a      	ldr	r2, [r1, #0]
    str r0, [r2, #__tTCS_basepri_OFFSET]
    3628:	62d0      	str	r0, [r2, #44]	; 0x2c
    cpsie i

    /* PC stored in stack frame by the hw */
    bx lr
#else /* CONFIG_CPU_CORTEX_M3_M4 */
    svc #0
    362a:	df00      	svc	0

    /* r0 contains the return value if needed */
    bx lr
    362c:	4770      	bx	lr
    362e:	0000      	.short	0x0000
 *
 */

SECTION_FUNC(TEXT, _Swap)

    ldr r1, =_nanokernel
    3630:	200001fc 	.word	0x200001fc

00003634 <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
    3634:	b580      	push	{r7, lr}
    3636:	af00      	add	r7, sp, #0
	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
    3638:	4801      	ldr	r0, [pc, #4]	; (3640 <_DebugMonitor+0xc>)
    363a:	f7ff f89f 	bl	277c <printk>
    363e:	bd80      	pop	{r7, pc}
    3640:	00005378 	.word	0x00005378

00003644 <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
    3644:	b580      	push	{r7, lr}
    3646:	af00      	add	r7, sp, #0
    3648:	460a      	mov	r2, r1
	PR_EXC("***** %s %d) *****\n",
    364a:	290f      	cmp	r1, #15
    364c:	dc01      	bgt.n	3652 <_ReservedException+0xe>
    364e:	4904      	ldr	r1, [pc, #16]	; (3660 <_ReservedException+0x1c>)
    3650:	e000      	b.n	3654 <_ReservedException+0x10>
    3652:	4904      	ldr	r1, [pc, #16]	; (3664 <_ReservedException+0x20>)
    3654:	3a10      	subs	r2, #16
    3656:	4804      	ldr	r0, [pc, #16]	; (3668 <_ReservedException+0x24>)
    3658:	f7ff f890 	bl	277c <printk>
    365c:	bd80      	pop	{r7, pc}
    365e:	bf00      	nop
    3660:	000053b0 	.word	0x000053b0
    3664:	000053c8 	.word	0x000053c8
    3668:	000053e4 	.word	0x000053e4

0000366c <_FaultThreadShow>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _FaultThreadShow(const NANO_ESF *esf)
{
    366c:	b598      	push	{r3, r4, r7, lr}
    366e:	af00      	add	r7, sp, #0
    3670:	4604      	mov	r4, r0
	PR_EXC("  Executing thread ID (thread): %p\n"
    3672:	f000 fe8d 	bl	4390 <k_current_get>
    3676:	69a2      	ldr	r2, [r4, #24]
    3678:	4601      	mov	r1, r0
    367a:	4802      	ldr	r0, [pc, #8]	; (3684 <_FaultThreadShow+0x18>)
    367c:	f7ff f87e 	bl	277c <printk>
    3680:	bd98      	pop	{r3, r4, r7, pc}
    3682:	bf00      	nop
    3684:	000053f8 	.word	0x000053f8

00003688 <_MpuFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _MpuFault(const NANO_ESF *esf, int fromHardFault)
{
    3688:	b5b0      	push	{r4, r5, r7, lr}
    368a:	af00      	add	r7, sp, #0
    368c:	4604      	mov	r4, r0
    368e:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
    3690:	4820      	ldr	r0, [pc, #128]	; (3714 <_MpuFault+0x8c>)
    3692:	f7ff f873 	bl	277c <printk>

	_FaultThreadShow(esf);
    3696:	4620      	mov	r0, r4
    3698:	f7ff ffe8 	bl	366c <_FaultThreadShow>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsStacking(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.mstkerr;
    369c:	4b1e      	ldr	r3, [pc, #120]	; (3718 <_MpuFault+0x90>)
    369e:	f893 3d28 	ldrb.w	r3, [r3, #3368]	; 0xd28

	if (_ScbMemFaultIsStacking()) {
    36a2:	f013 0f10 	tst.w	r3, #16
    36a6:	d003      	beq.n	36b0 <_MpuFault+0x28>
		PR_EXC("  Stacking error\n");
    36a8:	481c      	ldr	r0, [pc, #112]	; (371c <_MpuFault+0x94>)
    36aa:	f7ff f867 	bl	277c <printk>
    36ae:	bdb0      	pop	{r4, r5, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsUnstacking(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.munstkerr;
    36b0:	4b19      	ldr	r3, [pc, #100]	; (3718 <_MpuFault+0x90>)
    36b2:	f893 3d28 	ldrb.w	r3, [r3, #3368]	; 0xd28
	} else if (_ScbMemFaultIsUnstacking()) {
    36b6:	f013 0f08 	tst.w	r3, #8
    36ba:	d003      	beq.n	36c4 <_MpuFault+0x3c>
		PR_EXC("  Unstacking error\n");
    36bc:	4818      	ldr	r0, [pc, #96]	; (3720 <_MpuFault+0x98>)
    36be:	f7ff f85d 	bl	277c <printk>
    36c2:	bdb0      	pop	{r4, r5, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsDataAccessViolation(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.daccviol;
    36c4:	4b14      	ldr	r3, [pc, #80]	; (3718 <_MpuFault+0x90>)
    36c6:	f893 3d28 	ldrb.w	r3, [r3, #3368]	; 0xd28
	} else if (_ScbMemFaultIsDataAccessViolation()) {
    36ca:	f013 0f02 	tst.w	r3, #2
    36ce:	d016      	beq.n	36fe <_MpuFault+0x76>
		PR_EXC("  Data Access Violation\n");
    36d0:	4814      	ldr	r0, [pc, #80]	; (3724 <_MpuFault+0x9c>)
    36d2:	f7ff f853 	bl	277c <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsMmfarValid(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.mmarvalid;
    36d6:	4b10      	ldr	r3, [pc, #64]	; (3718 <_MpuFault+0x90>)
    36d8:	f893 3d28 	ldrb.w	r3, [r3, #3368]	; 0xd28
		if (_ScbMemFaultIsMmfarValid()) {
    36dc:	09db      	lsrs	r3, r3, #7
    36de:	d017      	beq.n	3710 <_MpuFault+0x88>
 * @return the faulting address
 */

static inline uint32_t _ScbMemFaultAddrGet(void)
{
	return __scs.scb.mmfar;
    36e0:	4b0d      	ldr	r3, [pc, #52]	; (3718 <_MpuFault+0x90>)
    36e2:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
			PR_EXC("  Address: 0x%" PRIx32 "\n",
    36e6:	4810      	ldr	r0, [pc, #64]	; (3728 <_MpuFault+0xa0>)
    36e8:	f7ff f848 	bl	277c <printk>
			       _ScbMemFaultAddrGet());
			if (fromHardFault) {
    36ec:	b185      	cbz	r5, 3710 <_MpuFault+0x88>
 * @return N/A
 */

static inline void _ScbMemFaultMmfarReset(void)
{
	__scs.scb.cfsr.byte.mmfsr.bit.mmarvalid = 0;
    36ee:	4a0a      	ldr	r2, [pc, #40]	; (3718 <_MpuFault+0x90>)
    36f0:	f892 3d28 	ldrb.w	r3, [r2, #3368]	; 0xd28
    36f4:	f36f 13c7 	bfc	r3, #7, #1
    36f8:	f882 3d28 	strb.w	r3, [r2, #3368]	; 0xd28
    36fc:	bdb0      	pop	{r4, r5, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbMemFaultIsInstrAccessViolation(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.bit.iaccviol;
    36fe:	4b06      	ldr	r3, [pc, #24]	; (3718 <_MpuFault+0x90>)
    3700:	f893 3d28 	ldrb.w	r3, [r3, #3368]	; 0xd28
				_ScbMemFaultMmfarReset();
			}
		}
	} else if (_ScbMemFaultIsInstrAccessViolation()) {
    3704:	f013 0f01 	tst.w	r3, #1
    3708:	d002      	beq.n	3710 <_MpuFault+0x88>
		PR_EXC("  Instruction Access Violation\n");
    370a:	4808      	ldr	r0, [pc, #32]	; (372c <_MpuFault+0xa4>)
    370c:	f7ff f836 	bl	277c <printk>
    3710:	bdb0      	pop	{r4, r5, r7, pc}
    3712:	bf00      	nop
    3714:	00005444 	.word	0x00005444
    3718:	e000e000 	.word	0xe000e000
    371c:	0000545c 	.word	0x0000545c
    3720:	00005470 	.word	0x00005470
    3724:	00005484 	.word	0x00005484
    3728:	000054a0 	.word	0x000054a0
    372c:	000054b4 	.word	0x000054b4

00003730 <_BusFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _BusFault(const NANO_ESF *esf, int fromHardFault)
{
    3730:	b5b0      	push	{r4, r5, r7, lr}
    3732:	af00      	add	r7, sp, #0
    3734:	4604      	mov	r4, r0
    3736:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
    3738:	4829      	ldr	r0, [pc, #164]	; (37e0 <_BusFault+0xb0>)
    373a:	f7ff f81f 	bl	277c <printk>

	_FaultThreadShow(esf);
    373e:	4620      	mov	r0, r4
    3740:	f7ff ff94 	bl	366c <_FaultThreadShow>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsStacking(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.stkerr;
    3744:	4b27      	ldr	r3, [pc, #156]	; (37e4 <_BusFault+0xb4>)
    3746:	f893 3d29 	ldrb.w	r3, [r3, #3369]	; 0xd29

	if (_ScbBusFaultIsStacking()) {
    374a:	f013 0f10 	tst.w	r3, #16
    374e:	d003      	beq.n	3758 <_BusFault+0x28>
		PR_EXC("  Stacking error\n");
    3750:	4825      	ldr	r0, [pc, #148]	; (37e8 <_BusFault+0xb8>)
    3752:	f7ff f813 	bl	277c <printk>
    3756:	bdb0      	pop	{r4, r5, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsUnstacking(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.unstkerr;
    3758:	4b22      	ldr	r3, [pc, #136]	; (37e4 <_BusFault+0xb4>)
    375a:	f893 3d29 	ldrb.w	r3, [r3, #3369]	; 0xd29
	} else if (_ScbBusFaultIsUnstacking()) {
    375e:	f013 0f08 	tst.w	r3, #8
    3762:	d003      	beq.n	376c <_BusFault+0x3c>
		PR_EXC("  Unstacking error\n");
    3764:	4821      	ldr	r0, [pc, #132]	; (37ec <_BusFault+0xbc>)
    3766:	f7ff f809 	bl	277c <printk>
    376a:	bdb0      	pop	{r4, r5, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsPrecise(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.preciserr;
    376c:	4b1d      	ldr	r3, [pc, #116]	; (37e4 <_BusFault+0xb4>)
    376e:	f893 3d29 	ldrb.w	r3, [r3, #3369]	; 0xd29
	} else if (_ScbBusFaultIsPrecise()) {
    3772:	f013 0f02 	tst.w	r3, #2
    3776:	d01f      	beq.n	37b8 <_BusFault+0x88>
		PR_EXC("  Precise data bus error\n");
    3778:	481d      	ldr	r0, [pc, #116]	; (37f0 <_BusFault+0xc0>)
    377a:	f7fe ffff 	bl	277c <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsBfarValid(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.bfarvalid;
    377e:	4b19      	ldr	r3, [pc, #100]	; (37e4 <_BusFault+0xb4>)
    3780:	f893 3d29 	ldrb.w	r3, [r3, #3369]	; 0xd29
		if (_ScbBusFaultIsBfarValid()) {
    3784:	09db      	lsrs	r3, r3, #7
    3786:	d00d      	beq.n	37a4 <_BusFault+0x74>
 * @return the faulting address
 */

static inline uint32_t _ScbBusFaultAddrGet(void)
{
	return __scs.scb.bfar;
    3788:	4b16      	ldr	r3, [pc, #88]	; (37e4 <_BusFault+0xb4>)
    378a:	f8d3 1d38 	ldr.w	r1, [r3, #3384]	; 0xd38
			PR_EXC("  Address: 0x%" PRIx32 "\n",
    378e:	4819      	ldr	r0, [pc, #100]	; (37f4 <_BusFault+0xc4>)
    3790:	f7fe fff4 	bl	277c <printk>
			       _ScbBusFaultAddrGet());
			if (fromHardFault) {
    3794:	b135      	cbz	r5, 37a4 <_BusFault+0x74>
 * @return N/A
 */

static inline void _ScbBusFaultBfarReset(void)
{
	__scs.scb.cfsr.byte.bfsr.bit.bfarvalid = 0;
    3796:	4a13      	ldr	r2, [pc, #76]	; (37e4 <_BusFault+0xb4>)
    3798:	f892 3d29 	ldrb.w	r3, [r2, #3369]	; 0xd29
    379c:	f36f 13c7 	bfc	r3, #7, #1
    37a0:	f882 3d29 	strb.w	r3, [r2, #3369]	; 0xd29
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsImprecise(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.impreciserr;
    37a4:	4b0f      	ldr	r3, [pc, #60]	; (37e4 <_BusFault+0xb4>)
    37a6:	f893 3d29 	ldrb.w	r3, [r3, #3369]	; 0xd29
				_ScbBusFaultBfarReset();
			}
		}
		/* it's possible to have both a precise and imprecise fault */
		if (_ScbBusFaultIsImprecise()) {
    37aa:	f013 0f04 	tst.w	r3, #4
    37ae:	d016      	beq.n	37de <_BusFault+0xae>
			PR_EXC("  Imprecise data bus error\n");
    37b0:	4811      	ldr	r0, [pc, #68]	; (37f8 <_BusFault+0xc8>)
    37b2:	f7fe ffe3 	bl	277c <printk>
    37b6:	bdb0      	pop	{r4, r5, r7, pc}
    37b8:	4b0a      	ldr	r3, [pc, #40]	; (37e4 <_BusFault+0xb4>)
    37ba:	f893 3d29 	ldrb.w	r3, [r3, #3369]	; 0xd29
		}
	} else if (_ScbBusFaultIsImprecise()) {
    37be:	f013 0f04 	tst.w	r3, #4
    37c2:	d003      	beq.n	37cc <_BusFault+0x9c>
		PR_EXC("  Imprecise data bus error\n");
    37c4:	480c      	ldr	r0, [pc, #48]	; (37f8 <_BusFault+0xc8>)
    37c6:	f7fe ffd9 	bl	277c <printk>
    37ca:	bdb0      	pop	{r4, r5, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbBusFaultIsInstrBusErr(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.bit.ibuserr;
    37cc:	4b05      	ldr	r3, [pc, #20]	; (37e4 <_BusFault+0xb4>)
    37ce:	f893 3d29 	ldrb.w	r3, [r3, #3369]	; 0xd29
	} else if (_ScbBusFaultIsInstrBusErr()) {
    37d2:	f013 0f01 	tst.w	r3, #1
    37d6:	d002      	beq.n	37de <_BusFault+0xae>
		PR_EXC("  Instruction bus error\n");
    37d8:	4808      	ldr	r0, [pc, #32]	; (37fc <_BusFault+0xcc>)
    37da:	f7fe ffcf 	bl	277c <printk>
    37de:	bdb0      	pop	{r4, r5, r7, pc}
    37e0:	000054d4 	.word	0x000054d4
    37e4:	e000e000 	.word	0xe000e000
    37e8:	0000545c 	.word	0x0000545c
    37ec:	00005470 	.word	0x00005470
    37f0:	000054ec 	.word	0x000054ec
    37f4:	000054a0 	.word	0x000054a0
    37f8:	00005508 	.word	0x00005508
    37fc:	00005524 	.word	0x00005524

00003800 <_UsageFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _UsageFault(const NANO_ESF *esf)
{
    3800:	b598      	push	{r3, r4, r7, lr}
    3802:	af00      	add	r7, sp, #0
    3804:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
    3806:	4821      	ldr	r0, [pc, #132]	; (388c <_UsageFault+0x8c>)
    3808:	f7fe ffb8 	bl	277c <printk>

	_FaultThreadShow(esf);
    380c:	4620      	mov	r0, r4
    380e:	f7ff ff2d 	bl	366c <_FaultThreadShow>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsDivByZero(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.divbyzero;
    3812:	4b1f      	ldr	r3, [pc, #124]	; (3890 <_UsageFault+0x90>)
    3814:	f8b3 3d2a 	ldrh.w	r3, [r3, #3370]	; 0xd2a

	/* bits are sticky: they stack and must be reset */
	if (_ScbUsageFaultIsDivByZero()) {
    3818:	f413 7f00 	tst.w	r3, #512	; 0x200
    381c:	d002      	beq.n	3824 <_UsageFault+0x24>
		PR_EXC("  Division by zero\n");
    381e:	481d      	ldr	r0, [pc, #116]	; (3894 <_UsageFault+0x94>)
    3820:	f7fe ffac 	bl	277c <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsUnaligned(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.unaligned;
    3824:	4b1a      	ldr	r3, [pc, #104]	; (3890 <_UsageFault+0x90>)
    3826:	f8b3 3d2a 	ldrh.w	r3, [r3, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsUnaligned()) {
    382a:	f413 7f80 	tst.w	r3, #256	; 0x100
    382e:	d002      	beq.n	3836 <_UsageFault+0x36>
		PR_EXC("  Unaligned memory access\n");
    3830:	4819      	ldr	r0, [pc, #100]	; (3898 <_UsageFault+0x98>)
    3832:	f7fe ffa3 	bl	277c <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsNoCp(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.nocp;
    3836:	4b16      	ldr	r3, [pc, #88]	; (3890 <_UsageFault+0x90>)
    3838:	f8b3 3d2a 	ldrh.w	r3, [r3, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsNoCp()) {
    383c:	f013 0f08 	tst.w	r3, #8
    3840:	d002      	beq.n	3848 <_UsageFault+0x48>
		PR_EXC("  No coprocessor instructions\n");
    3842:	4816      	ldr	r0, [pc, #88]	; (389c <_UsageFault+0x9c>)
    3844:	f7fe ff9a 	bl	277c <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsInvalidPcLoad(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.invpc;
    3848:	4b11      	ldr	r3, [pc, #68]	; (3890 <_UsageFault+0x90>)
    384a:	f8b3 3d2a 	ldrh.w	r3, [r3, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsInvalidPcLoad()) {
    384e:	f013 0f04 	tst.w	r3, #4
    3852:	d002      	beq.n	385a <_UsageFault+0x5a>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
    3854:	4812      	ldr	r0, [pc, #72]	; (38a0 <_UsageFault+0xa0>)
    3856:	f7fe ff91 	bl	277c <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsInvalidState(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.invstate;
    385a:	4b0d      	ldr	r3, [pc, #52]	; (3890 <_UsageFault+0x90>)
    385c:	f8b3 3d2a 	ldrh.w	r3, [r3, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsInvalidState()) {
    3860:	f013 0f02 	tst.w	r3, #2
    3864:	d002      	beq.n	386c <_UsageFault+0x6c>
		PR_EXC("  Illegal use of the EPSR\n");
    3866:	480f      	ldr	r0, [pc, #60]	; (38a4 <_UsageFault+0xa4>)
    3868:	f7fe ff88 	bl	277c <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbUsageFaultIsUndefinedInstr(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.bit.undefinstr;
    386c:	4b08      	ldr	r3, [pc, #32]	; (3890 <_UsageFault+0x90>)
    386e:	f8b3 3d2a 	ldrh.w	r3, [r3, #3370]	; 0xd2a
	}
	if (_ScbUsageFaultIsUndefinedInstr()) {
    3872:	f013 0f01 	tst.w	r3, #1
    3876:	d002      	beq.n	387e <_UsageFault+0x7e>
		PR_EXC("  Attempt to execute undefined instruction\n");
    3878:	480b      	ldr	r0, [pc, #44]	; (38a8 <_UsageFault+0xa8>)
    387a:	f7fe ff7f 	bl	277c <printk>
 * @return N/A
 */

static inline void _ScbUsageFaultAllFaultsReset(void)
{
	__scs.scb.cfsr.byte.ufsr.val = 0xffff;
    387e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    3882:	4b03      	ldr	r3, [pc, #12]	; (3890 <_UsageFault+0x90>)
    3884:	f8a3 2d2a 	strh.w	r2, [r3, #3370]	; 0xd2a
    3888:	bd98      	pop	{r3, r4, r7, pc}
    388a:	bf00      	nop
    388c:	00005540 	.word	0x00005540
    3890:	e000e000 	.word	0xe000e000
    3894:	0000555c 	.word	0x0000555c
    3898:	00005570 	.word	0x00005570
    389c:	0000558c 	.word	0x0000558c
    38a0:	000055ac 	.word	0x000055ac
    38a4:	000055d4 	.word	0x000055d4
    38a8:	000055f0 	.word	0x000055f0

000038ac <_HardFault>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _HardFault(const NANO_ESF *esf)
{
    38ac:	b598      	push	{r3, r4, r7, lr}
    38ae:	af00      	add	r7, sp, #0
    38b0:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
    38b2:	481a      	ldr	r0, [pc, #104]	; (391c <_HardFault+0x70>)
    38b4:	f7fe ff62 	bl	277c <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbHardFaultIsBusErrOnVectorRead(void)
{
	return __scs.scb.hfsr.bit.vecttbl;
    38b8:	4b19      	ldr	r3, [pc, #100]	; (3920 <_HardFault+0x74>)
    38ba:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c

#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	_FaultThreadShow(esf);
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	if (_ScbHardFaultIsBusErrOnVectorRead()) {
    38be:	f013 0f02 	tst.w	r3, #2
    38c2:	d003      	beq.n	38cc <_HardFault+0x20>
		PR_EXC("  Bus fault on vector table read\n");
    38c4:	4817      	ldr	r0, [pc, #92]	; (3924 <_HardFault+0x78>)
    38c6:	f7fe ff59 	bl	277c <printk>
    38ca:	bd98      	pop	{r3, r4, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbHardFaultIsForced(void)
{
	return __scs.scb.hfsr.bit.forced;
    38cc:	4b14      	ldr	r3, [pc, #80]	; (3920 <_HardFault+0x74>)
    38ce:	f8d3 3d2c 	ldr.w	r3, [r3, #3372]	; 0xd2c
	} else if (_ScbHardFaultIsForced()) {
    38d2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    38d6:	d020      	beq.n	391a <_HardFault+0x6e>
		PR_EXC("  Fault escalation (see below)\n");
    38d8:	4813      	ldr	r0, [pc, #76]	; (3928 <_HardFault+0x7c>)
    38da:	f7fe ff4f 	bl	277c <printk>
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbIsMemFault(void)
{
	return !!__scs.scb.cfsr.byte.mmfsr.val;
    38de:	4b10      	ldr	r3, [pc, #64]	; (3920 <_HardFault+0x74>)
    38e0:	f893 3d28 	ldrb.w	r3, [r3, #3368]	; 0xd28
		if (_ScbIsMemFault()) {
    38e4:	f013 0fff 	tst.w	r3, #255	; 0xff
    38e8:	d004      	beq.n	38f4 <_HardFault+0x48>
			_MpuFault(esf, 1);
    38ea:	2101      	movs	r1, #1
    38ec:	4620      	mov	r0, r4
    38ee:	f7ff fecb 	bl	3688 <_MpuFault>
    38f2:	bd98      	pop	{r3, r4, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbIsBusFault(void)
{
	return !!__scs.scb.cfsr.byte.bfsr.val;
    38f4:	4b0a      	ldr	r3, [pc, #40]	; (3920 <_HardFault+0x74>)
    38f6:	f893 3d29 	ldrb.w	r3, [r3, #3369]	; 0xd29
		} else if (_ScbIsBusFault()) {
    38fa:	f013 0fff 	tst.w	r3, #255	; 0xff
    38fe:	d004      	beq.n	390a <_HardFault+0x5e>
			_BusFault(esf, 1);
    3900:	2101      	movs	r1, #1
    3902:	4620      	mov	r0, r4
    3904:	f7ff ff14 	bl	3730 <_BusFault>
    3908:	bd98      	pop	{r3, r4, r7, pc}
 * @return 1 if so, 0 otherwise
 */

static inline int _ScbIsUsageFault(void)
{
	return !!__scs.scb.cfsr.byte.ufsr.val;
    390a:	4b05      	ldr	r3, [pc, #20]	; (3920 <_HardFault+0x74>)
    390c:	f8b3 3d2a 	ldrh.w	r3, [r3, #3370]	; 0xd2a
    3910:	b29b      	uxth	r3, r3
		} else if (_ScbIsUsageFault()) {
    3912:	b113      	cbz	r3, 391a <_HardFault+0x6e>
			_UsageFault(esf);
    3914:	4620      	mov	r0, r4
    3916:	f7ff ff73 	bl	3800 <_UsageFault>
    391a:	bd98      	pop	{r3, r4, r7, pc}
    391c:	0000561c 	.word	0x0000561c
    3920:	e000e000 	.word	0xe000e000
    3924:	00005634 	.word	0x00005634
    3928:	00005658 	.word	0x00005658

0000392c <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
    392c:	b580      	push	{r7, lr}
    392e:	af00      	add	r7, sp, #0
	switch (fault) {
    3930:	1ecb      	subs	r3, r1, #3
    3932:	2b09      	cmp	r3, #9
    3934:	d817      	bhi.n	3966 <_FaultDump+0x3a>
    3936:	e8df f003 	tbb	[pc, r3]
    393a:	0805      	.short	0x0805
    393c:	1616100c 	.word	0x1616100c
    3940:	13161616 	.word	0x13161616
	case 3:
		_HardFault(esf);
    3944:	f7ff ffb2 	bl	38ac <_HardFault>
		break;
    3948:	bd80      	pop	{r7, pc}
#if !defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	case 4:
		_MpuFault(esf, 0);
    394a:	2100      	movs	r1, #0
    394c:	f7ff fe9c 	bl	3688 <_MpuFault>
		break;
    3950:	bd80      	pop	{r7, pc}
	case 5:
		_BusFault(esf, 0);
    3952:	2100      	movs	r1, #0
    3954:	f7ff feec 	bl	3730 <_BusFault>
		break;
    3958:	bd80      	pop	{r7, pc}
	case 6:
		_UsageFault(esf);
    395a:	f7ff ff51 	bl	3800 <_UsageFault>
		break;
    395e:	bd80      	pop	{r7, pc}
	case 12:
		_DebugMonitor(esf);
    3960:	f7ff fe68 	bl	3634 <_DebugMonitor>
		break;
    3964:	bd80      	pop	{r7, pc}
#endif /* !CONFIG_CPU_CORTEX_M0_M0PLUS */
	default:
		_ReservedException(esf, fault);
    3966:	f7ff fe6d 	bl	3644 <_ReservedException>
    396a:	bd80      	pop	{r7, pc}

0000396c <_Fault>:
 *            state the exception was taken.
 *
 * @return This function does not return.
 */
void _Fault(const NANO_ESF *esf)
{
    396c:	b598      	push	{r3, r4, r7, lr}
    396e:	af00      	add	r7, sp, #0
    3970:	4604      	mov	r4, r0
 * @return the currently executing vector number, 0 if in thread mode.
 */

static inline uint32_t _ScbActiveVectorGet(void)
{
	return __scs.scb.icsr.bit.vectactive;
    3972:	4b06      	ldr	r3, [pc, #24]	; (398c <_Fault+0x20>)
    3974:	f8d3 1d04 	ldr.w	r1, [r3, #3332]	; 0xd04
	int fault = _ScbActiveVectorGet();

	FAULT_DUMP(esf, fault);
    3978:	f3c1 0108 	ubfx	r1, r1, #0, #9
    397c:	f7ff ffd6 	bl	392c <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
    3980:	4621      	mov	r1, r4
    3982:	2000      	movs	r0, #0
    3984:	f000 f8ca 	bl	3b1c <_SysFatalErrorHandler>
    3988:	bd98      	pop	{r3, r4, r7, pc}
    398a:	bf00      	nop
    398c:	e000e000 	.word	0xe000e000

00003990 <_FaultInit>:
 * Turns on the desired hardware faults.
 *
 * @return N/A
 */
void _FaultInit(void)
{
    3990:	b480      	push	{r7}
    3992:	af00      	add	r7, sp, #0
 * @return N/A
 */

static inline void _ScbDivByZeroFaultEnable(void)
{
	__scs.scb.ccr.bit.div_0_trp = 1;
    3994:	4a05      	ldr	r2, [pc, #20]	; (39ac <_FaultInit+0x1c>)
    3996:	f8d2 3d14 	ldr.w	r3, [r2, #3348]	; 0xd14
    399a:	f043 0310 	orr.w	r3, r3, #16
    399e:	f8c2 3d14 	str.w	r3, [r2, #3348]	; 0xd14
	_ScbDivByZeroFaultEnable();
}
    39a2:	46bd      	mov	sp, r7
    39a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    39a8:	4770      	bx	lr
    39aa:	bf00      	nop
    39ac:	e000e000 	.word	0xe000e000

000039b0 <_arch_irq_enable>:
 * the specified <irq>.
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
    39b0:	b480      	push	{r7}
    39b2:	af00      	add	r7, sp, #0
 * @return N/A
 */

static inline void _NvicIrqEnable(unsigned int irq)
{
	__scs.nvic.iser[REG_FROM_IRQ(irq)] = 1 << BIT_FROM_IRQ(irq);
    39b4:	0943      	lsrs	r3, r0, #5
    39b6:	f000 001f 	and.w	r0, r0, #31
    39ba:	2201      	movs	r2, #1
    39bc:	fa02 f000 	lsl.w	r0, r2, r0
    39c0:	3340      	adds	r3, #64	; 0x40
    39c2:	4a03      	ldr	r2, [pc, #12]	; (39d0 <_arch_irq_enable+0x20>)
    39c4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	_NvicIrqEnable(irq);
}
    39c8:	46bd      	mov	sp, r7
    39ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ce:	4770      	bx	lr
    39d0:	e000e000 	.word	0xe000e000

000039d4 <_irq_priority_set>:
 * and possibly one additional to support zero latency interrupts.
 *
 * @return N/A
 */
void _irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    39d4:	b480      	push	{r7}
    39d6:	af00      	add	r7, sp, #0
		prio += IRQ_PRIORITY_OFFSET;
	}
#else
#define IRQ_PRIORITY_OFFSET 2
	ARG_UNUSED(flags);
	prio += IRQ_PRIORITY_OFFSET;
    39d8:	3102      	adds	r1, #2
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - IRQ_PRIORITY_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (IRQ_PRIORITY_OFFSET));
	_NvicIrqPrioSet(irq, _EXC_PRIO(prio));
    39da:	0109      	lsls	r1, r1, #4
 */

static inline void _NvicIrqPrioSet(unsigned int irq, unsigned int prio)
{
	__ASSERT(prio < 256, "invalid priority\n");
	__scs.nvic.ipr[irq] = prio;
    39dc:	b2c9      	uxtb	r1, r1
    39de:	4b04      	ldr	r3, [pc, #16]	; (39f0 <_irq_priority_set+0x1c>)
    39e0:	4418      	add	r0, r3
    39e2:	f880 1400 	strb.w	r1, [r0, #1024]	; 0x400
}
    39e6:	46bd      	mov	sp, r7
    39e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    39ec:	4770      	bx	lr
    39ee:	bf00      	nop
    39f0:	e000e000 	.word	0xe000e000

000039f4 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
    39f4:	b580      	push	{r7, lr}
    39f6:	af00      	add	r7, sp, #0
	ARG_UNUSED(unused);
	__reserved();
    39f8:	f000 f840 	bl	3a7c <__bus_fault>
    39fc:	bd80      	pop	{r7, pc}
    39fe:	bf00      	nop

00003a00 <_new_thread>:

void _new_thread(char *pStackMem, unsigned stackSize,
		 void *uk_task_ptr, _thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned options)
{
    3a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3a02:	af00      	add	r7, sp, #0
    3a04:	4604      	mov	r4, r0
    3a06:	460a      	mov	r2, r1
    3a08:	461e      	mov	r6, r3
	__ASSERT(!((uint32_t)pStackMem & (STACK_ALIGN - 1)),
		 "stack is not aligned properly\n"
		 "%d-byte alignment required\n", STACK_ALIGN);

	char *stackEnd = pStackMem + stackSize;
    3a0a:	1845      	adds	r5, r0, r1
	struct __esf *pInitCtx;
	struct tcs *tcs = (struct tcs *) pStackMem;

#ifdef CONFIG_INIT_STACKS
	memset(pStackMem, 0xaa, stackSize);
    3a0c:	21aa      	movs	r1, #170	; 0xaa
    3a0e:	f7fe fe3f 	bl	2690 <memset>
#endif

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd) -
    3a12:	f025 0307 	bic.w	r3, r5, #7
    3a16:	f1a3 0268 	sub.w	r2, r3, #104	; 0x68
				    sizeof(struct __esf));

	pInitCtx->pc = ((uint32_t)_thread_entry) & 0xfffffffe;
    3a1a:	4911      	ldr	r1, [pc, #68]	; (3a60 <_new_thread+0x60>)
    3a1c:	f021 0101 	bic.w	r1, r1, #1
    3a20:	f843 1c50 	str.w	r1, [r3, #-80]
	pInitCtx->a1 = (uint32_t)pEntry;
    3a24:	f843 6c68 	str.w	r6, [r3, #-104]
	pInitCtx->a2 = (uint32_t)parameter1;
    3a28:	69bb      	ldr	r3, [r7, #24]
    3a2a:	6053      	str	r3, [r2, #4]
	pInitCtx->a3 = (uint32_t)parameter2;
    3a2c:	69fb      	ldr	r3, [r7, #28]
    3a2e:	6093      	str	r3, [r2, #8]
	pInitCtx->a4 = (uint32_t)parameter3;
    3a30:	6a3b      	ldr	r3, [r7, #32]
    3a32:	60d3      	str	r3, [r2, #12]
	pInitCtx->xpsr =
    3a34:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3a38:	61d3      	str	r3, [r2, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	/* k_q_node initialized upon first insertion in a list */
	tcs->flags = options | K_PRESTART;
    3a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3a3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    3a40:	60a3      	str	r3, [r4, #8]
	tcs->sched_locked = 0;
    3a42:	2300      	movs	r3, #0
    3a44:	65a3      	str	r3, [r4, #88]	; 0x58

	/* static threads overwrite it afterwards with real value */
	tcs->init_data = NULL;
    3a46:	65e3      	str	r3, [r4, #92]	; 0x5c
	tcs->fn_abort = NULL;
    3a48:	6623      	str	r3, [r4, #96]	; 0x60
	tcs->prio = priority;
    3a4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    3a4c:	60e1      	str	r1, [r4, #12]
	tcs->entry = (struct __thread_entry *)(pInitCtx);
#endif

	ARG_UNUSED(uk_task_ptr);

	tcs->preempReg.psp = (uint32_t)pInitCtx;
    3a4e:	6522      	str	r2, [r4, #80]	; 0x50
	tcs->basepri = 0;
    3a50:	62e3      	str	r3, [r4, #44]	; 0x2c
	/*
	 * Must be initialized here and when dequeueing a timeout so that code
	 * not dealing with timeouts does not have to handle this, such as when
	 * waiting forever on a semaphore.
	 */
	t->delta_ticks_from_prev = -1;
    3a52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3a56:	6262      	str	r2, [r4, #36]	; 0x24

	/*
	 * Must be initialized here so that the _fiber_wakeup family of APIs can
	 * verify the fiber is not on a wait queue before aborting a timeout.
	 */
	t->wait_q = NULL;
    3a58:	6223      	str	r3, [r4, #32]

	/*
	 * Must be initialized here, so the _handle_one_timeout()
	 * routine can check if there is a fiber waiting on this timeout
	 */
	t->thread = NULL;
    3a5a:	61e3      	str	r3, [r4, #28]

	/*
	 * Function must be initialized before being potentially called.
	 */
	t->func = func;
    3a5c:	62a3      	str	r3, [r4, #40]	; 0x28
    3a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3a60:	00004929 	.word	0x00004929

00003a64 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
    ldr r1, =_SCB_SCR
    3a64:	4901      	ldr	r1, [pc, #4]	; (3a6c <_CpuIdleInit+0x8>)
    movs.n r2, #_SCR_INIT_BITS
    3a66:	2210      	movs	r2, #16
    str r2, [r1]
    3a68:	600a      	str	r2, [r1, #0]
    bx lr
    3a6a:	4770      	bx	lr
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
    ldr r1, =_SCB_SCR
    3a6c:	e000ed10 	.word	0xe000ed10

00003a70 <nano_cpu_idle>:

#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
    cpsie i
#else /* CONFIG_CPU_CORTEX_M3_M4 */
    /* clear BASEPRI so wfi is awakened by incoming interrupts */
    eors.n r0, r0
    3a70:	4040      	eors	r0, r0
    msr BASEPRI, r0
    3a72:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_CPU_CORTEX_M0_M0PLUS */

    wfi
    3a76:	bf30      	wfi

    bx lr
    3a78:	4770      	bx	lr
    3a7a:	bf00      	nop

00003a7c <__bus_fault>:
    mrs r0, MSP
_stack_frame_endif:

#else /* CONFIG_CPU_CORTEX_M3_M4 */
    /* force unlock interrupts */
    eors.n r0, r0
    3a7c:	4040      	eors	r0, r0
    msr BASEPRI, r0
    3a7e:	f380 8811 	msr	BASEPRI, r0

	/* this reimplements _ScbIsNestedExc() */
    ldr ip, =_SCS_ICSR
    3a82:	f8df c01c 	ldr.w	ip, [pc, #28]	; 3aa0 <__bus_fault+0x24>
    ldr ip, [ip]
    3a86:	f8dc c000 	ldr.w	ip, [ip]
    ands.w ip, #_SCS_ICSR_RETTOBASE
    3a8a:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
    3a8e:	bf0c      	ite	eq
	mrseq r0, MSP	/* if so, we're not returning to thread mode, thus this
    3a90:	f3ef 8008 	mrseq	r0, MSP
					 * is a nested exception: the stack frame is on the MSP */
	mrsne r0, PSP	/* if not, we are returning to thread mode, thus this is
    3a94:	f3ef 8009 	mrsne	r0, PSP
					 * not a nested exception: the stack frame is on the PSP */
#endif /* CONFIG_CPU_CORTEX_M0_M0PLUS */

    push {lr}
    3a98:	b500      	push	{lr}
    bl _Fault
    3a9a:	f7ff ff67 	bl	396c <_Fault>

    _GDB_STUB_EXC_EXIT

    pop {pc}
    3a9e:	bd00      	pop	{pc}
    /* force unlock interrupts */
    eors.n r0, r0
    msr BASEPRI, r0

	/* this reimplements _ScbIsNestedExc() */
    ldr ip, =_SCS_ICSR
    3aa0:	e000ed04 	.word	0xe000ed04

00003aa4 <_isr_wrapper>:
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	_GDB_STUB_EXC_ENTRY

	push {lr}		/* lr is now the first item on the stack */
    3aa4:	b500      	push	{lr}
#endif /* CONFIG_CPU_CORTEX_M0_M0PLUS */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

	mrs r0, IPSR	/* get exception number */
    3aa6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#else
	sub r0, r0, #16	/* get IRQ number */
    3aaa:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3aae:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#endif /* CONFIG_CPU_CORTEX_M0_M0PLUS */
	ldr r1, =_sw_isr_table
    3ab2:	4904      	ldr	r1, [pc, #16]	; (3ac4 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3ab4:	4401      	add	r1, r0
			 *			  in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3ab6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3ab8:	4798      	blx	r3

#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	pop {r3}
	mov lr, r3
#else
	pop {lr}
    3aba:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_CPU_CORTEX_M0_M0PLUS */

	/* exception return is done in _IntExit(), including _GDB_STUB_EXC_EXIT */
	b _IntExit
    3abe:	f7ff bd4d 	b.w	355c <_ExcExit>
    3ac2:	0000      	.short	0x0000
	lsls r0, #3	/* table is 8-byte wide */
#else
	sub r0, r0, #16	/* get IRQ number */
	lsl r0, r0, #3	/* table is 8-byte wide */
#endif /* CONFIG_CPU_CORTEX_M0_M0PLUS */
	ldr r1, =_sw_isr_table
    3ac4:	00000410 	.word	0x00000410

00003ac8 <_NanoFatalErrorHandler>:
 *
 * @return This function does not return.
 */
FUNC_NORETURN void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
    3ac8:	b580      	push	{r7, lr}
    3aca:	af00      	add	r7, sp, #0
    3acc:	4604      	mov	r4, r0
    3ace:	460d      	mov	r5, r1
	switch (reason) {
    3ad0:	2801      	cmp	r0, #1
    3ad2:	d002      	beq.n	3ada <_NanoFatalErrorHandler+0x12>
    3ad4:	2803      	cmp	r0, #3
    3ad6:	d004      	beq.n	3ae2 <_NanoFatalErrorHandler+0x1a>
    3ad8:	e007      	b.n	3aea <_NanoFatalErrorHandler+0x22>
	case _NANO_ERR_INVALID_TASK_EXIT:
		PR_EXC("***** Invalid Exit Software Error! *****\n");
    3ada:	480c      	ldr	r0, [pc, #48]	; (3b0c <_NanoFatalErrorHandler+0x44>)
    3adc:	f7fe fe4e 	bl	277c <printk>
		break;
    3ae0:	e007      	b.n	3af2 <_NanoFatalErrorHandler+0x2a>
		PR_EXC("***** Stack Check Fail! *****\n");
		break;
#endif /* CONFIG_STACK_CANARIES */

	case _NANO_ERR_ALLOCATION_FAIL:
		PR_EXC("**** Kernel Allocation Failure! ****\n");
    3ae2:	480b      	ldr	r0, [pc, #44]	; (3b10 <_NanoFatalErrorHandler+0x48>)
    3ae4:	f7fe fe4a 	bl	277c <printk>
		break;
    3ae8:	e003      	b.n	3af2 <_NanoFatalErrorHandler+0x2a>

	default:
		PR_EXC("**** Unknown Fatal Error %d! ****\n", reason);
    3aea:	4601      	mov	r1, r0
    3aec:	4809      	ldr	r0, [pc, #36]	; (3b14 <_NanoFatalErrorHandler+0x4c>)
    3aee:	f7fe fe45 	bl	277c <printk>
		break;
	}
	PR_EXC("Current thread ID = %p\n"
    3af2:	f000 fc4d 	bl	4390 <k_current_get>
    3af6:	69aa      	ldr	r2, [r5, #24]
    3af8:	4601      	mov	r1, r0
    3afa:	4807      	ldr	r0, [pc, #28]	; (3b18 <_NanoFatalErrorHandler+0x50>)
    3afc:	f7fe fe3e 	bl	277c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
    3b00:	4629      	mov	r1, r5
    3b02:	4620      	mov	r0, r4
    3b04:	f000 f80a 	bl	3b1c <_SysFatalErrorHandler>
    3b08:	e7fe      	b.n	3b08 <_NanoFatalErrorHandler+0x40>
    3b0a:	bf00      	nop
    3b0c:	00005678 	.word	0x00005678
    3b10:	000056a4 	.word	0x000056a4
    3b14:	000056cc 	.word	0x000056cc
    3b18:	000056f0 	.word	0x000056f0

00003b1c <_SysFatalErrorHandler>:
 * @param pEsf pointer to exception stack frame
 *
 * @return N/A
 */
void _SysFatalErrorHandler(unsigned int reason, const NANO_ESF * pEsf)
{
    3b1c:	b598      	push	{r3, r4, r7, lr}
    3b1e:	af00      	add	r7, sp, #0
	nano_context_type_t curCtx = sys_execution_context_type_get();
    3b20:	f000 fee2 	bl	48e8 <sys_execution_context_type_get>

	ARG_UNUSED(reason);
	ARG_UNUSED(pEsf);

	if ((curCtx == NANO_CTX_ISR) || _is_thread_essential()) {
    3b24:	4604      	mov	r4, r0
    3b26:	b110      	cbz	r0, 3b2e <_SysFatalErrorHandler+0x12>
    3b28:	f000 fef0 	bl	490c <_is_thread_essential>
    3b2c:	b158      	cbz	r0, 3b46 <_SysFatalErrorHandler+0x2a>
		PRINTK("Fatal fault in %s ! Spinning...\n",
    3b2e:	b11c      	cbz	r4, 3b38 <_SysFatalErrorHandler+0x1c>
    3b30:	2c01      	cmp	r4, #1
    3b32:	d103      	bne.n	3b3c <_SysFatalErrorHandler+0x20>
    3b34:	490d      	ldr	r1, [pc, #52]	; (3b6c <_SysFatalErrorHandler+0x50>)
    3b36:	e002      	b.n	3b3e <_SysFatalErrorHandler+0x22>
    3b38:	490d      	ldr	r1, [pc, #52]	; (3b70 <_SysFatalErrorHandler+0x54>)
    3b3a:	e000      	b.n	3b3e <_SysFatalErrorHandler+0x22>
    3b3c:	490d      	ldr	r1, [pc, #52]	; (3b74 <_SysFatalErrorHandler+0x58>)
    3b3e:	480e      	ldr	r0, [pc, #56]	; (3b78 <_SysFatalErrorHandler+0x5c>)
    3b40:	f7fe fe1c 	bl	277c <printk>
    3b44:	e7fe      	b.n	3b44 <_SysFatalErrorHandler+0x28>
							  : "essential task");
		for (;;)
			; /* spin forever */
	}

	if (NANO_CTX_FIBER == curCtx) {
    3b46:	2c01      	cmp	r4, #1
    3b48:	d107      	bne.n	3b5a <_SysFatalErrorHandler+0x3e>
		PRINTK("Fatal fault in fiber ! Aborting fiber.\n");
    3b4a:	480c      	ldr	r0, [pc, #48]	; (3b7c <_SysFatalErrorHandler+0x60>)
    3b4c:	f7fe fe16 	bl	277c <printk>
		fiber_abort();
    3b50:	f000 fc1e 	bl	4390 <k_current_get>
    3b54:	f000 f818 	bl	3b88 <k_thread_abort>
		return;
    3b58:	bd98      	pop	{r3, r4, r7, pc}
	}

	PRINTK("Fatal fault in task ! Aborting task.\n");
    3b5a:	4809      	ldr	r0, [pc, #36]	; (3b80 <_SysFatalErrorHandler+0x64>)
    3b5c:	f7fe fe0e 	bl	277c <printk>

	k_thread_abort(_current);
    3b60:	4b08      	ldr	r3, [pc, #32]	; (3b84 <_SysFatalErrorHandler+0x68>)
    3b62:	6818      	ldr	r0, [r3, #0]
    3b64:	f000 f810 	bl	3b88 <k_thread_abort>
    3b68:	bd98      	pop	{r3, r4, r7, pc}
    3b6a:	bf00      	nop
    3b6c:	00005740 	.word	0x00005740
    3b70:	0000573c 	.word	0x0000573c
    3b74:	0000572c 	.word	0x0000572c
    3b78:	00005750 	.word	0x00005750
    3b7c:	00005774 	.word	0x00005774
    3b80:	0000579c 	.word	0x0000579c
    3b84:	200001fc 	.word	0x200001fc

00003b88 <k_thread_abort>:
#include <wait_q.h>

extern void _k_thread_single_abort(struct tcs *thread);

void k_thread_abort(k_tid_t thread)
{
    3b88:	b5b0      	push	{r4, r5, r7, lr}
    3b8a:	af00      	add	r7, sp, #0
    3b8c:	4605      	mov	r5, r0
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    3b8e:	2120      	movs	r1, #32
    3b90:	f3ef 8411 	mrs	r4, BASEPRI
    3b94:	f381 8811 	msr	BASEPRI, r1
	unsigned int key;

	key = irq_lock();

	_k_thread_single_abort(thread);
    3b98:	f000 ff26 	bl	49e8 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
    3b9c:	4b0b      	ldr	r3, [pc, #44]	; (3bcc <k_thread_abort+0x44>)
    3b9e:	681b      	ldr	r3, [r3, #0]
    3ba0:	429d      	cmp	r5, r3
    3ba2:	d10f      	bne.n	3bc4 <k_thread_abort+0x3c>
 */

static inline int _ScbIsInThreadMode(void)
{
	/* 0 == thread mode */
	return !__scs.scb.icsr.bit.vectactive;
    3ba4:	4b0a      	ldr	r3, [pc, #40]	; (3bd0 <k_thread_abort+0x48>)
    3ba6:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
    3baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
		if (_ScbIsInThreadMode()) {
    3bae:	b913      	cbnz	r3, 3bb6 <k_thread_abort+0x2e>
			_Swap(key);
    3bb0:	4620      	mov	r0, r4
    3bb2:	f7ff fd37 	bl	3624 <_Swap>
 * @return N/A
 */

static inline void _ScbPendsvSet(void)
{
	__scs.scb.icsr.bit.pendsvset = 1;
    3bb6:	4a06      	ldr	r2, [pc, #24]	; (3bd0 <k_thread_abort+0x48>)
    3bb8:	f8d2 3d04 	ldr.w	r3, [r2, #3332]	; 0xd04
    3bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3bc0:	f8c2 3d04 	str.w	r3, [r2, #3332]	; 0xd04
			_ScbPendsvSet();
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
    3bc4:	4620      	mov	r0, r4
    3bc6:	f000 fb39 	bl	423c <_reschedule_threads>
    3bca:	bdb0      	pop	{r4, r5, r7, pc}
    3bcc:	200001fc 	.word	0x200001fc
    3bd0:	e000e000 	.word	0xe000e000

00003bd4 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
    cpsid i
#else /* CONFIG_CPU_CORTEX_M3_M4 */
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3bd4:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3bd6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =__CORTEXM_BOOT_PSP
    3bda:	4805      	ldr	r0, [pc, #20]	; (3bf0 <__reset+0x1c>)
    msr PSP, r0
    3bdc:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
    3be0:	2002      	movs	r0, #2
    msr CONTROL, r0
    3be2:	f380 8814 	msr	CONTROL, r0

#ifdef CONFIG_WDOG_INIT
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
    3be6:	f7ff fca7 	bl	3538 <_WdogInit>
#endif

    b _PrepC
    3bea:	f000 b807 	b.w	3bfc <_PrepC>
    3bee:	0000      	.short	0x0000

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =__CORTEXM_BOOT_PSP
    3bf0:	2002fef8 	.word	0x2002fef8

00003bf4 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
    3bf4:	bf30      	wfi
    b _SysNmiOnReset
    3bf6:	f7ff bffd 	b.w	3bf4 <_SysNmiOnReset>
    3bfa:	bf00      	nop

00003bfc <_PrepC>:
 *
 * @return N/A
 */

void _PrepC(void)
{
    3bfc:	b580      	push	{r7, lr}
    3bfe:	af00      	add	r7, sp, #0
{
	/*
	 * Upon reset, the Co-Processor Access Control Register is 0x00000000.
	 * Enable CP10 and CP11 coprocessors to enable floating point.
	 */
	__scs.cpacr.val = (_SCS_CPACR_CP10_FULL_ACCESS |
    3c00:	4b0a      	ldr	r3, [pc, #40]	; (3c2c <_PrepC+0x30>)
    3c02:	f44f 0270 	mov.w	r2, #15728640	; 0xf00000
    3c06:	f8c3 2d88 	str.w	r2, [r3, #3464]	; 0xd88
	 * Upon reset, the FPU Context Control Register is 0xC0000000
	 * (both Automatic and Lazy state preservation is enabled).
	 * Disable lazy state preservation so the volatile FP registers are
	 * always saved on exception.
	 */
	__scs.fpu.ccr.val = (_SCS_FPU_CCR_ASPEN_ENABLE |
    3c0a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3c0e:	f8c3 2f34 	str.w	r2, [r3, #3892]	; 0xf34
	 * does not automatically save the volatile FP registers until they
	 * have first been touched. Perform a dummy move operation so that
	 * the stack frames are created as expected before any task or fiber
	 * context switching can occur.
	 */
	__asm__ volatile(
    3c12:	eeb0 0a40 	vmov.f32	s0, s0
    3c16:	f3bf 8f4f 	dsb	sy
    3c1a:	f3bf 8f6f 	isb	sy

void _PrepC(void)
{
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
    3c1e:	f000 f8c9 	bl	3db4 <_bss_zero>
	_data_copy();
    3c22:	f000 f8d9 	bl	3dd8 <_data_copy>
	_Cstart();
    3c26:	f000 f90b 	bl	3e40 <_Cstart>
    3c2a:	bf00      	nop
    3c2c:	e000e000 	.word	0xe000e000

00003c30 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
    3c30:	b580      	push	{r7, lr}
    3c32:	af00      	add	r7, sp, #0
	handler();
    3c34:	f7ff ffde 	bl	3bf4 <_SysNmiOnReset>
	_ExcExit();
    3c38:	f7ff fc90 	bl	355c <_ExcExit>
    3c3c:	bd80      	pop	{r7, pc}
    3c3e:	bf00      	nop

00003c40 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
    3c40:	b5b0      	push	{r4, r5, r7, lr}
    3c42:	af00      	add	r7, sp, #0
    3c44:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
    3c46:	4b08      	ldr	r3, [pc, #32]	; (3c68 <_sys_device_do_config_level+0x28>)
    3c48:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    3c4c:	e004      	b.n	3c58 <_sys_device_do_config_level+0x18>
		struct device_config *device = info->config;
    3c4e:	6823      	ldr	r3, [r4, #0]

		device->init(info);
    3c50:	685b      	ldr	r3, [r3, #4]
    3c52:	4620      	mov	r0, r4
    3c54:	4798      	blx	r3
 */
void _sys_device_do_config_level(int level)
{
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1]; info++) {
    3c56:	340c      	adds	r4, #12
    3c58:	1c6b      	adds	r3, r5, #1
    3c5a:	4a03      	ldr	r2, [pc, #12]	; (3c68 <_sys_device_do_config_level+0x28>)
    3c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3c60:	429c      	cmp	r4, r3
    3c62:	d3f4      	bcc.n	3c4e <_sys_device_do_config_level+0xe>
		struct device_config *device = info->config;

		device->init(info);
	}
}
    3c64:	bdb0      	pop	{r4, r5, r7, pc}
    3c66:	bf00      	nop
    3c68:	000058f0 	.word	0x000058f0

00003c6c <device_get_binding>:

struct device *device_get_binding(const char *name)
{
    3c6c:	b5b0      	push	{r4, r5, r7, lr}
    3c6e:	af00      	add	r7, sp, #0
    3c70:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    3c72:	4c09      	ldr	r4, [pc, #36]	; (3c98 <device_get_binding+0x2c>)
    3c74:	e008      	b.n	3c88 <device_get_binding+0x1c>
		if (info->driver_api && !strcmp(name, info->config->name)) {
    3c76:	6863      	ldr	r3, [r4, #4]
    3c78:	b12b      	cbz	r3, 3c86 <device_get_binding+0x1a>
    3c7a:	6823      	ldr	r3, [r4, #0]
    3c7c:	6819      	ldr	r1, [r3, #0]
    3c7e:	4628      	mov	r0, r5
    3c80:	f7fe fcb6 	bl	25f0 <strcmp>
    3c84:	b128      	cbz	r0, 3c92 <device_get_binding+0x26>

struct device *device_get_binding(const char *name)
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
    3c86:	340c      	adds	r4, #12
    3c88:	4b04      	ldr	r3, [pc, #16]	; (3c9c <device_get_binding+0x30>)
    3c8a:	429c      	cmp	r4, r3
    3c8c:	d1f3      	bne.n	3c76 <device_get_binding+0xa>
		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
		}
	}

	return NULL;
    3c8e:	2000      	movs	r0, #0
    3c90:	bdb0      	pop	{r4, r5, r7, pc}
{
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
		if (info->driver_api && !strcmp(name, info->config->name)) {
			return info;
    3c92:	4620      	mov	r0, r4
		}
	}

	return NULL;
}
    3c94:	bdb0      	pop	{r4, r5, r7, pc}
    3c96:	bf00      	nop
    3c98:	20000034 	.word	0x20000034
    3c9c:	200000f4 	.word	0x200000f4

00003ca0 <prepare_multithreading>:
 * be all the initialization many of them require.
 *
 * @return N/A
 */
static void prepare_multithreading(struct k_thread *dummy_thread)
{
    3ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ca2:	b087      	sub	sp, #28
    3ca4:	af06      	add	r7, sp, #24
	 * initialization.  However, don't waste effort initializing the
	 * fields of the dummy thread beyond those needed to identify it as a
	 * dummy thread.
	 */

	_current = dummy_thread;
    3ca6:	4b37      	ldr	r3, [pc, #220]	; (3d84 <prepare_multithreading+0xe4>)
    3ca8:	6018      	str	r0, [r3, #0]

	/*
	 * Do not insert dummy execution context in the list of fibers, so
	 * that it does not get scheduled back in once context-switched out.
	 */
	dummy_thread->flags = K_ESSENTIAL;
    3caa:	f44f 7300 	mov.w	r3, #512	; 0x200
    3cae:	6083      	str	r3, [r0, #8]
	dummy_thread->prio = K_PRIO_COOP(0);
    3cb0:	f06f 030f 	mvn.w	r3, #15
    3cb4:	60c3      	str	r3, [r0, #12]
	 * spurious interrupts. This must be performed before other nanokernel
	 * subsystems install bonafide handlers, or before hardware device
	 * drivers are initialized.
	 */

	_IntLibInit();
    3cb6:	f7ff fc69 	bl	358c <_IntLibInit>

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    3cba:	2200      	movs	r2, #0
    3cbc:	e007      	b.n	3cce <prepare_multithreading+0x2e>
		sys_dlist_init(&_nanokernel.ready_q.q[ii]);
    3cbe:	1c91      	adds	r1, r2, #2
    3cc0:	4b30      	ldr	r3, [pc, #192]	; (3d84 <prepare_multithreading+0xe4>)
    3cc2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    3cc6:	1d19      	adds	r1, r3, #4
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3cc8:	6059      	str	r1, [r3, #4]
	list->tail = (sys_dnode_t *)list;
    3cca:	6099      	str	r1, [r3, #8]

	_IntLibInit();

	/* ready the init/main and idle threads */

	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
    3ccc:	3201      	adds	r2, #1
    3cce:	2a1f      	cmp	r2, #31
    3cd0:	ddf5      	ble.n	3cbe <prepare_multithreading+0x1e>
		sys_dlist_init(&_nanokernel.ready_q.q[ii]);
	}

	_new_thread(main_stack, MAIN_STACK_SIZE, NULL,
    3cd2:	4d2d      	ldr	r5, [pc, #180]	; (3d88 <prepare_multithreading+0xe8>)
    3cd4:	f44f 7600 	mov.w	r6, #512	; 0x200
    3cd8:	9604      	str	r6, [sp, #16]
    3cda:	2400      	movs	r4, #0
    3cdc:	9403      	str	r4, [sp, #12]
    3cde:	9402      	str	r4, [sp, #8]
    3ce0:	9401      	str	r4, [sp, #4]
    3ce2:	9400      	str	r4, [sp, #0]
    3ce4:	4b29      	ldr	r3, [pc, #164]	; (3d8c <prepare_multithreading+0xec>)
    3ce6:	4622      	mov	r2, r4
    3ce8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    3cec:	4628      	mov	r0, r5
    3cee:	f7ff fe87 	bl	3a00 <_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->flags &= ~K_PRESTART;
    3cf2:	68ab      	ldr	r3, [r5, #8]
    3cf4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    3cf8:	60ab      	str	r3, [r5, #8]
		    _main, NULL, NULL, NULL,
		    CONFIG_MAIN_THREAD_PRIORITY, K_ESSENTIAL);
	_mark_thread_as_started(_main_thread);
	_add_thread_to_ready_q(_main_thread);
    3cfa:	4628      	mov	r0, r5
    3cfc:	f000 f984 	bl	4008 <_add_thread_to_ready_q>

	_new_thread(idle_stack, IDLE_STACK_SIZE, NULL,
    3d00:	4d23      	ldr	r5, [pc, #140]	; (3d90 <prepare_multithreading+0xf0>)
    3d02:	9604      	str	r6, [sp, #16]
    3d04:	230f      	movs	r3, #15
    3d06:	9303      	str	r3, [sp, #12]
    3d08:	9402      	str	r4, [sp, #8]
    3d0a:	9401      	str	r4, [sp, #4]
    3d0c:	9400      	str	r4, [sp, #0]
    3d0e:	4b21      	ldr	r3, [pc, #132]	; (3d94 <prepare_multithreading+0xf4>)
    3d10:	4622      	mov	r2, r4
    3d12:	f44f 7180 	mov.w	r1, #256	; 0x100
    3d16:	4628      	mov	r0, r5
    3d18:	f7ff fe72 	bl	3a00 <_new_thread>
    3d1c:	68ab      	ldr	r3, [r5, #8]
    3d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    3d22:	60ab      	str	r3, [r5, #8]
		    idle, NULL, NULL, NULL,
		    K_LOWEST_THREAD_PRIO, K_ESSENTIAL);
	_mark_thread_as_started(_idle_thread);
	_add_thread_to_ready_q(_idle_thread);
    3d24:	4628      	mov	r0, r5
    3d26:	f000 f96f 	bl	4008 <_add_thread_to_ready_q>
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    3d2a:	4b16      	ldr	r3, [pc, #88]	; (3d84 <prepare_multithreading+0xe4>)
    3d2c:	1d1a      	adds	r2, r3, #4
    3d2e:	605a      	str	r2, [r3, #4]
	list->tail = (sys_dnode_t *)list;
    3d30:	609a      	str	r2, [r3, #8]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	uint32_t msp = (uint32_t)(_interrupt_stack + CONFIG_ISR_STACK_SIZE);
    3d32:	4b19      	ldr	r3, [pc, #100]	; (3d98 <prepare_multithreading+0xf8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(uint32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
    3d34:	f383 8808 	msr	MSP, r3

static inline void _ScbExcPrioSet(uint8_t exc, uint8_t pri)
{
	/* For priority exception handler 4-15 */
	__ASSERT((exc > 3) && (exc < 16), "");
	__scs.scb.shpr[exc - 4] = pri;
    3d38:	4b18      	ldr	r3, [pc, #96]	; (3d9c <prepare_multithreading+0xfc>)
    3d3a:	22f0      	movs	r2, #240	; 0xf0
    3d3c:	f883 2d22 	strb.w	r2, [r3, #3362]	; 0xd22
    3d40:	2210      	movs	r2, #16
    3d42:	f883 2d1f 	strb.w	r2, [r3, #3359]	; 0xd1f
    3d46:	f883 2d18 	strb.w	r2, [r3, #3352]	; 0xd18
    3d4a:	f883 2d19 	strb.w	r2, [r3, #3353]	; 0xd19
    3d4e:	f883 2d1a 	strb.w	r2, [r3, #3354]	; 0xd1a
 * @return N/A
 */

static inline void _ScbUsageFaultEnable(void)
{
	__scs.scb.shcsr.bit.usgfaultena = 1;
    3d52:	f8d3 2d24 	ldr.w	r2, [r3, #3364]	; 0xd24
    3d56:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
    3d5a:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 * @return N/A
 */

static inline void _ScbBusFaultEnable(void)
{
	__scs.scb.shcsr.bit.busfaultena = 1;
    3d5e:	f8d3 2d24 	ldr.w	r2, [r3, #3364]	; 0xd24
    3d62:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    3d66:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
 * @return N/A
 */

static inline void _ScbMemFaultEnable(void)
{
	__scs.scb.shcsr.bit.memfaultena = 1;
    3d6a:	f8d3 2d24 	ldr.w	r2, [r3, #3364]	; 0xd24
    3d6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    3d72:	f8c3 2d24 	str.w	r2, [r3, #3364]	; 0xd24
extern void _CpuIdleInit(void);
static ALWAYS_INLINE void nanoArchInit(void)
{
	_InterruptStackSetup();
	_ExcSetup();
	_FaultInit();
    3d76:	f7ff fe0b 	bl	3990 <_FaultInit>
	_CpuIdleInit();
    3d7a:	f7ff fe73 	bl	3a64 <_CpuIdleInit>
	initialize_timeouts();

	/* perform any architecture-specific initialization */

	nanoArchInit();
}
    3d7e:	3704      	adds	r7, #4
    3d80:	46bd      	mov	sp, r7
    3d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d84:	200001fc 	.word	0x200001fc
    3d88:	20000b38 	.word	0x20000b38
    3d8c:	00003e05 	.word	0x00003e05
    3d90:	20001338 	.word	0x20001338
    3d94:	00004b19 	.word	0x00004b19
    3d98:	20001c38 	.word	0x20001c38
    3d9c:	e000e000 	.word	0xe000e000

00003da0 <switch_to_main_thread>:

static void switch_to_main_thread(void)
{
    3da0:	b580      	push	{r7, lr}
    3da2:	af00      	add	r7, sp, #0
    3da4:	2120      	movs	r1, #32
    3da6:	f3ef 8011 	mrs	r0, BASEPRI
    3daa:	f381 8811 	msr	BASEPRI, r1
	 * Context switch to main task (entry function is _main()): the
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */

	_Swap(irq_lock());
    3dae:	f7ff fc39 	bl	3624 <_Swap>
    3db2:	bd80      	pop	{r7, pc}

00003db4 <_bss_zero>:
 *
 * @return N/A
 */

void _bss_zero(void)
{
    3db4:	b480      	push	{r7}
    3db6:	af00      	add	r7, sp, #0
	uint32_t *pos = (uint32_t *)&__bss_start;
    3db8:	4b05      	ldr	r3, [pc, #20]	; (3dd0 <_bss_zero+0x1c>)

	for ( ; pos < (uint32_t *)&__bss_end; pos++) {
    3dba:	e002      	b.n	3dc2 <_bss_zero+0xe>
		*pos = 0;
    3dbc:	2200      	movs	r2, #0
    3dbe:	f843 2b04 	str.w	r2, [r3], #4

void _bss_zero(void)
{
	uint32_t *pos = (uint32_t *)&__bss_start;

	for ( ; pos < (uint32_t *)&__bss_end; pos++) {
    3dc2:	4a04      	ldr	r2, [pc, #16]	; (3dd4 <_bss_zero+0x20>)
    3dc4:	4293      	cmp	r3, r2
    3dc6:	d3f9      	bcc.n	3dbc <_bss_zero+0x8>
		*pos = 0;
	}
}
    3dc8:	46bd      	mov	sp, r7
    3dca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3dce:	4770      	bx	lr
    3dd0:	20000160 	.word	0x20000160
    3dd4:	20000338 	.word	0x20000338

00003dd8 <_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void _data_copy(void)
{
    3dd8:	b480      	push	{r7}
    3dda:	af00      	add	r7, sp, #0
	uint32_t *pROM, *pRAM;

	pROM = (uint32_t *)&__data_rom_start;
	pRAM = (uint32_t *)&__data_ram_start;
    3ddc:	4b06      	ldr	r3, [pc, #24]	; (3df8 <_data_copy+0x20>)
 */
void _data_copy(void)
{
	uint32_t *pROM, *pRAM;

	pROM = (uint32_t *)&__data_rom_start;
    3dde:	4907      	ldr	r1, [pc, #28]	; (3dfc <_data_copy+0x24>)
	pRAM = (uint32_t *)&__data_ram_start;

	for ( ; pRAM < (uint32_t *)&__data_ram_end; pROM++, pRAM++) {
    3de0:	e003      	b.n	3dea <_data_copy+0x12>
		*pRAM = *pROM;
    3de2:	f851 2b04 	ldr.w	r2, [r1], #4
    3de6:	f843 2b04 	str.w	r2, [r3], #4
	uint32_t *pROM, *pRAM;

	pROM = (uint32_t *)&__data_rom_start;
	pRAM = (uint32_t *)&__data_ram_start;

	for ( ; pRAM < (uint32_t *)&__data_ram_end; pROM++, pRAM++) {
    3dea:	4a05      	ldr	r2, [pc, #20]	; (3e00 <_data_copy+0x28>)
    3dec:	4293      	cmp	r3, r2
    3dee:	d3f8      	bcc.n	3de2 <_data_copy+0xa>
		*pRAM = *pROM;
	}
}
    3df0:	46bd      	mov	sp, r7
    3df2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3df6:	4770      	bx	lr
    3df8:	20000000 	.word	0x20000000
    3dfc:	0000590c 	.word	0x0000590c
    3e00:	2000015c 	.word	0x2000015c

00003e04 <_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void _main(void *unused1, void *unused2, void *unused3)
{
    3e04:	b580      	push	{r7, lr}
    3e06:	af00      	add	r7, sp, #0
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	_sys_device_do_config_level(_SYS_INIT_LEVEL_SECONDARY);
    3e08:	2001      	movs	r0, #1
    3e0a:	f7ff ff19 	bl	3c40 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_NANOKERNEL);
    3e0e:	2002      	movs	r0, #2
    3e10:	f7ff ff16 	bl	3c40 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_MICROKERNEL);
    3e14:	2003      	movs	r0, #3
    3e16:	f7ff ff13 	bl	3c40 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
    3e1a:	2004      	movs	r0, #4
    3e1c:	f7ff ff10 	bl	3c40 <_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	_init_static_threads();
    3e20:	f000 fe26 	bl	4a70 <_init_static_threads>

	_main_thread->flags &= ~K_ESSENTIAL;
    3e24:	4805      	ldr	r0, [pc, #20]	; (3e3c <_main+0x38>)
    3e26:	6883      	ldr	r3, [r0, #8]
    3e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
    3e2c:	6083      	str	r3, [r0, #8]
	/* If we're going to load the MDEF main() in this context, we need
	 * to now set the priority to be what was specified in the MDEF file
	 */
#if defined(MDEF_MAIN_THREAD_PRIORITY) && \
		(MDEF_MAIN_THREAD_PRIORITY != CONFIG_MAIN_THREAD_PRIORITY)
	k_thread_priority_set(_main_thread, MDEF_MAIN_THREAD_PRIORITY);
    3e2e:	2108      	movs	r1, #8
    3e30:	f000 fa50 	bl	42d4 <k_thread_priority_set>
#endif
	main();
    3e34:	f7fc ffdc 	bl	df0 <main>
    3e38:	bd80      	pop	{r7, pc}
    3e3a:	bf00      	nop
    3e3c:	20000b38 	.word	0x20000b38

00003e40 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
    3e40:	b580      	push	{r7, lr}
    3e42:	b0aa      	sub	sp, #168	; 0xa8
    3e44:	af00      	add	r7, sp, #0
	 * Initialize nanokernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading((struct k_thread *)&dummy_thread);
    3e46:	1d38      	adds	r0, r7, #4
    3e48:	f7ff ff2a 	bl	3ca0 <prepare_multithreading>

	/* perform basic hardware initialization */

	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRIMARY);
    3e4c:	2000      	movs	r0, #0
    3e4e:	f7ff fef7 	bl	3c40 <_sys_device_do_config_level>

	/* display boot banner */

	PRINT_BOOT_BANNER();

	switch_to_main_thread();
    3e52:	f7ff ffa5 	bl	3da0 <switch_to_main_thread>
    3e56:	bf00      	nop

00003e58 <_is_timeout_insert_point>:
 * the timeout of the insert point to update its delta queue value, since the
 * current timeout will be inserted before it.
 */

static int _is_timeout_insert_point(sys_dnode_t *test, void *timeout)
{
    3e58:	b480      	push	{r7}
    3e5a:	af00      	add	r7, sp, #0
	struct _timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
    3e5c:	680a      	ldr	r2, [r1, #0]
    3e5e:	6903      	ldr	r3, [r0, #16]
    3e60:	429a      	cmp	r2, r3
    3e62:	dd03      	ble.n	3e6c <_is_timeout_insert_point+0x14>
		*timeout_to_insert -= t->delta_ticks_from_prev;
    3e64:	1ad3      	subs	r3, r2, r3
    3e66:	600b      	str	r3, [r1, #0]
		return 0;
    3e68:	2000      	movs	r0, #0
    3e6a:	e002      	b.n	3e72 <_is_timeout_insert_point+0x1a>
	}

	t->delta_ticks_from_prev -= *timeout_to_insert;
    3e6c:	1a9b      	subs	r3, r3, r2
    3e6e:	6103      	str	r3, [r0, #16]
	return 1;
    3e70:	2001      	movs	r0, #1
}
    3e72:	46bd      	mov	sp, r7
    3e74:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e78:	4770      	bx	lr
    3e7a:	bf00      	nop

00003e7c <_legacy_sleep>:
#include <wait_q.h>
#include <misc/__assert.h>
#include <misc/util.h>

void _legacy_sleep(int32_t ticks)
{
    3e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e80:	af00      	add	r7, sp, #0
	__ASSERT(!_is_in_isr(), "");
	__ASSERT(ticks != TICKS_UNLIMITED, "");

	if (ticks <= 0) {
    3e82:	1e05      	subs	r5, r0, #0
    3e84:	dc03      	bgt.n	3e8e <_legacy_sleep+0x12>
		k_yield();
    3e86:	f000 fa69 	bl	435c <k_yield>
		return;
    3e8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3e8e:	2120      	movs	r1, #32
    3e90:	f3ef 8911 	mrs	r9, BASEPRI
    3e94:	f381 8811 	msr	BASEPRI, r1
	}

	int key = irq_lock();

	_mark_thread_as_timing(_current);
    3e98:	4c27      	ldr	r4, [pc, #156]	; (3f38 <_legacy_sleep+0xbc>)
    3e9a:	6820      	ldr	r0, [r4, #0]
}

/* mark a thread as being in the timer queue */
static inline void _mark_thread_as_timing(struct k_thread *thread)
{
	thread->flags |= K_TIMING;
    3e9c:	6883      	ldr	r3, [r0, #8]
    3e9e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    3ea2:	6083      	str	r3, [r0, #8]
	_remove_thread_from_ready_q(_current);
    3ea4:	f000 f8d2 	bl	404c <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
    3ea8:	6826      	ldr	r6, [r4, #0]
 */

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q, int32_t timeout)
{
	_add_timeout(thread, &thread->timeout, wait_q, timeout);
    3eaa:	f106 0814 	add.w	r8, r6, #20
		_nanokernel.timeout_q.tail);

	K_DEBUG("timeout   %p before: next: %p, prev: %p\n",
		timeout_obj, timeout_obj->node.next, timeout_obj->node.prev);

	timeout_obj->thread = thread;
    3eae:	61f6      	str	r6, [r6, #28]
	timeout_obj->delta_ticks_from_prev = timeout;
    3eb0:	6275      	str	r5, [r6, #36]	; 0x24
	timeout_obj->wait_q = (sys_dlist_t *)wait_q;
    3eb2:	2300      	movs	r3, #0
    3eb4:	6233      	str	r3, [r6, #32]
	sys_dlist_insert_at(timeout_q, (void *)timeout_obj,
			    _is_timeout_insert_point,
			    &timeout_obj->delta_ticks_from_prev);
    3eb6:	f106 0524 	add.w	r5, r6, #36	; 0x24
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3eba:	f854 3f04 	ldr.w	r3, [r4, #4]!
 */

static inline void sys_dlist_insert_at(sys_dlist_t *list, sys_dnode_t *node,
	int (*cond)(sys_dnode_t *, void *), void *data)
{
	if (sys_dlist_is_empty(list)) {
    3ebe:	42a3      	cmp	r3, r4
    3ec0:	d10a      	bne.n	3ed8 <_legacy_sleep+0x5c>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    3ec2:	4b1e      	ldr	r3, [pc, #120]	; (3f3c <_legacy_sleep+0xc0>)
    3ec4:	6173      	str	r3, [r6, #20]
	node->prev = list->tail;
    3ec6:	685a      	ldr	r2, [r3, #4]
    3ec8:	f8c8 2004 	str.w	r2, [r8, #4]

	list->tail->next = node;
    3ecc:	685a      	ldr	r2, [r3, #4]
    3ece:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    3ed2:	f8c3 8004 	str.w	r8, [r3, #4]
    3ed6:	e029      	b.n	3f2c <_legacy_sleep+0xb0>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ed8:	4a18      	ldr	r2, [pc, #96]	; (3f3c <_legacy_sleep+0xc0>)
    3eda:	4293      	cmp	r3, r2
    3edc:	d101      	bne.n	3ee2 <_legacy_sleep+0x66>
    3ede:	2400      	movs	r4, #0
    3ee0:	e008      	b.n	3ef4 <_legacy_sleep+0x78>
    3ee2:	461c      	mov	r4, r3
    3ee4:	e006      	b.n	3ef4 <_legacy_sleep+0x78>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
    3ee6:	4b14      	ldr	r3, [pc, #80]	; (3f38 <_legacy_sleep+0xbc>)
    3ee8:	689b      	ldr	r3, [r3, #8]
    3eea:	42a3      	cmp	r3, r4
    3eec:	d001      	beq.n	3ef2 <_legacy_sleep+0x76>
    3eee:	6824      	ldr	r4, [r4, #0]
    3ef0:	e000      	b.n	3ef4 <_legacy_sleep+0x78>
    3ef2:	2400      	movs	r4, #0
	if (sys_dlist_is_empty(list)) {
		sys_dlist_append(list, node);
	} else {
		sys_dnode_t *pos = sys_dlist_peek_head(list);

		while (pos && !cond(pos, data)) {
    3ef4:	b12c      	cbz	r4, 3f02 <_legacy_sleep+0x86>
    3ef6:	4629      	mov	r1, r5
    3ef8:	4620      	mov	r0, r4
    3efa:	f7ff ffad 	bl	3e58 <_is_timeout_insert_point>
    3efe:	2800      	cmp	r0, #0
    3f00:	d0f1      	beq.n	3ee6 <_legacy_sleep+0x6a>
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
    3f02:	b954      	cbnz	r4, 3f1a <_legacy_sleep+0x9e>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    3f04:	4b0d      	ldr	r3, [pc, #52]	; (3f3c <_legacy_sleep+0xc0>)
    3f06:	6173      	str	r3, [r6, #20]
	node->prev = list->tail;
    3f08:	685a      	ldr	r2, [r3, #4]
    3f0a:	f8c8 2004 	str.w	r2, [r8, #4]

	list->tail->next = node;
    3f0e:	685a      	ldr	r2, [r3, #4]
    3f10:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    3f14:	f8c3 8004 	str.w	r8, [r3, #4]
    3f18:	e008      	b.n	3f2c <_legacy_sleep+0xb0>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    3f1a:	6863      	ldr	r3, [r4, #4]
    3f1c:	f8c8 3004 	str.w	r3, [r8, #4]
		node->next = insert_point;
    3f20:	6174      	str	r4, [r6, #20]
		insert_point->prev->next = node;
    3f22:	6863      	ldr	r3, [r4, #4]
    3f24:	f8c3 8000 	str.w	r8, [r3]
		insert_point->prev = node;
    3f28:	f8c4 8004 	str.w	r8, [r4, #4]

	_Swap(key);
    3f2c:	4648      	mov	r0, r9
    3f2e:	f7ff fb79 	bl	3624 <_Swap>
    3f32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3f36:	bf00      	nop
    3f38:	200001fc 	.word	0x200001fc
    3f3c:	20000200 	.word	0x20000200

00003f40 <_is_timeout_insert_point>:
 * the timeout of the insert point to update its delta queue value, since the
 * current timeout will be inserted before it.
 */

static int _is_timeout_insert_point(sys_dnode_t *test, void *timeout)
{
    3f40:	b480      	push	{r7}
    3f42:	af00      	add	r7, sp, #0
	struct _timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
    3f44:	680a      	ldr	r2, [r1, #0]
    3f46:	6903      	ldr	r3, [r0, #16]
    3f48:	429a      	cmp	r2, r3
    3f4a:	dd03      	ble.n	3f54 <_is_timeout_insert_point+0x14>
		*timeout_to_insert -= t->delta_ticks_from_prev;
    3f4c:	1ad3      	subs	r3, r2, r3
    3f4e:	600b      	str	r3, [r1, #0]
		return 0;
    3f50:	2000      	movs	r0, #0
    3f52:	e002      	b.n	3f5a <_is_timeout_insert_point+0x1a>
	}

	t->delta_ticks_from_prev -= *timeout_to_insert;
    3f54:	1a9b      	subs	r3, r3, r2
    3f56:	6103      	str	r3, [r0, #16]
	return 1;
    3f58:	2001      	movs	r0, #1
}
    3f5a:	46bd      	mov	sp, r7
    3f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f60:	4770      	bx	lr
    3f62:	bf00      	nop

00003f64 <_set_ready_q_prio_bit>:
#include <ksched.h>
#include <wait_q.h>

/* set the bit corresponding to prio in ready q bitmap */
static void _set_ready_q_prio_bit(int prio)
{
    3f64:	b480      	push	{r7}
    3f66:	af00      	add	r7, sp, #0
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + CONFIG_NUM_COOP_PRIORITIES) >> 5;
    3f68:	3010      	adds	r0, #16
    3f6a:	1142      	asrs	r2, r0, #5
}

/* find out the prio bit for a given prio */
static inline int _get_ready_q_prio_bit(int prio)
{
	return (1 << ((prio + CONFIG_NUM_COOP_PRIORITIES) & 0x1f));
    3f6c:	f000 001f 	and.w	r0, r0, #31
    3f70:	2301      	movs	r3, #1
    3f72:	fa03 f000 	lsl.w	r0, r3, r0
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	uint32_t *bmap = &_nanokernel.ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
    3f76:	3202      	adds	r2, #2
    3f78:	4b04      	ldr	r3, [pc, #16]	; (3f8c <_set_ready_q_prio_bit+0x28>)
    3f7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3f7e:	689a      	ldr	r2, [r3, #8]
    3f80:	4310      	orrs	r0, r2
    3f82:	6098      	str	r0, [r3, #8]
}
    3f84:	46bd      	mov	sp, r7
    3f86:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f8a:	4770      	bx	lr
    3f8c:	200001fc 	.word	0x200001fc

00003f90 <_clear_ready_q_prio_bit>:

/* clear the bit corresponding to prio in ready q bitmap */
static void _clear_ready_q_prio_bit(int prio)
{
    3f90:	b480      	push	{r7}
    3f92:	af00      	add	r7, sp, #0
}

/* find out the prio bitmap index for a given prio */
static inline int _get_ready_q_prio_bmap_index(int prio)
{
	return (prio + CONFIG_NUM_COOP_PRIORITIES) >> 5;
    3f94:	3010      	adds	r0, #16
    3f96:	1143      	asrs	r3, r0, #5
}

/* find out the prio bit for a given prio */
static inline int _get_ready_q_prio_bit(int prio)
{
	return (1 << ((prio + CONFIG_NUM_COOP_PRIORITIES) & 0x1f));
    3f98:	f000 001f 	and.w	r0, r0, #31
    3f9c:	2201      	movs	r2, #1
    3f9e:	fa02 f000 	lsl.w	r0, r2, r0
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	uint32_t *bmap = &_nanokernel.ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
    3fa2:	1c9a      	adds	r2, r3, #2
    3fa4:	4b05      	ldr	r3, [pc, #20]	; (3fbc <_clear_ready_q_prio_bit+0x2c>)
    3fa6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    3faa:	689a      	ldr	r2, [r3, #8]
    3fac:	ea22 0200 	bic.w	r2, r2, r0
    3fb0:	609a      	str	r2, [r3, #8]
}
    3fb2:	46bd      	mov	sp, r7
    3fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fb8:	4770      	bx	lr
    3fba:	bf00      	nop
    3fbc:	200001fc 	.word	0x200001fc

00003fc0 <_is_wait_q_insert_point>:
/*
 * Callback for sys_dlist_insert_at() to find the correct insert point in a
 * wait queue (priority-based).
 */
static int _is_wait_q_insert_point(sys_dnode_t *dnode_info, void *insert_prio)
{
    3fc0:	b480      	push	{r7}
    3fc2:	af00      	add	r7, sp, #0
	struct k_thread *waitq_node =
		CONTAINER_OF(dnode_info, struct k_thread, k_q_node);

	return _is_prio_higher((int)insert_prio, waitq_node->prio);
    3fc4:	68c0      	ldr	r0, [r0, #12]
}
    3fc6:	4281      	cmp	r1, r0
    3fc8:	bfac      	ite	ge
    3fca:	2000      	movge	r0, #0
    3fcc:	2001      	movlt	r0, #1
    3fce:	46bd      	mov	sp, r7
    3fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fd4:	4770      	bx	lr
    3fd6:	bf00      	nop

00003fd8 <__get_next_ready_thread>:
/*
 * Find the next thread to run when there is no thread in the cache and update
 * the cache.
 */
static struct k_thread *__get_next_ready_thread(void)
{
    3fd8:	b480      	push	{r7}
    3fda:	af00      	add	r7, sp, #0

/* find out the currently highest priority where a thread is ready to run */
/* interrupts must be locked */
static inline int _get_highest_ready_prio(void)
{
	uint32_t ready = _nanokernel.ready_q.prio_bmap[0];
    3fdc:	4b09      	ldr	r3, [pc, #36]	; (4004 <__get_next_ready_thread+0x2c>)
    3fde:	691a      	ldr	r2, [r3, #16]
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    3fe0:	fa92 f3a2 	rbit	r3, r2
    3fe4:	fab3 f383 	clz	r3, r3
    3fe8:	b90a      	cbnz	r2, 3fee <__get_next_ready_thread+0x16>
    3fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 * @return a pointer to the head element
 */

static inline sys_dnode_t *sys_dlist_peek_head_not_empty(sys_dlist_t *list)
{
	return list->head;
    3fee:	4a05      	ldr	r2, [pc, #20]	; (4004 <__get_next_ready_thread+0x2c>)
    3ff0:	3302      	adds	r3, #2
    3ff2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    3ff6:	6858      	ldr	r0, [r3, #4]
		 prio, q_index);

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	_nanokernel.ready_q.cache = thread;
    3ff8:	60d0      	str	r0, [r2, #12]

	return thread;
}
    3ffa:	46bd      	mov	sp, r7
    3ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4000:	4770      	bx	lr
    4002:	bf00      	nop
    4004:	200001fc 	.word	0x200001fc

00004008 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
    4008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    400c:	af00      	add	r7, sp, #0
    400e:	4604      	mov	r4, r0
	int q_index = _get_ready_q_q_index(thread->prio);
    4010:	68c0      	ldr	r0, [r0, #12]
	sys_dlist_t *q = &_nanokernel.ready_q.q[q_index];
    4012:	f100 0512 	add.w	r5, r0, #18
    4016:	4e0c      	ldr	r6, [pc, #48]	; (4048 <_add_thread_to_ready_q+0x40>)
    4018:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
    401c:	f105 0804 	add.w	r8, r5, #4

	_set_ready_q_prio_bit(thread->prio);
    4020:	f7ff ffa0 	bl	3f64 <_set_ready_q_prio_bit>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    4024:	f8c4 8000 	str.w	r8, [r4]
	node->prev = list->tail;
    4028:	68ab      	ldr	r3, [r5, #8]
    402a:	6063      	str	r3, [r4, #4]

	list->tail->next = node;
    402c:	68ab      	ldr	r3, [r5, #8]
    402e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4030:	60ac      	str	r4, [r5, #8]
	sys_dlist_append(q, &thread->k_q_node);

	struct k_thread **cache = &_nanokernel.ready_q.cache;

	*cache = *cache && _is_prio_higher(thread->prio, (*cache)->prio) ?
    4032:	68f3      	ldr	r3, [r6, #12]
		 thread : *cache;
    4034:	b123      	cbz	r3, 4040 <_add_thread_to_ready_q+0x38>
	_set_ready_q_prio_bit(thread->prio);
	sys_dlist_append(q, &thread->k_q_node);

	struct k_thread **cache = &_nanokernel.ready_q.cache;

	*cache = *cache && _is_prio_higher(thread->prio, (*cache)->prio) ?
    4036:	68e1      	ldr	r1, [r4, #12]
    4038:	68da      	ldr	r2, [r3, #12]
    403a:	4291      	cmp	r1, r2
    403c:	da00      	bge.n	4040 <_add_thread_to_ready_q+0x38>
		 thread : *cache;
    403e:	4623      	mov	r3, r4
	_set_ready_q_prio_bit(thread->prio);
	sys_dlist_append(q, &thread->k_q_node);

	struct k_thread **cache = &_nanokernel.ready_q.cache;

	*cache = *cache && _is_prio_higher(thread->prio, (*cache)->prio) ?
    4040:	4a01      	ldr	r2, [pc, #4]	; (4048 <_add_thread_to_ready_q+0x40>)
    4042:	60d3      	str	r3, [r2, #12]
    4044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4048:	200001fc 	.word	0x200001fc

0000404c <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
    404c:	b598      	push	{r3, r4, r7, lr}
    404e:	af00      	add	r7, sp, #0
    4050:	4604      	mov	r4, r0
	int q_index = _get_ready_q_q_index(thread->prio);
    4052:	68c3      	ldr	r3, [r0, #12]
	sys_dlist_t *q = &_nanokernel.ready_q.q[q_index];
    4054:	f103 0212 	add.w	r2, r3, #18
    4058:	4b0b      	ldr	r3, [pc, #44]	; (4088 <_remove_thread_from_ready_q+0x3c>)
    405a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    405e:	1d1a      	adds	r2, r3, #4
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4060:	6841      	ldr	r1, [r0, #4]
    4062:	6800      	ldr	r0, [r0, #0]
    4064:	6008      	str	r0, [r1, #0]
	node->next->prev = node->prev;
    4066:	6821      	ldr	r1, [r4, #0]
    4068:	6860      	ldr	r0, [r4, #4]
    406a:	6048      	str	r0, [r1, #4]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    406c:	685b      	ldr	r3, [r3, #4]

	sys_dlist_remove(&thread->k_q_node);
	if (sys_dlist_is_empty(q)) {
    406e:	429a      	cmp	r2, r3
    4070:	d102      	bne.n	4078 <_remove_thread_from_ready_q+0x2c>
		_clear_ready_q_prio_bit(thread->prio);
    4072:	68e0      	ldr	r0, [r4, #12]
    4074:	f7ff ff8c 	bl	3f90 <_clear_ready_q_prio_bit>
	}

	struct k_thread **cache = &_nanokernel.ready_q.cache;

	*cache = *cache == thread ? NULL : *cache;
    4078:	4b03      	ldr	r3, [pc, #12]	; (4088 <_remove_thread_from_ready_q+0x3c>)
    407a:	68db      	ldr	r3, [r3, #12]
    407c:	429c      	cmp	r4, r3
    407e:	d100      	bne.n	4082 <_remove_thread_from_ready_q+0x36>
    4080:	2300      	movs	r3, #0
    4082:	4a01      	ldr	r2, [pc, #4]	; (4088 <_remove_thread_from_ready_q+0x3c>)
    4084:	60d3      	str	r3, [r2, #12]
    4086:	bd98      	pop	{r3, r4, r7, pc}
    4088:	200001fc 	.word	0x200001fc

0000408c <_ms_to_ticks>:

#define ceiling(numerator, divider) \
	(((numerator) + ((divider) - 1)) / (divider))

int32_t _ms_to_ticks(int32_t ms)
{
    408c:	b5b0      	push	{r4, r5, r7, lr}
    408e:	af00      	add	r7, sp, #0
	int64_t ms_ticks_per_sec = (int64_t)ms * sys_clock_ticks_per_sec;
    4090:	17c1      	asrs	r1, r0, #31
    4092:	1802      	adds	r2, r0, r0
    4094:	eb41 0301 	adc.w	r3, r1, r1
    4098:	1814      	adds	r4, r2, r0
    409a:	eb43 0501 	adc.w	r5, r3, r1
    409e:	016b      	lsls	r3, r5, #5
    40a0:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    40a4:	0162      	lsls	r2, r4, #5
    40a6:	1912      	adds	r2, r2, r4
    40a8:	416b      	adcs	r3, r5
    40aa:	1880      	adds	r0, r0, r2
    40ac:	4159      	adcs	r1, r3

	return (int32_t)ceiling(ms_ticks_per_sec, MSEC_PER_SEC);
    40ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    40b2:	2300      	movs	r3, #0
    40b4:	f240 34e7 	movw	r4, #999	; 0x3e7
    40b8:	2500      	movs	r5, #0
    40ba:	1900      	adds	r0, r0, r4
    40bc:	4169      	adcs	r1, r5
    40be:	f7fc fcbb 	bl	a38 <__aeabi_ldivmod>
}
    40c2:	bdb0      	pop	{r4, r5, r7, pc}

000040c4 <_pend_thread>:

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, int32_t timeout)
{
    40c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    40c8:	af00      	add	r7, sp, #0
    40ca:	4606      	mov	r6, r0
    40cc:	460d      	mov	r5, r1
    40ce:	4691      	mov	r9, r2
	sys_dlist_t *dlist = (sys_dlist_t *)wait_q;

	sys_dlist_insert_at(dlist, &thread->k_q_node,
			    _is_wait_q_insert_point, (void *)thread->prio);
    40d0:	f8d0 800c 	ldr.w	r8, [r0, #12]
    40d4:	680c      	ldr	r4, [r1, #0]
 */

static inline void sys_dlist_insert_at(sys_dlist_t *list, sys_dnode_t *node,
	int (*cond)(sys_dnode_t *, void *), void *data)
{
	if (sys_dlist_is_empty(list)) {
    40d6:	42a1      	cmp	r1, r4
    40d8:	d106      	bne.n	40e8 <_pend_thread+0x24>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    40da:	6031      	str	r1, [r6, #0]
	node->prev = list->tail;
    40dc:	684b      	ldr	r3, [r1, #4]
    40de:	6043      	str	r3, [r0, #4]

	list->tail->next = node;
    40e0:	684b      	ldr	r3, [r1, #4]
    40e2:	6018      	str	r0, [r3, #0]
	list->tail = node;
    40e4:	6068      	str	r0, [r5, #4]
    40e6:	e01e      	b.n	4126 <_pend_thread+0x62>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40e8:	42a1      	cmp	r1, r4
    40ea:	d107      	bne.n	40fc <_pend_thread+0x38>
    40ec:	2400      	movs	r4, #0
    40ee:	e005      	b.n	40fc <_pend_thread+0x38>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
    40f0:	686b      	ldr	r3, [r5, #4]
    40f2:	42a3      	cmp	r3, r4
    40f4:	d001      	beq.n	40fa <_pend_thread+0x36>
    40f6:	6824      	ldr	r4, [r4, #0]
    40f8:	e000      	b.n	40fc <_pend_thread+0x38>
    40fa:	2400      	movs	r4, #0
	if (sys_dlist_is_empty(list)) {
		sys_dlist_append(list, node);
	} else {
		sys_dnode_t *pos = sys_dlist_peek_head(list);

		while (pos && !cond(pos, data)) {
    40fc:	b12c      	cbz	r4, 410a <_pend_thread+0x46>
    40fe:	4641      	mov	r1, r8
    4100:	4620      	mov	r0, r4
    4102:	f7ff ff5d 	bl	3fc0 <_is_wait_q_insert_point>
    4106:	2800      	cmp	r0, #0
    4108:	d0f2      	beq.n	40f0 <_pend_thread+0x2c>
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
    410a:	b934      	cbnz	r4, 411a <_pend_thread+0x56>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    410c:	6035      	str	r5, [r6, #0]
	node->prev = list->tail;
    410e:	686b      	ldr	r3, [r5, #4]
    4110:	6073      	str	r3, [r6, #4]

	list->tail->next = node;
    4112:	686b      	ldr	r3, [r5, #4]
    4114:	601e      	str	r6, [r3, #0]
	list->tail = node;
    4116:	606e      	str	r6, [r5, #4]
    4118:	e005      	b.n	4126 <_pend_thread+0x62>
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    411a:	6863      	ldr	r3, [r4, #4]
    411c:	6073      	str	r3, [r6, #4]
		node->next = insert_point;
    411e:	6034      	str	r4, [r6, #0]
		insert_point->prev->next = node;
    4120:	6863      	ldr	r3, [r4, #4]
    4122:	601e      	str	r6, [r3, #0]
		insert_point->prev = node;
    4124:	6066      	str	r6, [r4, #4]
}

/* mark a thread as pending in its TCS */
static inline void _mark_thread_as_pending(struct k_thread *thread)
{
	thread->flags |= K_PENDING;
    4126:	68b3      	ldr	r3, [r6, #8]
    4128:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    412c:	60b3      	str	r3, [r6, #8]

	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
    412e:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
    4132:	d047      	beq.n	41c4 <_pend_thread+0x100>
}

/* mark a thread as being in the timer queue */
static inline void _mark_thread_as_timing(struct k_thread *thread)
{
	thread->flags |= K_TIMING;
    4134:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    4138:	60b3      	str	r3, [r6, #8]
		_mark_thread_as_timing(thread);
		_add_thread_timeout(thread, wait_q,
					_TICK_ALIGN + _ms_to_ticks(timeout));
    413a:	4648      	mov	r0, r9
    413c:	f7ff ffa6 	bl	408c <_ms_to_ticks>

	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
		_mark_thread_as_timing(thread);
		_add_thread_timeout(thread, wait_q,
    4140:	3001      	adds	r0, #1
 */

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q, int32_t timeout)
{
	_add_timeout(thread, &thread->timeout, wait_q, timeout);
    4142:	f106 0814 	add.w	r8, r6, #20
		_nanokernel.timeout_q.tail);

	K_DEBUG("timeout   %p before: next: %p, prev: %p\n",
		timeout_obj, timeout_obj->node.next, timeout_obj->node.prev);

	timeout_obj->thread = thread;
    4146:	61f6      	str	r6, [r6, #28]
	timeout_obj->delta_ticks_from_prev = timeout;
    4148:	6270      	str	r0, [r6, #36]	; 0x24
	timeout_obj->wait_q = (sys_dlist_t *)wait_q;
    414a:	6235      	str	r5, [r6, #32]
	sys_dlist_insert_at(timeout_q, (void *)timeout_obj,
			    _is_timeout_insert_point,
			    &timeout_obj->delta_ticks_from_prev);
    414c:	f106 0524 	add.w	r5, r6, #36	; 0x24
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4150:	4b1d      	ldr	r3, [pc, #116]	; (41c8 <_pend_thread+0x104>)
    4152:	f853 4f04 	ldr.w	r4, [r3, #4]!
 */

static inline void sys_dlist_insert_at(sys_dlist_t *list, sys_dnode_t *node,
	int (*cond)(sys_dnode_t *, void *), void *data)
{
	if (sys_dlist_is_empty(list)) {
    4156:	429c      	cmp	r4, r3
    4158:	d10b      	bne.n	4172 <_pend_thread+0xae>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    415a:	4b1c      	ldr	r3, [pc, #112]	; (41cc <_pend_thread+0x108>)
    415c:	6173      	str	r3, [r6, #20]
	node->prev = list->tail;
    415e:	685a      	ldr	r2, [r3, #4]
    4160:	f8c8 2004 	str.w	r2, [r8, #4]

	list->tail->next = node;
    4164:	685a      	ldr	r2, [r3, #4]
    4166:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    416a:	f8c3 8004 	str.w	r8, [r3, #4]
    416e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4172:	4b16      	ldr	r3, [pc, #88]	; (41cc <_pend_thread+0x108>)
    4174:	429c      	cmp	r4, r3
    4176:	d108      	bne.n	418a <_pend_thread+0xc6>
    4178:	2400      	movs	r4, #0
    417a:	e006      	b.n	418a <_pend_thread+0xc6>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
    417c:	4b12      	ldr	r3, [pc, #72]	; (41c8 <_pend_thread+0x104>)
    417e:	689b      	ldr	r3, [r3, #8]
    4180:	42a3      	cmp	r3, r4
    4182:	d001      	beq.n	4188 <_pend_thread+0xc4>
    4184:	6824      	ldr	r4, [r4, #0]
    4186:	e000      	b.n	418a <_pend_thread+0xc6>
    4188:	2400      	movs	r4, #0
	if (sys_dlist_is_empty(list)) {
		sys_dlist_append(list, node);
	} else {
		sys_dnode_t *pos = sys_dlist_peek_head(list);

		while (pos && !cond(pos, data)) {
    418a:	b12c      	cbz	r4, 4198 <_pend_thread+0xd4>
    418c:	4629      	mov	r1, r5
    418e:	4620      	mov	r0, r4
    4190:	f7ff fed6 	bl	3f40 <_is_timeout_insert_point>
    4194:	2800      	cmp	r0, #0
    4196:	d0f1      	beq.n	417c <_pend_thread+0xb8>
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
    4198:	b95c      	cbnz	r4, 41b2 <_pend_thread+0xee>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    419a:	4b0c      	ldr	r3, [pc, #48]	; (41cc <_pend_thread+0x108>)
    419c:	6173      	str	r3, [r6, #20]
	node->prev = list->tail;
    419e:	685a      	ldr	r2, [r3, #4]
    41a0:	f8c8 2004 	str.w	r2, [r8, #4]

	list->tail->next = node;
    41a4:	685a      	ldr	r2, [r3, #4]
    41a6:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    41aa:	f8c3 8004 	str.w	r8, [r3, #4]
    41ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    41b2:	6863      	ldr	r3, [r4, #4]
    41b4:	f8c8 3004 	str.w	r3, [r8, #4]
		node->next = insert_point;
    41b8:	6174      	str	r4, [r6, #20]
		insert_point->prev->next = node;
    41ba:	6863      	ldr	r3, [r4, #4]
    41bc:	f8c3 8000 	str.w	r8, [r3]
		insert_point->prev = node;
    41c0:	f8c4 8004 	str.w	r8, [r4, #4]
    41c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41c8:	200001fc 	.word	0x200001fc
    41cc:	20000200 	.word	0x20000200

000041d0 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, int32_t timeout)
{
    41d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    41d2:	af00      	add	r7, sp, #0
    41d4:	4605      	mov	r5, r0
    41d6:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
    41d8:	4c04      	ldr	r4, [pc, #16]	; (41ec <_pend_current_thread+0x1c>)
    41da:	6820      	ldr	r0, [r4, #0]
    41dc:	f7ff ff36 	bl	404c <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
    41e0:	4632      	mov	r2, r6
    41e2:	4629      	mov	r1, r5
    41e4:	6820      	ldr	r0, [r4, #0]
    41e6:	f7ff ff6d 	bl	40c4 <_pend_thread>
    41ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    41ec:	200001fc 	.word	0x200001fc

000041f0 <_get_next_ready_thread>:

/* find which one is the next thread to run */
/* must be called with interrupts locked */
struct k_thread *_get_next_ready_thread(void)
{
	struct k_thread *cache = _nanokernel.ready_q.cache;
    41f0:	4b04      	ldr	r3, [pc, #16]	; (4204 <_get_next_ready_thread+0x14>)
    41f2:	68d8      	ldr	r0, [r3, #12]

	return cache ? cache : __get_next_ready_thread();
    41f4:	b920      	cbnz	r0, 4200 <_get_next_ready_thread+0x10>
}

/* find which one is the next thread to run */
/* must be called with interrupts locked */
struct k_thread *_get_next_ready_thread(void)
{
    41f6:	b580      	push	{r7, lr}
    41f8:	af00      	add	r7, sp, #0
	struct k_thread *cache = _nanokernel.ready_q.cache;

	return cache ? cache : __get_next_ready_thread();
    41fa:	f7ff feed 	bl	3fd8 <__get_next_ready_thread>
}
    41fe:	bd80      	pop	{r7, pc}
    4200:	4770      	bx	lr
    4202:	bf00      	nop
    4204:	200001fc 	.word	0x200001fc

00004208 <__must_switch_threads>:
/*
 * Check if there is a thread of higher prio than the current one. Should only
 * be called if we already know that the current thread is preemptible.
 */
int __must_switch_threads(void)
{
    4208:	b480      	push	{r7}
    420a:	af00      	add	r7, sp, #0

/* find out the currently highest priority where a thread is ready to run */
/* interrupts must be locked */
static inline int _get_highest_ready_prio(void)
{
	uint32_t ready = _nanokernel.ready_q.prio_bmap[0];
    420c:	4b0a      	ldr	r3, [pc, #40]	; (4238 <__must_switch_threads+0x30>)
    420e:	691b      	ldr	r3, [r3, #16]
    4210:	fa93 f0a3 	rbit	r0, r3
    4214:	fab0 f080 	clz	r0, r0
    4218:	b90b      	cbnz	r3, 421e <__must_switch_threads+0x16>
    421a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	return find_lsb_set(ready) - 1 - CONFIG_NUM_COOP_PRIORITIES;
    421e:	3810      	subs	r0, #16
		_current->prio, _get_highest_ready_prio());

	extern void _dump_ready_q(void);
	_dump_ready_q();

	return _is_prio_higher(_get_highest_ready_prio(), _current->prio);
    4220:	4b05      	ldr	r3, [pc, #20]	; (4238 <__must_switch_threads+0x30>)
    4222:	681b      	ldr	r3, [r3, #0]
    4224:	68db      	ldr	r3, [r3, #12]
}
    4226:	4283      	cmp	r3, r0
    4228:	bfd4      	ite	le
    422a:	2000      	movle	r0, #0
    422c:	2001      	movgt	r0, #1
    422e:	46bd      	mov	sp, r7
    4230:	f85d 7b04 	ldr.w	r7, [sp], #4
    4234:	4770      	bx	lr
    4236:	bf00      	nop
    4238:	200001fc 	.word	0x200001fc

0000423c <_reschedule_threads>:

/* reschedule threads if the scheduler is not locked */
/* not callable from ISR */
/* must be called with interrupts locked */
void _reschedule_threads(int key)
{
    423c:	b598      	push	{r3, r4, r7, lr}
    423e:	af00      	add	r7, sp, #0
    4240:	4604      	mov	r4, r0
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    4242:	4b0f      	ldr	r3, [pc, #60]	; (4280 <_reschedule_threads+0x44>)
    4244:	681b      	ldr	r3, [r3, #0]
}

/* is thread currenlty cooperative ? */
static inline int _is_coop(struct k_thread *thread)
{
	return thread->prio < 0;
    4246:	68da      	ldr	r2, [r3, #12]
}

/* is thread currently preemptible ? */
static inline int _is_preempt(struct k_thread *thread)
{
	return !_is_coop(thread) && !atomic_get(&thread->sched_locked);
    4248:	2a00      	cmp	r2, #0
    424a:	db07      	blt.n	425c <_reschedule_threads+0x20>
 *
 * @return The value read from <target>
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    424c:	f3bf 8f5f 	dmb	sy
    4250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    4252:	f3bf 8f5f 	dmb	sy
    4256:	b91b      	cbnz	r3, 4260 <_reschedule_threads+0x24>
    4258:	2301      	movs	r3, #1
    425a:	e002      	b.n	4262 <_reschedule_threads+0x26>
    425c:	2300      	movs	r3, #0
    425e:	e000      	b.n	4262 <_reschedule_threads+0x26>
    4260:	2300      	movs	r3, #0
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    4262:	b123      	cbz	r3, 426e <_reschedule_threads+0x32>
    4264:	f7ff ffd0 	bl	4208 <__must_switch_threads>
    4268:	4603      	mov	r3, r0
    426a:	b100      	cbz	r0, 426e <_reschedule_threads+0x32>
    426c:	2301      	movs	r3, #1
	K_DEBUG("rescheduling threads\n");

	if (_must_switch_threads()) {
    426e:	b11b      	cbz	r3, 4278 <_reschedule_threads+0x3c>
		K_DEBUG("context-switching out %p\n", _current);
		_Swap(key);
    4270:	4620      	mov	r0, r4
    4272:	f7ff f9d7 	bl	3624 <_Swap>
    4276:	bd98      	pop	{r3, r4, r7, pc}
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    4278:	f384 8811 	msr	BASEPRI, r4
    427c:	bd98      	pop	{r3, r4, r7, pc}
    427e:	bf00      	nop
    4280:	200001fc 	.word	0x200001fc

00004284 <k_sched_unlock>:
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    4284:	2120      	movs	r1, #32
    4286:	f3ef 8011 	mrs	r0, BASEPRI
    428a:	f381 8811 	msr	BASEPRI, r1
	__ASSERT(_nanokernel.current->sched_locked > 0, "");
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	atomic_dec(&_nanokernel.current->sched_locked);
    428e:	4b09      	ldr	r3, [pc, #36]	; (42b4 <k_sched_unlock+0x30>)
    4290:	681b      	ldr	r3, [r3, #0]
    4292:	3358      	adds	r3, #88	; 0x58
 *
 * @return The previous value from <target>
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    4294:	f3bf 8f5f 	dmb	sy
    4298:	e853 2f00 	ldrex	r2, [r3]
    429c:	3a01      	subs	r2, #1
    429e:	e843 2100 	strex	r1, r2, [r3]
    42a2:	2900      	cmp	r1, #0
    42a4:	d1f8      	bne.n	4298 <k_sched_unlock+0x14>
		irq_unlock(key);
	}
}

void k_sched_unlock(void)
{
    42a6:	b580      	push	{r7, lr}
    42a8:	af00      	add	r7, sp, #0
    42aa:	f3bf 8f5f 	dmb	sy
	atomic_dec(&_nanokernel.current->sched_locked);

	K_DEBUG("scheduler unlocked (%p:%d)\n",
		_current, _current->sched_locked);

	_reschedule_threads(key);
    42ae:	f7ff ffc5 	bl	423c <_reschedule_threads>
    42b2:	bd80      	pop	{r7, pc}
    42b4:	200001fc 	.word	0x200001fc

000042b8 <_is_next_thread_current>:

	return _is_prio_higher(_get_highest_ready_prio(), _current->prio);
}

int _is_next_thread_current(void)
{
    42b8:	b580      	push	{r7, lr}
    42ba:	af00      	add	r7, sp, #0
	return _get_next_ready_thread() == _current;
    42bc:	f7ff ff98 	bl	41f0 <_get_next_ready_thread>
    42c0:	4b03      	ldr	r3, [pc, #12]	; (42d0 <_is_next_thread_current+0x18>)
    42c2:	681b      	ldr	r3, [r3, #0]
}
    42c4:	4283      	cmp	r3, r0
    42c6:	bf14      	ite	ne
    42c8:	2000      	movne	r0, #0
    42ca:	2001      	moveq	r0, #1
    42cc:	bd80      	pop	{r7, pc}
    42ce:	bf00      	nop
    42d0:	200001fc 	.word	0x200001fc

000042d4 <k_thread_priority_set>:
{
	return thread->prio;
}

void k_thread_priority_set(k_tid_t tid, int prio)
{
    42d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42d6:	af00      	add	r7, sp, #0
    42d8:	4604      	mov	r4, r0
    42da:	460e      	mov	r6, r1
    42dc:	2120      	movs	r1, #32
    42de:	f3ef 8511 	mrs	r5, BASEPRI
    42e2:	f381 8811 	msr	BASEPRI, r1
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return (thread->flags & K_EXECUTION_MASK) == K_READY;
    42e6:	6883      	ldr	r3, [r0, #8]
 * queue.
 */
/* must be called with interrupts locked */
static inline void _thread_priority_set(struct k_thread *thread, int prio)
{
	if (_is_thread_ready(thread)) {
    42e8:	f413 3f7c 	tst.w	r3, #258048	; 0x3f000
    42ec:	d106      	bne.n	42fc <k_thread_priority_set+0x28>
		_remove_thread_from_ready_q(thread);
    42ee:	f7ff fead 	bl	404c <_remove_thread_from_ready_q>
		thread->prio = prio;
    42f2:	60e6      	str	r6, [r4, #12]
		_add_thread_to_ready_q(thread);
    42f4:	4620      	mov	r0, r4
    42f6:	f7ff fe87 	bl	4008 <_add_thread_to_ready_q>
    42fa:	e000      	b.n	42fe <k_thread_priority_set+0x2a>
	} else {
		thread->prio = prio;
    42fc:	60c6      	str	r6, [r0, #12]

	struct k_thread *thread = (struct k_thread *)tid;
	int key = irq_lock();

	_thread_priority_set(thread, prio);
	_reschedule_threads(key);
    42fe:	4628      	mov	r0, r5
    4300:	f7ff ff9c 	bl	423c <_reschedule_threads>
    4304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4306:	bf00      	nop

00004308 <_move_thread_to_end_of_prio_q>:
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
	int q_index = _get_ready_q_q_index(thread->prio);
    4308:	68c2      	ldr	r2, [r0, #12]
}

/* find out the ready queue array index for a given prio */
static inline int _get_ready_q_q_index(int prio)
{
	return prio + CONFIG_NUM_COOP_PRIORITIES;
    430a:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_nanokernel.ready_q.q[q_index];
    430e:	f102 0112 	add.w	r1, r2, #18
    4312:	4a11      	ldr	r2, [pc, #68]	; (4358 <_move_thread_to_end_of_prio_q+0x50>)
    4314:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    4318:	1d11      	adds	r1, r2, #4
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
    431a:	6892      	ldr	r2, [r2, #8]

	if (sys_dlist_is_tail(q, &thread->k_q_node)) {
    431c:	4290      	cmp	r0, r2
    431e:	d019      	beq.n	4354 <_move_thread_to_end_of_prio_q+0x4c>
 * This function, along with _add_thread_to_ready_q() and
 * _remove_thread_from_ready_q(), are the _only_ places where a thread is
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
    4320:	b490      	push	{r4, r7}
    4322:	af00      	add	r7, sp, #0
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4324:	6842      	ldr	r2, [r0, #4]
    4326:	6804      	ldr	r4, [r0, #0]
    4328:	6014      	str	r4, [r2, #0]
	node->next->prev = node->prev;
    432a:	6802      	ldr	r2, [r0, #0]
    432c:	6844      	ldr	r4, [r0, #4]
    432e:	6054      	str	r4, [r2, #4]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    4330:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
    4332:	4a09      	ldr	r2, [pc, #36]	; (4358 <_move_thread_to_end_of_prio_q+0x50>)
    4334:	3302      	adds	r3, #2
    4336:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    433a:	6899      	ldr	r1, [r3, #8]
    433c:	6041      	str	r1, [r0, #4]

	list->tail->next = node;
    433e:	6899      	ldr	r1, [r3, #8]
    4340:	6008      	str	r0, [r1, #0]
	list->tail = node;
    4342:	6098      	str	r0, [r3, #8]
	sys_dlist_remove(&thread->k_q_node);
	sys_dlist_append(q, &thread->k_q_node);

	struct k_thread **cache = &_nanokernel.ready_q.cache;

	*cache = *cache == thread ? NULL : *cache;
    4344:	68d3      	ldr	r3, [r2, #12]
    4346:	4298      	cmp	r0, r3
    4348:	d100      	bne.n	434c <_move_thread_to_end_of_prio_q+0x44>
    434a:	2300      	movs	r3, #0
    434c:	4a02      	ldr	r2, [pc, #8]	; (4358 <_move_thread_to_end_of_prio_q+0x50>)
    434e:	60d3      	str	r3, [r2, #12]
}
    4350:	46bd      	mov	sp, r7
    4352:	bc90      	pop	{r4, r7}
    4354:	4770      	bx	lr
    4356:	bf00      	nop
    4358:	200001fc 	.word	0x200001fc

0000435c <k_yield>:

void k_yield(void)
{
    435c:	b5b0      	push	{r4, r5, r7, lr}
    435e:	af00      	add	r7, sp, #0
    4360:	2120      	movs	r1, #32
    4362:	f3ef 8511 	mrs	r5, BASEPRI
    4366:	f381 8811 	msr	BASEPRI, r1
	__ASSERT(!_is_in_isr(), "");

	int key = irq_lock();

	_move_thread_to_end_of_prio_q(_current);
    436a:	4c08      	ldr	r4, [pc, #32]	; (438c <k_yield+0x30>)
    436c:	6820      	ldr	r0, [r4, #0]
    436e:	f7ff ffcb 	bl	4308 <_move_thread_to_end_of_prio_q>

	if (_current == _get_next_ready_thread()) {
    4372:	6824      	ldr	r4, [r4, #0]
    4374:	f7ff ff3c 	bl	41f0 <_get_next_ready_thread>
    4378:	4284      	cmp	r4, r0
    437a:	d102      	bne.n	4382 <k_yield+0x26>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    437c:	f385 8811 	msr	BASEPRI, r5
    4380:	bdb0      	pop	{r4, r5, r7, pc}
		irq_unlock(key);
	} else {
		_Swap(key);
    4382:	4628      	mov	r0, r5
    4384:	f7ff f94e 	bl	3624 <_Swap>
    4388:	bdb0      	pop	{r4, r5, r7, pc}
    438a:	bf00      	nop
    438c:	200001fc 	.word	0x200001fc

00004390 <k_current_get>:
		_reschedule_threads(key);
	}
}

k_tid_t k_current_get(void)
{
    4390:	b480      	push	{r7}
    4392:	af00      	add	r7, sp, #0
	return _current;
}
    4394:	4b02      	ldr	r3, [pc, #8]	; (43a0 <k_current_get+0x10>)
    4396:	6818      	ldr	r0, [r3, #0]
    4398:	46bd      	mov	sp, r7
    439a:	f85d 7b04 	ldr.w	r7, [sp], #4
    439e:	4770      	bx	lr
    43a0:	200001fc 	.word	0x200001fc

000043a4 <handle_sem_group>:
 * Interrupts are locked prior to calling this routine
 *
 * @return 0 if not part of semaphore group, 1 if it is
 */
static int handle_sem_group(struct k_sem *sem, struct k_thread *thread)
{
    43a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    43a6:	af00      	add	r7, sp, #0
	struct _sem_desc *desc = NULL;
	sys_dlist_t  *list;
	sys_dnode_t  *node;
	sys_dnode_t  *next;

	if (!(thread->flags & K_DUMMY)) {
    43a8:	688b      	ldr	r3, [r1, #8]
    43aa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    43ae:	d079      	beq.n	44a4 <handle_sem_group+0x100>
	/*
	 * The awakened thread is a dummy thread and thus was involved
	 * in a semaphore group operation.
	 */

	list = (sys_dlist_t *)dummy->desc.thread->swap_data;
    43b0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    43b2:	691e      	ldr	r6, [r3, #16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    43b4:	6834      	ldr	r4, [r6, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    43b6:	42a6      	cmp	r6, r4
    43b8:	d102      	bne.n	43c0 <handle_sem_group+0x1c>
    43ba:	2400      	movs	r4, #0
    43bc:	e000      	b.n	43c0 <handle_sem_group+0x1c>
			_abort_thread_timeout(dummy_thread);
			_unpend_thread(dummy_thread);

			sys_dlist_remove(node);
		}
		node = next;
    43be:	4614      	mov	r4, r2
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
    43c0:	6873      	ldr	r3, [r6, #4]
    43c2:	429c      	cmp	r4, r3
    43c4:	d001      	beq.n	43ca <handle_sem_group+0x26>
    43c6:	6822      	ldr	r2, [r4, #0]
    43c8:	e000      	b.n	43cc <handle_sem_group+0x28>
    43ca:	2200      	movs	r2, #0
	do {
		next = sys_dlist_peek_next(list, node);

		desc = (struct _sem_desc *)node;

		if (desc->sem != sem) {
    43cc:	68e3      	ldr	r3, [r4, #12]
    43ce:	4283      	cmp	r3, r0
    43d0:	d036      	beq.n	4440 <handle_sem_group+0x9c>

static inline int _abort_timeout(struct _timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
    43d2:	f854 3c08 	ldr.w	r3, [r4, #-8]
    43d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    43da:	d01b      	beq.n	4414 <handle_sem_group+0x70>
		return -1;
	}

	if (!sys_dlist_is_tail(timeout_q, &t->node)) {
    43dc:	f1a4 0518 	sub.w	r5, r4, #24
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
    43e0:	4931      	ldr	r1, [pc, #196]	; (44a8 <handle_sem_group+0x104>)
    43e2:	6889      	ldr	r1, [r1, #8]
    43e4:	428d      	cmp	r5, r1
    43e6:	d007      	beq.n	43f8 <handle_sem_group+0x54>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
    43e8:	d002      	beq.n	43f0 <handle_sem_group+0x4c>
    43ea:	f854 1c18 	ldr.w	r1, [r4, #-24]
    43ee:	e000      	b.n	43f2 <handle_sem_group+0x4e>
    43f0:	2100      	movs	r1, #0
		struct _timeout *next =
			(struct _timeout *)sys_dlist_peek_next(timeout_q,
								    &t->node);
		next->delta_ticks_from_prev += t->delta_ticks_from_prev;
    43f2:	690d      	ldr	r5, [r1, #16]
    43f4:	442b      	add	r3, r5
    43f6:	610b      	str	r3, [r1, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    43f8:	f854 3c14 	ldr.w	r3, [r4, #-20]
    43fc:	f854 1c18 	ldr.w	r1, [r4, #-24]
    4400:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    4402:	f854 3c18 	ldr.w	r3, [r4, #-24]
    4406:	f854 1c14 	ldr.w	r1, [r4, #-20]
    440a:	6059      	str	r1, [r3, #4]
	}
	sys_dlist_remove(&t->node);
	t->delta_ticks_from_prev = -1;
    440c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4410:	f844 3c08 	str.w	r3, [r4, #-8]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4414:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4418:	f854 1c2c 	ldr.w	r1, [r4, #-44]
    441c:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    441e:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    4422:	f854 1c28 	ldr.w	r1, [r4, #-40]
    4426:	6059      	str	r1, [r3, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->flags &= ~K_PENDING;
    4428:	f854 3c24 	ldr.w	r3, [r4, #-36]
    442c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4430:	f844 3c24 	str.w	r3, [r4, #-36]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4434:	6863      	ldr	r3, [r4, #4]
    4436:	6821      	ldr	r1, [r4, #0]
    4438:	6019      	str	r1, [r3, #0]
	node->next->prev = node->prev;
    443a:	6823      	ldr	r3, [r4, #0]
    443c:	6861      	ldr	r1, [r4, #4]
    443e:	6059      	str	r1, [r3, #4]
			_unpend_thread(dummy_thread);

			sys_dlist_remove(node);
		}
		node = next;
	} while (node != NULL);
    4440:	2a00      	cmp	r2, #0
    4442:	d1bc      	bne.n	43be <handle_sem_group+0x1a>
	 * As this code may be executed several times by a semaphore group give
	 * operation, it is important to ensure that the attempt to ready the
	 * master thread is done only once.
	 */

	if (!_is_thread_ready(desc->thread)) {
    4444:	68a2      	ldr	r2, [r4, #8]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return (thread->flags & K_EXECUTION_MASK) == K_READY;
    4446:	6893      	ldr	r3, [r2, #8]
    4448:	f413 3f7c 	tst.w	r3, #258048	; 0x3f000
    444c:	d024      	beq.n	4498 <handle_sem_group+0xf4>
}

static inline void _reset_thread_states(struct k_thread *thread,
					uint32_t states)
{
	thread->flags &= ~states;
    444e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    4452:	6093      	str	r3, [r2, #8]
		_reset_thread_states(desc->thread, K_PENDING | K_TIMING);
		_abort_thread_timeout(desc->thread);
    4454:	68a3      	ldr	r3, [r4, #8]

static inline int _abort_timeout(struct _timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
    4456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    4458:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
    445c:	d015      	beq.n	448a <handle_sem_group+0xe6>
		return -1;
	}

	if (!sys_dlist_is_tail(timeout_q, &t->node)) {
    445e:	f103 0014 	add.w	r0, r3, #20
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
    4462:	4911      	ldr	r1, [pc, #68]	; (44a8 <handle_sem_group+0x104>)
    4464:	6889      	ldr	r1, [r1, #8]
    4466:	4288      	cmp	r0, r1
    4468:	d006      	beq.n	4478 <handle_sem_group+0xd4>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
    446a:	d001      	beq.n	4470 <handle_sem_group+0xcc>
    446c:	6959      	ldr	r1, [r3, #20]
    446e:	e000      	b.n	4472 <handle_sem_group+0xce>
    4470:	2100      	movs	r1, #0
		struct _timeout *next =
			(struct _timeout *)sys_dlist_peek_next(timeout_q,
								    &t->node);
		next->delta_ticks_from_prev += t->delta_ticks_from_prev;
    4472:	6908      	ldr	r0, [r1, #16]
    4474:	4402      	add	r2, r0
    4476:	610a      	str	r2, [r1, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4478:	699a      	ldr	r2, [r3, #24]
    447a:	6959      	ldr	r1, [r3, #20]
    447c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
    447e:	695a      	ldr	r2, [r3, #20]
    4480:	6999      	ldr	r1, [r3, #24]
    4482:	6051      	str	r1, [r2, #4]
	}
	sys_dlist_remove(&t->node);
	t->delta_ticks_from_prev = -1;
    4484:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4488:	625a      	str	r2, [r3, #36]	; 0x24
		if (_is_thread_ready(desc->thread)) {
    448a:	68a0      	ldr	r0, [r4, #8]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return (thread->flags & K_EXECUTION_MASK) == K_READY;
    448c:	6883      	ldr	r3, [r0, #8]
    448e:	f413 3f7c 	tst.w	r3, #258048	; 0x3f000
    4492:	d101      	bne.n	4498 <handle_sem_group+0xf4>
			_add_thread_to_ready_q(desc->thread);
    4494:	f7ff fdb8 	bl	4008 <_add_thread_to_ready_q>
		}
	}
	_set_thread_return_value(desc->thread, 0);
    4498:	68a3      	ldr	r3, [r4, #8]
 * @return N/A
 */
static ALWAYS_INLINE void fiberRtnValueSet(struct tcs *fiber,
					   unsigned int value)
{
	tESF *pEsf = (void *)fiber->preempReg.psp;
    449a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

	pEsf->a1 = value;
    449c:	2200      	movs	r2, #0
    449e:	601a      	str	r2, [r3, #0]

	return 1;
    44a0:	2001      	movs	r0, #1
    44a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!(thread->flags & K_DUMMY)) {
		/*
		 * The awakened thread is a real thread and thus was not
		 * involved in a semaphore group operation.
		 */
		return 0;
    44a4:	2000      	movs	r0, #0
		}
	}
	_set_thread_return_value(desc->thread, 0);

	return 1;
}
    44a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    44a8:	200001fc 	.word	0x200001fc

000044ac <sem_give_common>:
 * @brief Common semaphore give code
 *
 * @return true if _Swap() will need to be invoked; false if not
 */
static bool sem_give_common(struct k_sem *sem)
{
    44ac:	b598      	push	{r3, r4, r7, lr}
    44ae:	af00      	add	r7, sp, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    44b0:	6804      	ldr	r4, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    44b2:	42a0      	cmp	r0, r4
    44b4:	d006      	beq.n	44c4 <sem_give_common+0x18>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    44b6:	6863      	ldr	r3, [r4, #4]
    44b8:	6822      	ldr	r2, [r4, #0]
    44ba:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    44bc:	6823      	ldr	r3, [r4, #0]
    44be:	6862      	ldr	r2, [r4, #4]
    44c0:	605a      	str	r2, [r3, #4]
    44c2:	e000      	b.n	44c6 <sem_give_common+0x1a>
static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
		return NULL;
    44c4:	2400      	movs	r4, #0
/* unpend the first thread from a wait queue */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = (struct k_thread *)sys_dlist_get(wait_q);

	if (thread) {
    44c6:	b11c      	cbz	r4, 44d0 <sem_give_common+0x24>
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->flags &= ~K_PENDING;
    44c8:	68a3      	ldr	r3, [r4, #8]
    44ca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    44ce:	60a3      	str	r3, [r4, #8]
	struct k_thread *thread;

	thread = _unpend_first_thread(&sem->wait_q);
	if (!thread) {
    44d0:	b93c      	cbnz	r4, 44e2 <sem_give_common+0x36>
		/*
		 * No thread is waiting on the semaphore.
		 * Increment the semaphore's count unless
		 * its limit has already been reached.
		 */
		sem->count += (sem->count != sem->limit);
    44d2:	6883      	ldr	r3, [r0, #8]
    44d4:	68c2      	ldr	r2, [r0, #12]
    44d6:	4293      	cmp	r3, r2
    44d8:	bf18      	it	ne
    44da:	3301      	addne	r3, #1
    44dc:	6083      	str	r3, [r0, #8]
		return false;
    44de:	2000      	movs	r0, #0
    44e0:	bd98      	pop	{r3, r4, r7, pc}

static inline int _abort_timeout(struct _timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
    44e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    44e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    44e8:	d015      	beq.n	4516 <sem_give_common+0x6a>
		return -1;
	}

	if (!sys_dlist_is_tail(timeout_q, &t->node)) {
    44ea:	f104 0114 	add.w	r1, r4, #20
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
    44ee:	4a28      	ldr	r2, [pc, #160]	; (4590 <sem_give_common+0xe4>)
    44f0:	6892      	ldr	r2, [r2, #8]
    44f2:	4291      	cmp	r1, r2
    44f4:	d006      	beq.n	4504 <sem_give_common+0x58>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
    44f6:	d001      	beq.n	44fc <sem_give_common+0x50>
    44f8:	6962      	ldr	r2, [r4, #20]
    44fa:	e000      	b.n	44fe <sem_give_common+0x52>
    44fc:	2200      	movs	r2, #0
		struct _timeout *next =
			(struct _timeout *)sys_dlist_peek_next(timeout_q,
								    &t->node);
		next->delta_ticks_from_prev += t->delta_ticks_from_prev;
    44fe:	6911      	ldr	r1, [r2, #16]
    4500:	440b      	add	r3, r1
    4502:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4504:	69a3      	ldr	r3, [r4, #24]
    4506:	6962      	ldr	r2, [r4, #20]
    4508:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    450a:	6963      	ldr	r3, [r4, #20]
    450c:	69a2      	ldr	r2, [r4, #24]
    450e:	605a      	str	r2, [r3, #4]
	}
	sys_dlist_remove(&t->node);
	t->delta_ticks_from_prev = -1;
    4510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4514:	6263      	str	r3, [r4, #36]	; 0x24
	}

	_abort_thread_timeout(thread);

	if (!handle_sem_group(sem, thread)) {
    4516:	4621      	mov	r1, r4
    4518:	f7ff ff44 	bl	43a4 <handle_sem_group>
    451c:	b960      	cbnz	r0, 4538 <sem_give_common+0x8c>
}

static inline void _reset_thread_states(struct k_thread *thread,
					uint32_t states)
{
	thread->flags &= ~states;
    451e:	68a3      	ldr	r3, [r4, #8]
    4520:	f423 42a0 	bic.w	r2, r3, #20480	; 0x5000
    4524:	60a2      	str	r2, [r4, #8]
		 thread, thread->prio, K_HIGHEST_THREAD_PRIO);

	/* K_PRESTART is needed to handle the start-with-delay case */
	_reset_thread_states(thread, K_TIMING|K_PRESTART);

	if (_is_thread_ready(thread)) {
    4526:	f413 3f68 	tst.w	r3, #237568	; 0x3a000
    452a:	d102      	bne.n	4532 <sem_give_common+0x86>
		_add_thread_to_ready_q(thread);
    452c:	4620      	mov	r0, r4
    452e:	f7ff fd6b 	bl	4008 <_add_thread_to_ready_q>
 * @return N/A
 */
static ALWAYS_INLINE void fiberRtnValueSet(struct tcs *fiber,
					   unsigned int value)
{
	tESF *pEsf = (void *)fiber->preempReg.psp;
    4532:	6d23      	ldr	r3, [r4, #80]	; 0x50

	pEsf->a1 = value;
    4534:	2200      	movs	r2, #0
    4536:	601a      	str	r2, [r3, #0]
 */
static ALWAYS_INLINE uint32_t _IpsrGet(void)
{
	uint32_t vector;

	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
    4538:	f3ef 8305 	mrs	r3, IPSR

	/*
	 * IRQs + PendSV (14) + SVC (11) + SYSTICK (15) are interrupts.
	 * Vectors 12 and 13 are reserved, we'll never be in there
	 */
	return (vector > 10) || (vector && _ScbIsNestedExc());
    453c:	2b0a      	cmp	r3, #10
    453e:	d808      	bhi.n	4552 <sem_give_common+0xa6>
    4540:	b14b      	cbz	r3, 4556 <sem_give_common+0xaa>
 */

static inline int _ScbIsNestedExc(void)
{
	/* !bit == preempted exceptions */
	return !__scs.scb.icsr.bit.rettobase;
    4542:	4b14      	ldr	r3, [pc, #80]	; (4594 <sem_give_common+0xe8>)
    4544:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
    4548:	f413 6f00 	tst.w	r3, #2048	; 0x800
    454c:	d005      	beq.n	455a <sem_give_common+0xae>
    454e:	2300      	movs	r3, #0
    4550:	e004      	b.n	455c <sem_give_common+0xb0>
    4552:	2301      	movs	r3, #1
    4554:	e002      	b.n	455c <sem_give_common+0xb0>
    4556:	2300      	movs	r3, #0
    4558:	e000      	b.n	455c <sem_give_common+0xb0>
    455a:	2301      	movs	r3, #1
		/* Handle the non-group case */
		_ready_thread(thread);
		_set_thread_return_value(thread, 0);
	}

	return !_is_in_isr() && _must_switch_threads();
    455c:	b9a3      	cbnz	r3, 4588 <sem_give_common+0xdc>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    455e:	4a0c      	ldr	r2, [pc, #48]	; (4590 <sem_give_common+0xe4>)
    4560:	6812      	ldr	r2, [r2, #0]
}

/* is thread currenlty cooperative ? */
static inline int _is_coop(struct k_thread *thread)
{
	return thread->prio < 0;
    4562:	68d1      	ldr	r1, [r2, #12]
}

/* is thread currently preemptible ? */
static inline int _is_preempt(struct k_thread *thread)
{
	return !_is_coop(thread) && !atomic_get(&thread->sched_locked);
    4564:	2900      	cmp	r1, #0
    4566:	db06      	blt.n	4576 <sem_give_common+0xca>
 *
 * @return The value read from <target>
 */
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4568:	f3bf 8f5f 	dmb	sy
    456c:	6d92      	ldr	r2, [r2, #88]	; 0x58
    456e:	f3bf 8f5f 	dmb	sy
    4572:	b902      	cbnz	r2, 4576 <sem_give_common+0xca>
    4574:	2301      	movs	r3, #1
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    4576:	b123      	cbz	r3, 4582 <sem_give_common+0xd6>
    4578:	f7ff fe46 	bl	4208 <__must_switch_threads>
    457c:	4603      	mov	r3, r0
    457e:	b100      	cbz	r0, 4582 <sem_give_common+0xd6>
    4580:	2301      	movs	r3, #1
    4582:	b113      	cbz	r3, 458a <sem_give_common+0xde>
    4584:	2301      	movs	r3, #1
    4586:	e000      	b.n	458a <sem_give_common+0xde>
    4588:	2300      	movs	r3, #0
    458a:	f003 0001 	and.w	r0, r3, #1
}
    458e:	bd98      	pop	{r3, r4, r7, pc}
    4590:	200001fc 	.word	0x200001fc
    4594:	e000e000 	.word	0xe000e000

00004598 <k_sem_init>:

#endif /* CONFIG_DEBUG_TRACING_KERNEL_OBJECTS */

void k_sem_init(struct k_sem *sem, unsigned int initial_count,
		unsigned int limit)
{
    4598:	b480      	push	{r7}
    459a:	af00      	add	r7, sp, #0
	__ASSERT(limit != 0, "limit cannot be zero");

	sem->count = initial_count;
    459c:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    459e:	60c2      	str	r2, [r0, #12]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    45a0:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    45a2:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->wait_q);
	SYS_TRACING_OBJ_INIT(k_sem, sem);
}
    45a4:	46bd      	mov	sp, r7
    45a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    45aa:	4770      	bx	lr

000045ac <k_sem_give>:
	irq_unlock(key);
}
#endif

void k_sem_give(struct k_sem *sem)
{
    45ac:	b598      	push	{r3, r4, r7, lr}
    45ae:	af00      	add	r7, sp, #0
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    45b0:	2120      	movs	r1, #32
    45b2:	f3ef 8411 	mrs	r4, BASEPRI
    45b6:	f381 8811 	msr	BASEPRI, r1
	unsigned int   key;

	key = irq_lock();

	if (sem_give_common(sem)) {
    45ba:	f7ff ff77 	bl	44ac <sem_give_common>
    45be:	b118      	cbz	r0, 45c8 <k_sem_give+0x1c>
		_Swap(key);
    45c0:	4620      	mov	r0, r4
    45c2:	f7ff f82f 	bl	3624 <_Swap>
    45c6:	bd98      	pop	{r3, r4, r7, pc}
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    45c8:	f384 8811 	msr	BASEPRI, r4
    45cc:	bd98      	pop	{r3, r4, r7, pc}
    45ce:	bf00      	nop

000045d0 <k_sem_take>:
		irq_unlock(key);
	}
}

int k_sem_take(struct k_sem *sem, int32_t timeout)
{
    45d0:	b598      	push	{r3, r4, r7, lr}
    45d2:	af00      	add	r7, sp, #0
    45d4:	460a      	mov	r2, r1
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    45d6:	2120      	movs	r1, #32
    45d8:	f3ef 8411 	mrs	r4, BASEPRI
    45dc:	f381 8811 	msr	BASEPRI, r1
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
    45e0:	6883      	ldr	r3, [r0, #8]
    45e2:	b12b      	cbz	r3, 45f0 <k_sem_take+0x20>
		sem->count--;
    45e4:	3b01      	subs	r3, #1
    45e6:	6083      	str	r3, [r0, #8]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    45e8:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
    45ec:	2000      	movs	r0, #0
    45ee:	bd98      	pop	{r3, r4, r7, pc}
	}

	if (timeout == K_NO_WAIT) {
    45f0:	b922      	cbnz	r2, 45fc <k_sem_take+0x2c>
    45f2:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return -EBUSY;
    45f6:	f06f 000f 	mvn.w	r0, #15
    45fa:	bd98      	pop	{r3, r4, r7, pc}
    45fc:	4611      	mov	r1, r2
	}

	_pend_current_thread(&sem->wait_q, timeout);
    45fe:	f7ff fde7 	bl	41d0 <_pend_current_thread>

	return _Swap(key);
    4602:	4620      	mov	r0, r4
    4604:	f7ff f80e 	bl	3624 <_Swap>
}
    4608:	bd98      	pop	{r3, r4, r7, pc}
    460a:	bf00      	nop

0000460c <__ticks_to_ms>:

/* added tick needed to account for tick in progress */
#define _TICK_ALIGN 1

static int64_t __ticks_to_ms(int64_t ticks)
{
    460c:	b5b0      	push	{r4, r5, r7, lr}
    460e:	af00      	add	r7, sp, #0
#if CONFIG_SYS_CLOCK_EXISTS
	return (MSEC_PER_SEC * (uint64_t)ticks) / sys_clock_ticks_per_sec;
    4610:	008b      	lsls	r3, r1, #2
    4612:	0084      	lsls	r4, r0, #2
    4614:	ea43 7590 	orr.w	r5, r3, r0, lsr #30
    4618:	016b      	lsls	r3, r5, #5
    461a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    461e:	0162      	lsls	r2, r4, #5
    4620:	1b12      	subs	r2, r2, r4
    4622:	eb63 0305 	sbc.w	r3, r3, r5
    4626:	1880      	adds	r0, r0, r2
    4628:	4159      	adcs	r1, r3
    462a:	00cb      	lsls	r3, r1, #3
    462c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    4630:	00c2      	lsls	r2, r0, #3
    4632:	4610      	mov	r0, r2
    4634:	4619      	mov	r1, r3
    4636:	2264      	movs	r2, #100	; 0x64
    4638:	2300      	movs	r3, #0
    463a:	f7fc fa4d 	bl	ad8 <__aeabi_uldivmod>
#else
	__ASSERT(ticks == 0, "");
	return 0;
#endif
}
    463e:	bdb0      	pop	{r4, r5, r7, pc}

00004640 <handle_time_slicing>:
int32_t _time_slice_elapsed;
int32_t _time_slice_duration = CONFIG_TIMESLICE_SIZE;
int  _time_slice_prio_ceiling = CONFIG_TIMESLICE_PRIORITY;

static void handle_time_slicing(int32_t ticks)
{
    4640:	b5b0      	push	{r4, r5, r7, lr}
    4642:	af00      	add	r7, sp, #0
	if (_time_slice_duration == 0) {
    4644:	4b0f      	ldr	r3, [pc, #60]	; (4684 <handle_time_slicing+0x44>)
    4646:	681c      	ldr	r4, [r3, #0]
    4648:	b1dc      	cbz	r4, 4682 <handle_time_slicing+0x42>
		return;
	}

	if (_is_prio_higher(_current->prio, _time_slice_prio_ceiling)) {
    464a:	4b0f      	ldr	r3, [pc, #60]	; (4688 <handle_time_slicing+0x48>)
    464c:	681d      	ldr	r5, [r3, #0]
    464e:	68ea      	ldr	r2, [r5, #12]
    4650:	4b0e      	ldr	r3, [pc, #56]	; (468c <handle_time_slicing+0x4c>)
    4652:	681b      	ldr	r3, [r3, #0]
    4654:	429a      	cmp	r2, r3
    4656:	db14      	blt.n	4682 <handle_time_slicing+0x42>

#define kpriority_t uint32_t

static inline int32_t _ticks_to_ms(int32_t ticks)
{
	return (ticks == TICKS_UNLIMITED) ? K_FOREVER : __ticks_to_ms(ticks);
    4658:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    465c:	d003      	beq.n	4666 <handle_time_slicing+0x26>
    465e:	17c1      	asrs	r1, r0, #31
    4660:	f7ff ffd4 	bl	460c <__ticks_to_ms>
    4664:	e001      	b.n	466a <handle_time_slicing+0x2a>
    4666:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return;
	}

	_time_slice_elapsed += _ticks_to_ms(ticks);
    466a:	4a09      	ldr	r2, [pc, #36]	; (4690 <handle_time_slicing+0x50>)
    466c:	6813      	ldr	r3, [r2, #0]
    466e:	4418      	add	r0, r3
    4670:	6010      	str	r0, [r2, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
    4672:	4284      	cmp	r4, r0
    4674:	dc05      	bgt.n	4682 <handle_time_slicing+0x42>
		_time_slice_elapsed = 0;
    4676:	2200      	movs	r2, #0
    4678:	4b05      	ldr	r3, [pc, #20]	; (4690 <handle_time_slicing+0x50>)
    467a:	601a      	str	r2, [r3, #0]
		_move_thread_to_end_of_prio_q(_current);
    467c:	4628      	mov	r0, r5
    467e:	f7ff fe43 	bl	4308 <_move_thread_to_end_of_prio_q>
    4682:	bdb0      	pop	{r4, r5, r7, pc}
    4684:	20000314 	.word	0x20000314
    4688:	200001fc 	.word	0x200001fc
    468c:	20000310 	.word	0x20000310
    4690:	20000328 	.word	0x20000328

00004694 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the fibers pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(int32_t ticks)
{
    4694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4696:	af00      	add	r7, sp, #0
    4698:	4605      	mov	r5, r0
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    469a:	2120      	movs	r1, #32
    469c:	f3ef 8611 	mrs	r6, BASEPRI
    46a0:	f381 8811 	msr	BASEPRI, r1
	unsigned int  key;

	K_DEBUG("ticks: %d\n", ticks);

	key = irq_lock();
	_sys_clock_tick_count += ticks;
    46a4:	492c      	ldr	r1, [pc, #176]	; (4758 <_nano_sys_clock_tick_announce+0xc4>)
    46a6:	e9d1 2300 	ldrd	r2, r3, [r1]
    46aa:	1812      	adds	r2, r2, r0
    46ac:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    46b0:	e9c1 2300 	strd	r2, r3, [r1]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    46b4:	4a29      	ldr	r2, [pc, #164]	; (475c <_nano_sys_clock_tick_announce+0xc8>)
    46b6:	f852 3f04 	ldr.w	r3, [r2, #4]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46ba:	4293      	cmp	r3, r2
    46bc:	d100      	bne.n	46c0 <_nano_sys_clock_tick_announce+0x2c>
    46be:	2300      	movs	r3, #0
		(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

	K_DEBUG("head: %p, delta: %d\n",
		head, head ? head->delta_ticks_from_prev : -2112);

	if (head) {
    46c0:	2b00      	cmp	r3, #0
    46c2:	d043      	beq.n	474c <_nano_sys_clock_tick_announce+0xb8>
		head->delta_ticks_from_prev -= ticks;
    46c4:	691a      	ldr	r2, [r3, #16]
    46c6:	1b52      	subs	r2, r2, r5
    46c8:	611a      	str	r2, [r3, #16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    46ca:	4a24      	ldr	r2, [pc, #144]	; (475c <_nano_sys_clock_tick_announce+0xc8>)
    46cc:	f852 3f04 	ldr.w	r3, [r2, #4]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    46d0:	4293      	cmp	r3, r2
    46d2:	d137      	bne.n	4744 <_nano_sys_clock_tick_announce+0xb0>
    46d4:	2300      	movs	r3, #0
    46d6:	e035      	b.n	4744 <_nano_sys_clock_tick_announce+0xb0>
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    46d8:	4b20      	ldr	r3, [pc, #128]	; (475c <_nano_sys_clock_tick_announce+0xc8>)
    46da:	f853 4f04 	ldr.w	r4, [r3, #4]!

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
    46de:	429c      	cmp	r4, r3
    46e0:	d006      	beq.n	46f0 <_nano_sys_clock_tick_announce+0x5c>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    46e2:	6863      	ldr	r3, [r4, #4]
    46e4:	6822      	ldr	r2, [r4, #0]
    46e6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    46e8:	6823      	ldr	r3, [r4, #0]
    46ea:	6862      	ldr	r2, [r4, #4]
    46ec:	605a      	str	r2, [r3, #4]
    46ee:	e000      	b.n	46f2 <_nano_sys_clock_tick_announce+0x5e>
static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
		return NULL;
    46f0:	2400      	movs	r4, #0

static inline struct _timeout *_handle_one_timeout(
	sys_dlist_t *timeout_q)
{
	struct _timeout *t = (void *)sys_dlist_get(timeout_q);
	struct k_thread *thread = t->thread;
    46f2:	68a0      	ldr	r0, [r4, #8]

	K_DEBUG("timeout %p\n", t);
	if (thread != NULL) {
    46f4:	b1b8      	cbz	r0, 4726 <_nano_sys_clock_tick_announce+0x92>
/* remove a thread timing out from kernel object's wait queue */

static inline void _unpend_thread_timing_out(struct k_thread *thread,
					     struct _timeout *timeout_obj)
{
	if (timeout_obj->wait_q) {
    46f6:	68e3      	ldr	r3, [r4, #12]
    46f8:	b15b      	cbz	r3, 4712 <_nano_sys_clock_tick_announce+0x7e>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    46fa:	6843      	ldr	r3, [r0, #4]
    46fc:	6802      	ldr	r2, [r0, #0]
    46fe:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    4700:	6803      	ldr	r3, [r0, #0]
    4702:	6842      	ldr	r2, [r0, #4]
    4704:	605a      	str	r2, [r3, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->flags &= ~K_PENDING;
    4706:	6883      	ldr	r3, [r0, #8]
    4708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    470c:	6083      	str	r3, [r0, #8]
		_unpend_thread(thread);
		thread->timeout.wait_q = NULL;
    470e:	2300      	movs	r3, #0
    4710:	6203      	str	r3, [r0, #32]
}

static inline void _reset_thread_states(struct k_thread *thread,
					uint32_t states)
{
	thread->flags &= ~states;
    4712:	6883      	ldr	r3, [r0, #8]
    4714:	f423 42a0 	bic.w	r2, r3, #20480	; 0x5000
    4718:	6082      	str	r2, [r0, #8]
		 thread, thread->prio, K_HIGHEST_THREAD_PRIO);

	/* K_PRESTART is needed to handle the start-with-delay case */
	_reset_thread_states(thread, K_TIMING|K_PRESTART);

	if (_is_thread_ready(thread)) {
    471a:	f413 3f68 	tst.w	r3, #237568	; 0x3a000
    471e:	d106      	bne.n	472e <_nano_sys_clock_tick_announce+0x9a>
		_add_thread_to_ready_q(thread);
    4720:	f7ff fc72 	bl	4008 <_add_thread_to_ready_q>
    4724:	e003      	b.n	472e <_nano_sys_clock_tick_announce+0x9a>

	K_DEBUG("timeout %p\n", t);
	if (thread != NULL) {
		_unpend_thread_timing_out(thread, t);
		_ready_thread(thread);
	} else if (t->func) {
    4726:	6963      	ldr	r3, [r4, #20]
    4728:	b10b      	cbz	r3, 472e <_nano_sys_clock_tick_announce+0x9a>
		t->func(t);
    472a:	4620      	mov	r0, r4
    472c:	4798      	blx	r3
	/*
	 * Note: t->func() may add timeout again. Make sure that
	 * delta_ticks_from_prev is set to -1 only if timeout is
	 * still expired (delta_ticks_from_prev == 0)
	 */
	if (t->delta_ticks_from_prev == 0) {
    472e:	6923      	ldr	r3, [r4, #16]
    4730:	b913      	cbnz	r3, 4738 <_nano_sys_clock_tick_announce+0xa4>
		t->delta_ticks_from_prev = -1;
    4732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4736:	6123      	str	r3, [r4, #16]
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4738:	4a08      	ldr	r2, [pc, #32]	; (475c <_nano_sys_clock_tick_announce+0xc8>)
    473a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    473e:	4293      	cmp	r3, r2
    4740:	d100      	bne.n	4744 <_nano_sys_clock_tick_announce+0xb0>
    4742:	2300      	movs	r3, #0
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;
	struct _timeout *next;

	next = (struct _timeout *)sys_dlist_peek_head(timeout_q);
	while (next && next->delta_ticks_from_prev == 0) {
    4744:	b113      	cbz	r3, 474c <_nano_sys_clock_tick_announce+0xb8>
    4746:	691b      	ldr	r3, [r3, #16]
    4748:	2b00      	cmp	r3, #0
    474a:	d0c5      	beq.n	46d8 <_nano_sys_clock_tick_announce+0x44>

	key = irq_lock();
	_sys_clock_tick_count += ticks;
	handle_expired_timeouts(ticks);

	handle_time_slicing(ticks);
    474c:	4628      	mov	r0, r5
    474e:	f7ff ff77 	bl	4640 <handle_time_slicing>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    4752:	f386 8811 	msr	BASEPRI, r6
    4756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4758:	20000330 	.word	0x20000330
    475c:	200001fc 	.word	0x200001fc

00004760 <_is_timeout_insert_point>:
 * the timeout of the insert point to update its delta queue value, since the
 * current timeout will be inserted before it.
 */

static int _is_timeout_insert_point(sys_dnode_t *test, void *timeout)
{
    4760:	b480      	push	{r7}
    4762:	af00      	add	r7, sp, #0
	struct _timeout *t = (void *)test;
	int32_t *timeout_to_insert = timeout;

	if (*timeout_to_insert > t->delta_ticks_from_prev) {
    4764:	680a      	ldr	r2, [r1, #0]
    4766:	6903      	ldr	r3, [r0, #16]
    4768:	429a      	cmp	r2, r3
    476a:	dd03      	ble.n	4774 <_is_timeout_insert_point+0x14>
		*timeout_to_insert -= t->delta_ticks_from_prev;
    476c:	1ad3      	subs	r3, r2, r3
    476e:	600b      	str	r3, [r1, #0]
		return 0;
    4770:	2000      	movs	r0, #0
    4772:	e002      	b.n	477a <_is_timeout_insert_point+0x1a>
	}

	t->delta_ticks_from_prev -= *timeout_to_insert;
    4774:	1a9b      	subs	r3, r3, r2
    4776:	6103      	str	r3, [r0, #16]
	return 1;
    4778:	2001      	movs	r0, #1
}
    477a:	46bd      	mov	sp, r7
    477c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4780:	4770      	bx	lr
    4782:	bf00      	nop

00004784 <_k_thread_single_start>:
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->flags &= ~K_PRESTART;
    4784:	6883      	ldr	r3, [r0, #8]
    4786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
    478a:	6082      	str	r2, [r0, #8]

void _k_thread_single_start(struct k_thread *thread)
{
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
    478c:	f413 3f6c 	tst.w	r3, #241664	; 0x3b000
    4790:	d104      	bne.n	479c <_k_thread_single_start+0x18>
	_sched_unlock_no_reschedule();
	_Swap(key);
}

void _k_thread_single_start(struct k_thread *thread)
{
    4792:	b580      	push	{r7, lr}
    4794:	af00      	add	r7, sp, #0
	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
		_add_thread_to_ready_q(thread);
    4796:	f7ff fc37 	bl	4008 <_add_thread_to_ready_q>
    479a:	bd80      	pop	{r7, pc}
    479c:	4770      	bx	lr
    479e:	bf00      	nop

000047a0 <start_thread>:

	CODE_UNREACHABLE;
}

static void start_thread(struct k_thread *thread)
{
    47a0:	b598      	push	{r3, r4, r7, lr}
    47a2:	af00      	add	r7, sp, #0
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    47a4:	2120      	movs	r1, #32
    47a6:	f3ef 8411 	mrs	r4, BASEPRI
    47aa:	f381 8811 	msr	BASEPRI, r1
    47ae:	6883      	ldr	r3, [r0, #8]
    47b0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
    47b4:	6082      	str	r2, [r0, #8]
	int key = irq_lock(); /* protect kernel queues */

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
    47b6:	f413 3f6c 	tst.w	r3, #241664	; 0x3b000
    47ba:	d11c      	bne.n	47f6 <start_thread+0x56>
		_add_thread_to_ready_q(thread);
    47bc:	f7ff fc24 	bl	4008 <_add_thread_to_ready_q>
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    47c0:	4b0e      	ldr	r3, [pc, #56]	; (47fc <start_thread+0x5c>)
    47c2:	681b      	ldr	r3, [r3, #0]
}

/* is thread currenlty cooperative ? */
static inline int _is_coop(struct k_thread *thread)
{
	return thread->prio < 0;
    47c4:	68da      	ldr	r2, [r3, #12]
}

/* is thread currently preemptible ? */
static inline int _is_preempt(struct k_thread *thread)
{
	return !_is_coop(thread) && !atomic_get(&thread->sched_locked);
    47c6:	2a00      	cmp	r2, #0
    47c8:	db07      	blt.n	47da <start_thread+0x3a>
    47ca:	f3bf 8f5f 	dmb	sy
    47ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    47d0:	f3bf 8f5f 	dmb	sy
    47d4:	b91b      	cbnz	r3, 47de <start_thread+0x3e>
    47d6:	2301      	movs	r3, #1
    47d8:	e002      	b.n	47e0 <start_thread+0x40>
    47da:	2300      	movs	r3, #0
    47dc:	e000      	b.n	47e0 <start_thread+0x40>
    47de:	2300      	movs	r3, #0
 * Checks if current thread must be context-switched out. The caller must
 * already know that the execution context is a thread.
 */
static inline int _must_switch_threads(void)
{
	return _is_preempt(_current) && __must_switch_threads();
    47e0:	b123      	cbz	r3, 47ec <start_thread+0x4c>
    47e2:	f7ff fd11 	bl	4208 <__must_switch_threads>
    47e6:	4603      	mov	r3, r0
    47e8:	b100      	cbz	r0, 47ec <start_thread+0x4c>
    47ea:	2301      	movs	r3, #1
		if (_must_switch_threads()) {
    47ec:	b11b      	cbz	r3, 47f6 <start_thread+0x56>
			_Swap(key);
    47ee:	4620      	mov	r0, r4
    47f0:	f7fe ff18 	bl	3624 <_Swap>
			return;
    47f4:	bd98      	pop	{r3, r4, r7, pc}
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    47f6:	f384 8811 	msr	BASEPRI, r4
    47fa:	bd98      	pop	{r3, r4, r7, pc}
    47fc:	200001fc 	.word	0x200001fc

00004800 <schedule_new_thread>:

	irq_unlock(key);
}

static void schedule_new_thread(struct k_thread *thread, int32_t delay)
{
    4800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4804:	af00      	add	r7, sp, #0
    4806:	4605      	mov	r5, r0
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
    4808:	b919      	cbnz	r1, 4812 <schedule_new_thread+0x12>
		start_thread(thread);
    480a:	f7ff ffc9 	bl	47a0 <start_thread>
    480e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4812:	4608      	mov	r0, r1
}

/* mark a thread as being in the timer queue */
static inline void _mark_thread_as_timing(struct k_thread *thread)
{
	thread->flags |= K_TIMING;
    4814:	68ab      	ldr	r3, [r5, #8]
    4816:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    481a:	60ab      	str	r3, [r5, #8]
	} else {
		_mark_thread_as_timing(thread);
		_add_thread_timeout(thread, NULL,
					_TICK_ALIGN + _ms_to_ticks(delay));
    481c:	f7ff fc36 	bl	408c <_ms_to_ticks>
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
		start_thread(thread);
	} else {
		_mark_thread_as_timing(thread);
		_add_thread_timeout(thread, NULL,
    4820:	3001      	adds	r0, #1
 */

static inline void _add_thread_timeout(struct k_thread *thread,
				       _wait_q_t *wait_q, int32_t timeout)
{
	_add_timeout(thread, &thread->timeout, wait_q, timeout);
    4822:	f105 0814 	add.w	r8, r5, #20
		_nanokernel.timeout_q.tail);

	K_DEBUG("timeout   %p before: next: %p, prev: %p\n",
		timeout_obj, timeout_obj->node.next, timeout_obj->node.prev);

	timeout_obj->thread = thread;
    4826:	61ed      	str	r5, [r5, #28]
	timeout_obj->delta_ticks_from_prev = timeout;
    4828:	6268      	str	r0, [r5, #36]	; 0x24
	timeout_obj->wait_q = (sys_dlist_t *)wait_q;
    482a:	2300      	movs	r3, #0
    482c:	622b      	str	r3, [r5, #32]
	sys_dlist_insert_at(timeout_q, (void *)timeout_obj,
			    _is_timeout_insert_point,
			    &timeout_obj->delta_ticks_from_prev);
    482e:	f105 0624 	add.w	r6, r5, #36	; 0x24
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4832:	4b1e      	ldr	r3, [pc, #120]	; (48ac <schedule_new_thread+0xac>)
    4834:	f853 4f04 	ldr.w	r4, [r3, #4]!
 */

static inline void sys_dlist_insert_at(sys_dlist_t *list, sys_dnode_t *node,
	int (*cond)(sys_dnode_t *, void *), void *data)
{
	if (sys_dlist_is_empty(list)) {
    4838:	429c      	cmp	r4, r3
    483a:	d10b      	bne.n	4854 <schedule_new_thread+0x54>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    483c:	4b1c      	ldr	r3, [pc, #112]	; (48b0 <schedule_new_thread+0xb0>)
    483e:	616b      	str	r3, [r5, #20]
	node->prev = list->tail;
    4840:	685a      	ldr	r2, [r3, #4]
    4842:	f8c8 2004 	str.w	r2, [r8, #4]

	list->tail->next = node;
    4846:	685a      	ldr	r2, [r3, #4]
    4848:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    484c:	f8c3 8004 	str.w	r8, [r3, #4]
    4850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4854:	4b16      	ldr	r3, [pc, #88]	; (48b0 <schedule_new_thread+0xb0>)
    4856:	429c      	cmp	r4, r3
    4858:	d108      	bne.n	486c <schedule_new_thread+0x6c>
    485a:	2400      	movs	r4, #0
    485c:	e006      	b.n	486c <schedule_new_thread+0x6c>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
    485e:	4b13      	ldr	r3, [pc, #76]	; (48ac <schedule_new_thread+0xac>)
    4860:	689b      	ldr	r3, [r3, #8]
    4862:	42a3      	cmp	r3, r4
    4864:	d001      	beq.n	486a <schedule_new_thread+0x6a>
    4866:	6824      	ldr	r4, [r4, #0]
    4868:	e000      	b.n	486c <schedule_new_thread+0x6c>
    486a:	2400      	movs	r4, #0
	if (sys_dlist_is_empty(list)) {
		sys_dlist_append(list, node);
	} else {
		sys_dnode_t *pos = sys_dlist_peek_head(list);

		while (pos && !cond(pos, data)) {
    486c:	b12c      	cbz	r4, 487a <schedule_new_thread+0x7a>
    486e:	4631      	mov	r1, r6
    4870:	4620      	mov	r0, r4
    4872:	f7ff ff75 	bl	4760 <_is_timeout_insert_point>
    4876:	2800      	cmp	r0, #0
    4878:	d0f1      	beq.n	485e <schedule_new_thread+0x5e>
 */

static inline void sys_dlist_insert_before(sys_dlist_t *list,
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
    487a:	b95c      	cbnz	r4, 4894 <schedule_new_thread+0x94>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	node->next = list;
    487c:	4b0c      	ldr	r3, [pc, #48]	; (48b0 <schedule_new_thread+0xb0>)
    487e:	616b      	str	r3, [r5, #20]
	node->prev = list->tail;
    4880:	685a      	ldr	r2, [r3, #4]
    4882:	f8c8 2004 	str.w	r2, [r8, #4]

	list->tail->next = node;
    4886:	685a      	ldr	r2, [r3, #4]
    4888:	f8c2 8000 	str.w	r8, [r2]
	list->tail = node;
    488c:	f8c3 8004 	str.w	r8, [r3, #4]
    4890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	sys_dnode_t *insert_point, sys_dnode_t *node)
{
	if (!insert_point) {
		sys_dlist_append(list, node);
	} else {
		node->prev = insert_point->prev;
    4894:	6863      	ldr	r3, [r4, #4]
    4896:	f8c8 3004 	str.w	r3, [r8, #4]
		node->next = insert_point;
    489a:	616c      	str	r4, [r5, #20]
		insert_point->prev->next = node;
    489c:	6863      	ldr	r3, [r4, #4]
    489e:	f8c3 8000 	str.w	r8, [r3]
		insert_point->prev = node;
    48a2:	f8c4 8004 	str.w	r8, [r4, #4]
    48a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    48aa:	bf00      	nop
    48ac:	200001fc 	.word	0x200001fc
    48b0:	20000200 	.word	0x20000200

000048b4 <k_am_in_isr>:

	return NANO_CTX_TASK;
}

int k_am_in_isr(void)
{
    48b4:	b480      	push	{r7}
    48b6:	af00      	add	r7, sp, #0
    48b8:	f3ef 8305 	mrs	r3, IPSR
    48bc:	2b0a      	cmp	r3, #10
    48be:	d808      	bhi.n	48d2 <k_am_in_isr+0x1e>
    48c0:	b14b      	cbz	r3, 48d6 <k_am_in_isr+0x22>
    48c2:	4b08      	ldr	r3, [pc, #32]	; (48e4 <k_am_in_isr+0x30>)
    48c4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
    48c8:	f413 6f00 	tst.w	r3, #2048	; 0x800
    48cc:	d005      	beq.n	48da <k_am_in_isr+0x26>
    48ce:	2000      	movs	r0, #0
    48d0:	e004      	b.n	48dc <k_am_in_isr+0x28>
    48d2:	2001      	movs	r0, #1
    48d4:	e002      	b.n	48dc <k_am_in_isr+0x28>
    48d6:	2000      	movs	r0, #0
    48d8:	e000      	b.n	48dc <k_am_in_isr+0x28>
    48da:	2001      	movs	r0, #1
	return _is_in_isr();
}
    48dc:	46bd      	mov	sp, r7
    48de:	f85d 7b04 	ldr.w	r7, [sp], #4
    48e2:	4770      	bx	lr
    48e4:	e000e000 	.word	0xe000e000

000048e8 <sys_execution_context_type_get>:


/* Legacy API */

int sys_execution_context_type_get(void)
{
    48e8:	b580      	push	{r7, lr}
    48ea:	af00      	add	r7, sp, #0
	if (k_am_in_isr())
    48ec:	f7ff ffe2 	bl	48b4 <k_am_in_isr>
    48f0:	b930      	cbnz	r0, 4900 <sys_execution_context_type_get+0x18>
		return NANO_CTX_ISR;

	if (_current->prio < 0)
    48f2:	4b05      	ldr	r3, [pc, #20]	; (4908 <sys_execution_context_type_get+0x20>)
    48f4:	681b      	ldr	r3, [r3, #0]
    48f6:	68db      	ldr	r3, [r3, #12]
    48f8:	2b00      	cmp	r3, #0
    48fa:	da03      	bge.n	4904 <sys_execution_context_type_get+0x1c>
		return NANO_CTX_FIBER;
    48fc:	2001      	movs	r0, #1
    48fe:	bd80      	pop	{r7, pc}
/* Legacy API */

int sys_execution_context_type_get(void)
{
	if (k_am_in_isr())
		return NANO_CTX_ISR;
    4900:	2000      	movs	r0, #0
    4902:	bd80      	pop	{r7, pc}

	if (_current->prio < 0)
		return NANO_CTX_FIBER;

	return NANO_CTX_TASK;
    4904:	2002      	movs	r0, #2
}
    4906:	bd80      	pop	{r7, pc}
    4908:	200001fc 	.word	0x200001fc

0000490c <_is_thread_essential>:
 * This routine indicates if the current thread is an essential system thread.
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
    490c:	b480      	push	{r7}
    490e:	af00      	add	r7, sp, #0
	return _current->flags & K_ESSENTIAL;
    4910:	4b04      	ldr	r3, [pc, #16]	; (4924 <_is_thread_essential+0x18>)
    4912:	681b      	ldr	r3, [r3, #0]
    4914:	6898      	ldr	r0, [r3, #8]
}
    4916:	f400 7000 	and.w	r0, r0, #512	; 0x200
    491a:	46bd      	mov	sp, r7
    491c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4920:	4770      	bx	lr
    4922:	bf00      	nop
    4924:	200001fc 	.word	0x200001fc

00004928 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(void (*entry)(void *, void *, void *),
				 void *p1, void *p2, void *p3)
{
    4928:	b580      	push	{r7, lr}
    492a:	af00      	add	r7, sp, #0
    492c:	4604      	mov	r4, r0
    492e:	4608      	mov	r0, r1
    4930:	4611      	mov	r1, r2
	entry(p1, p2, p3);
    4932:	461a      	mov	r2, r3
    4934:	47a0      	blx	r4

	if (_is_thread_essential()) {
    4936:	f7ff ffe9 	bl	490c <_is_thread_essential>
    493a:	b118      	cbz	r0, 4944 <_thread_entry+0x1c>
		_NanoFatalErrorHandler(_NANO_ERR_INVALID_TASK_EXIT,
    493c:	4903      	ldr	r1, [pc, #12]	; (494c <_thread_entry+0x24>)
    493e:	2001      	movs	r0, #1
    4940:	f7ff f8c2 	bl	3ac8 <_NanoFatalErrorHandler>
				       &_default_esf);
	}

	k_thread_abort(_current);
    4944:	4b02      	ldr	r3, [pc, #8]	; (4950 <_thread_entry+0x28>)
    4946:	6818      	ldr	r0, [r3, #0]
    4948:	f7ff f91e 	bl	3b88 <k_thread_abort>
    494c:	00005888 	.word	0x00005888
    4950:	200001fc 	.word	0x200001fc

00004954 <_k_thread_group_op>:
{
	return !!(thread_data->init_groups & groups);
}

void _k_thread_group_op(uint32_t groups, void (*func)(struct k_thread *))
{
    4954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4958:	af00      	add	r7, sp, #0
    495a:	4605      	mov	r5, r0
    495c:	4688      	mov	r8, r1
 */
static inline void k_sched_lock(void)
{
	__ASSERT(!_is_in_isr(), "");

	atomic_inc(&_nanokernel.current->sched_locked);
    495e:	4b1f      	ldr	r3, [pc, #124]	; (49dc <_k_thread_group_op+0x88>)
    4960:	681b      	ldr	r3, [r3, #0]
    4962:	3358      	adds	r3, #88	; 0x58
 *
 * @return The previous value from <target>
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4964:	f3bf 8f5f 	dmb	sy
    4968:	e853 2f00 	ldrex	r2, [r3]
    496c:	3201      	adds	r2, #1
    496e:	e843 2100 	strex	r1, r2, [r3]
    4972:	2900      	cmp	r1, #0
    4974:	d1f8      	bne.n	4968 <_k_thread_group_op+0x14>
    4976:	f3bf 8f5f 	dmb	sy

	k_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
    497a:	4c19      	ldr	r4, [pc, #100]	; (49e0 <_k_thread_group_op+0x8c>)
    497c:	e00c      	b.n	4998 <_k_thread_group_op+0x44>
}

static inline int is_in_any_group(struct _static_thread_data *thread_data,
				  uint32_t groups)
{
	return !!(thread_data->init_groups & groups);
    497e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	k_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
		if (is_in_any_group(thread_data, groups)) {
    4980:	422b      	tst	r3, r5
    4982:	d008      	beq.n	4996 <_k_thread_group_op+0x42>
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    4984:	2120      	movs	r1, #32
    4986:	f3ef 8611 	mrs	r6, BASEPRI
    498a:	f381 8811 	msr	BASEPRI, r1
			key = irq_lock();
			func(thread_data->thread);
    498e:	6820      	ldr	r0, [r4, #0]
    4990:	47c0      	blx	r8
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    4992:	f386 8811 	msr	BASEPRI, r6

	k_sched_lock();

	/* Invoke func() on each static thread in the specified group set. */

	_FOREACH_STATIC_THREAD(thread_data) {
    4996:	342c      	adds	r4, #44	; 0x2c
    4998:	4b12      	ldr	r3, [pc, #72]	; (49e4 <_k_thread_group_op+0x90>)
    499a:	429c      	cmp	r4, r3
    499c:	d3ef      	bcc.n	497e <_k_thread_group_op+0x2a>

	/*
	 * If the current thread is still in a ready state, then let the
	 * "unlock scheduler" code determine if any rescheduling is needed.
	 */
	if (_is_thread_ready(_current)) {
    499e:	4b0f      	ldr	r3, [pc, #60]	; (49dc <_k_thread_group_op+0x88>)
    49a0:	681b      	ldr	r3, [r3, #0]
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return (thread->flags & K_EXECUTION_MASK) == K_READY;
    49a2:	689a      	ldr	r2, [r3, #8]
    49a4:	f412 3f7c 	tst.w	r2, #258048	; 0x3f000
    49a8:	d103      	bne.n	49b2 <_k_thread_group_op+0x5e>
		k_sched_unlock();
    49aa:	f7ff fc6b 	bl	4284 <k_sched_unlock>
		return;
    49ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
#if defined(CONFIG_CPU_CORTEX_M0_M0PLUS)
	__asm__ volatile("mrs %0, PRIMASK;\n\t"
		"cpsid i;\n\t"
		: "=r" (key));
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile(
    49b2:	2120      	movs	r1, #32
    49b4:	f3ef 8011 	mrs	r0, BASEPRI
    49b8:	f381 8811 	msr	BASEPRI, r1
 */
static inline void _sched_unlock_no_reschedule(void)
{
	__ASSERT(!_is_in_isr(), "");

	atomic_dec(&_nanokernel.current->sched_locked);
    49bc:	3358      	adds	r3, #88	; 0x58
 *
 * @return The previous value from <target>
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    49be:	f3bf 8f5f 	dmb	sy
    49c2:	e853 2f00 	ldrex	r2, [r3]
    49c6:	3a01      	subs	r2, #1
    49c8:	e843 2100 	strex	r1, r2, [r3]
    49cc:	2900      	cmp	r1, #0
    49ce:	d1f8      	bne.n	49c2 <_k_thread_group_op+0x6e>
    49d0:	f3bf 8f5f 	dmb	sy
	}

	/* The current thread is no longer in a ready state--reschedule. */
	key = irq_lock();
	_sched_unlock_no_reschedule();
	_Swap(key);
    49d4:	f7fe fe26 	bl	3624 <_Swap>
    49d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    49dc:	200001fc 	.word	0x200001fc
    49e0:	200000f4 	.word	0x200000f4
    49e4:	2000014c 	.word	0x2000014c

000049e8 <_k_thread_single_abort>:

	_reschedule_threads(key);
}

void _k_thread_single_abort(struct k_thread *thread)
{
    49e8:	b598      	push	{r3, r4, r7, lr}
    49ea:	af00      	add	r7, sp, #0
    49ec:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
    49ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
    49f0:	b103      	cbz	r3, 49f4 <_k_thread_single_abort+0xc>
		thread->fn_abort();
    49f2:	4798      	blx	r3
}

/* check if a thread is ready */
static inline int _is_thread_ready(struct k_thread *thread)
{
	return (thread->flags & K_EXECUTION_MASK) == K_READY;
    49f4:	68a3      	ldr	r3, [r4, #8]
	}

	if (_is_thread_ready(thread)) {
    49f6:	f413 3f7c 	tst.w	r3, #258048	; 0x3f000
    49fa:	d103      	bne.n	4a04 <_k_thread_single_abort+0x1c>
		_remove_thread_from_ready_q(thread);
    49fc:	4620      	mov	r0, r4
    49fe:	f7ff fb25 	bl	404c <_remove_thread_from_ready_q>
    4a02:	e02e      	b.n	4a62 <_k_thread_single_abort+0x7a>
	} else {
		if (_is_thread_pending(thread)) {
    4a04:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4a08:	d009      	beq.n	4a1e <_k_thread_single_abort+0x36>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4a0a:	6863      	ldr	r3, [r4, #4]
    4a0c:	6822      	ldr	r2, [r4, #0]
    4a0e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    4a10:	6823      	ldr	r3, [r4, #0]
    4a12:	6862      	ldr	r2, [r4, #4]
    4a14:	605a      	str	r2, [r3, #4]
}

/* mark a thread as not pending in its TCS */
static inline void _mark_thread_as_not_pending(struct k_thread *thread)
{
	thread->flags &= ~K_PENDING;
    4a16:	68a3      	ldr	r3, [r4, #8]
    4a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    4a1c:	60a3      	str	r3, [r4, #8]
}

/* check if a thread is on the timer queue */
static inline int _is_thread_timing(struct k_thread *thread)
{
	return !!(thread->flags & K_TIMING);
    4a1e:	68a3      	ldr	r3, [r4, #8]
			_unpend_thread(thread);
		}
		if (_is_thread_timing(thread)) {
    4a20:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    4a24:	d01d      	beq.n	4a62 <_k_thread_single_abort+0x7a>

static inline int _abort_timeout(struct _timeout *t)
{
	sys_dlist_t *timeout_q = &_nanokernel.timeout_q;

	if (-1 == t->delta_ticks_from_prev) {
    4a26:	6a63      	ldr	r3, [r4, #36]	; 0x24
    4a28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    4a2c:	d015      	beq.n	4a5a <_k_thread_single_abort+0x72>
		return -1;
	}

	if (!sys_dlist_is_tail(timeout_q, &t->node)) {
    4a2e:	f104 0114 	add.w	r1, r4, #20
 * @return 1 if node is the tail, 0 otherwise
 */

static inline int sys_dlist_is_tail(sys_dlist_t *list, sys_dnode_t *node)
{
	return list->tail == node;
    4a32:	4a0e      	ldr	r2, [pc, #56]	; (4a6c <_k_thread_single_abort+0x84>)
    4a34:	6892      	ldr	r2, [r2, #8]
    4a36:	4291      	cmp	r1, r2
    4a38:	d006      	beq.n	4a48 <_k_thread_single_abort+0x60>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return node == list->tail ? NULL : node->next;
    4a3a:	d001      	beq.n	4a40 <_k_thread_single_abort+0x58>
    4a3c:	6962      	ldr	r2, [r4, #20]
    4a3e:	e000      	b.n	4a42 <_k_thread_single_abort+0x5a>
    4a40:	2200      	movs	r2, #0
		struct _timeout *next =
			(struct _timeout *)sys_dlist_peek_next(timeout_q,
								    &t->node);
		next->delta_ticks_from_prev += t->delta_ticks_from_prev;
    4a42:	6911      	ldr	r1, [r2, #16]
    4a44:	440b      	add	r3, r1
    4a46:	6113      	str	r3, [r2, #16]
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
    4a48:	69a3      	ldr	r3, [r4, #24]
    4a4a:	6962      	ldr	r2, [r4, #20]
    4a4c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
    4a4e:	6963      	ldr	r3, [r4, #20]
    4a50:	69a2      	ldr	r2, [r4, #24]
    4a52:	605a      	str	r2, [r3, #4]
	}
	sys_dlist_remove(&t->node);
	t->delta_ticks_from_prev = -1;
    4a54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a58:	6263      	str	r3, [r4, #36]	; 0x24
}

/* mark a thread as not being in the timer queue */
static inline void _mark_thread_as_not_timing(struct k_thread *thread)
{
	thread->flags &= ~K_TIMING;
    4a5a:	68a3      	ldr	r3, [r4, #8]
    4a5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    4a60:	60a3      	str	r3, [r4, #8]
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_dead(struct k_thread *thread)
{
	thread->flags |= K_DEAD;
    4a62:	68a3      	ldr	r3, [r4, #8]
    4a64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    4a68:	60a3      	str	r3, [r4, #8]
    4a6a:	bd98      	pop	{r3, r4, r7, pc}
    4a6c:	200001fc 	.word	0x200001fc

00004a70 <_init_static_threads>:
	}
	_mark_thread_as_dead(thread);
}

void _init_static_threads(void)
{
    4a70:	b5b0      	push	{r4, r5, r7, lr}
    4a72:	b086      	sub	sp, #24
    4a74:	af06      	add	r7, sp, #24
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    4a76:	4c21      	ldr	r4, [pc, #132]	; (4afc <_init_static_threads+0x8c>)
    4a78:	e012      	b.n	4aa0 <_init_static_threads+0x30>
		_new_thread(
    4a7a:	69e3      	ldr	r3, [r4, #28]
    4a7c:	9304      	str	r3, [sp, #16]
    4a7e:	69a3      	ldr	r3, [r4, #24]
    4a80:	9303      	str	r3, [sp, #12]
    4a82:	6963      	ldr	r3, [r4, #20]
    4a84:	9302      	str	r3, [sp, #8]
    4a86:	6923      	ldr	r3, [r4, #16]
    4a88:	9301      	str	r3, [sp, #4]
    4a8a:	68e3      	ldr	r3, [r4, #12]
    4a8c:	9300      	str	r3, [sp, #0]
    4a8e:	68a3      	ldr	r3, [r4, #8]
    4a90:	2200      	movs	r2, #0
    4a92:	6861      	ldr	r1, [r4, #4]
    4a94:	6820      	ldr	r0, [r4, #0]
    4a96:	f7fe ffb3 	bl	3a00 <_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->thread->init_data = thread_data;
    4a9a:	6823      	ldr	r3, [r4, #0]
    4a9c:	65dc      	str	r4, [r3, #92]	; 0x5c

void _init_static_threads(void)
{
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
    4a9e:	342c      	adds	r4, #44	; 0x2c
    4aa0:	4b17      	ldr	r3, [pc, #92]	; (4b00 <_init_static_threads+0x90>)
    4aa2:	429c      	cmp	r4, r3
    4aa4:	d3e9      	bcc.n	4a7a <_init_static_threads+0xa>
 */
static inline void k_sched_lock(void)
{
	__ASSERT(!_is_in_isr(), "");

	atomic_inc(&_nanokernel.current->sched_locked);
    4aa6:	4b17      	ldr	r3, [pc, #92]	; (4b04 <_init_static_threads+0x94>)
    4aa8:	681b      	ldr	r3, [r3, #0]
    4aaa:	3358      	adds	r3, #88	; 0x58
 *
 * @return The previous value from <target>
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    4aac:	f3bf 8f5f 	dmb	sy
    4ab0:	e853 2f00 	ldrex	r2, [r3]
    4ab4:	3201      	adds	r2, #1
    4ab6:	e843 2100 	strex	r1, r2, [r3]
    4aba:	2900      	cmp	r1, #0
    4abc:	d1f8      	bne.n	4ab0 <_init_static_threads+0x40>
    4abe:	f3bf 8f5f 	dmb	sy
		thread_data->thread->init_data = thread_data;
	}

	k_sched_lock();
	/* Start all (legacy) threads that are part of the EXE group */
	_k_thread_group_op(K_THREAD_GROUP_EXE, _k_thread_single_start);
    4ac2:	4911      	ldr	r1, [pc, #68]	; (4b08 <_init_static_threads+0x98>)
    4ac4:	2001      	movs	r0, #1
    4ac6:	f7ff ff45 	bl	4954 <_k_thread_group_op>
    4aca:	2120      	movs	r1, #32
    4acc:	f3ef 8511 	mrs	r5, BASEPRI
    4ad0:	f381 8811 	msr	BASEPRI, r1
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    4ad4:	4c09      	ldr	r4, [pc, #36]	; (4afc <_init_static_threads+0x8c>)
    4ad6:	e007      	b.n	4ae8 <_init_static_threads+0x78>
		if (thread_data->init_delay != K_FOREVER) {
    4ad8:	6a21      	ldr	r1, [r4, #32]
    4ada:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
    4ade:	d002      	beq.n	4ae6 <_init_static_threads+0x76>
			schedule_new_thread(thread_data->thread,
    4ae0:	6820      	ldr	r0, [r4, #0]
    4ae2:	f7ff fe8d 	bl	4800 <schedule_new_thread>
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
    4ae6:	342c      	adds	r4, #44	; 0x2c
    4ae8:	4b05      	ldr	r3, [pc, #20]	; (4b00 <_init_static_threads+0x90>)
    4aea:	429c      	cmp	r4, r3
    4aec:	d3f4      	bcc.n	4ad8 <_init_static_threads+0x68>
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i;\n\t");
#else /* CONFIG_CPU_CORTEX_M3_M4 */
	__asm__ volatile("msr BASEPRI, %0;\n\t" :  : "r"(key));
    4aee:	f385 8811 	msr	BASEPRI, r5
			schedule_new_thread(thread_data->thread,
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
    4af2:	f7ff fbc7 	bl	4284 <k_sched_unlock>
}
    4af6:	46bd      	mov	sp, r7
    4af8:	bdb0      	pop	{r4, r5, r7, pc}
    4afa:	bf00      	nop
    4afc:	200000f4 	.word	0x200000f4
    4b00:	2000014c 	.word	0x2000014c
    4b04:	200001fc 	.word	0x200001fc
    4b08:	00004785 	.word	0x00004785

00004b0c <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(int32_t ticks __unused)
{
    4b0c:	b580      	push	{r7, lr}
    4b0e:	af00      	add	r7, sp, #0
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_soc_notify_wake_event = 0;
		nano_cpu_idle();
	}
#else
	nano_cpu_idle();
    4b10:	f7fe ffae 	bl	3a70 <nano_cpu_idle>
    4b14:	bd80      	pop	{r7, pc}
    4b16:	bf00      	nop

00004b18 <idle>:
#endif /* CONFIG_TICKLESS_IDLE */
}


void idle(void *unused1, void *unused2, void *unused3)
{
    4b18:	b580      	push	{r7, lr}
    4b1a:	af00      	add	r7, sp, #0
 * @return 1 if empty, 0 otherwise
 */

static inline int sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4b1c:	4a07      	ldr	r2, [pc, #28]	; (4b3c <idle+0x24>)
    4b1e:	f852 3f04 	ldr.w	r3, [r2, #4]!
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4b22:	4293      	cmp	r3, r2
    4b24:	d100      	bne.n	4b28 <idle+0x10>
    4b26:	2300      	movs	r3, #0
static inline int32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
    4b28:	b10b      	cbz	r3, 4b2e <idle+0x16>
    4b2a:	6918      	ldr	r0, [r3, #16]
    4b2c:	e001      	b.n	4b32 <idle+0x1a>
    4b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff

	__idle_tsc = _NanoTscRead();
#endif

	for (;;) {
		_sys_power_save_idle(_get_next_timeout_expiry());
    4b32:	f7ff ffeb 	bl	4b0c <_sys_power_save_idle>

		k_yield();
    4b36:	f7ff fc11 	bl	435c <k_yield>
	}
    4b3a:	e7ef      	b.n	4b1c <idle+0x4>
    4b3c:	200001fc 	.word	0x200001fc

00004b40 <_OffsetAbsSyms>:
/*
 * The final link step uses the symbol _OffsetAbsSyms to force the linkage of
 * offsets.o into the ELF image.
 */

GEN_ABS_SYM_BEGIN(_OffsetAbsSyms)
    4b40:	b480      	push	{r7}
    4b42:	af00      	add	r7, sp, #0

/* size of the struct tcs structure sans save area for floating point regs */

GEN_ABSOLUTE_SYM(__tTCS_NOFLOAT_SIZEOF, sizeof(tTCS));

GEN_ABS_SYM_END
    4b44:	46bd      	mov	sp, r7
    4b46:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b4a:	4770      	bx	lr
